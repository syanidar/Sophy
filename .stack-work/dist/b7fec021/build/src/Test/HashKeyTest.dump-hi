
==================== FINAL INTERFACE ====================
2016-12-17 14:57:37.5804343 UTC

interface Sophy-0.1.0.0-KzkJ0b2opaf7oLnrOdwoet:HashKeyTest 8001
  interface hash: 1dd30f82862b6e920433bf2ffd72504f
  ABI hash: e3d3540a22fdbb897cdef92bd35e3b32
  export-list hash: 1d8a62edeefe9e892fbb94db84d56bea
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: c88ca73ce012a7ebe31a47b06fc51246
  sig of: Nothing
  used TH splices: False
  where
exports:
  HashKeyTest.hashKeyTest
  HashKeyTest.hashMatch
  HashKeyTest.nextRandomPos
  HashKeyTest.randomPosAt
module dependencies: Alias AttackTable BasicConstant BasicData
                     BitBoard Bitwise Constructor Move Position
package dependencies: StateVar-1.1.0.4@StateVar-1.1.0.4-CJpWsiXJdd89SnV9dZtTwc
                      Win32-2.3.1.1@Win32-2.3.1.1
                      adjunctions-4.3@adjunctions-4.3-3ol9sWZt3In19pwXwPv3Xc
                      array-0.5.1.1@array-0.5.1.1 base-4.9.0.0
                      base-orphans-0.5.4@base-orphans-0.5.4-5IQvrjd7gNP548VkOOyIq6
                      bifunctors-5.4.1@bifunctors-5.4.1-8Xk5Wsnk1fr6rBLkW9MO8p
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      comonad-5@comonad-5-2RMxpSOQ5MCHLHIelJrHD4
                      composition-1.0.2.1@composition-1.0.2.1-KZVQ5Se9KseC7kQ38aLGDn
                      containers-0.5.7.1@containers-0.5.7.1
                      contravariant-1.4@contravariant-1.4-KSQE31a7FruKHDlp90hIUT
                      deepseq-1.4.2.0@deepseq-1.4.2.0
                      distributive-0.5.0.2@distributive-0.5.0.2-Cdz2vLOk85j1doGXLcictT
                      exceptions-0.8.3@exceptions-0.8.3-7py7fmRxowDFpHmiHGKrTb
                      free-4.12.4@free-4.12.4-Etm59Dm8iExFxAy1L49Ovd
                      ghc-boot-th-8.0.1@ghc-boot-th-8.0.1 ghc-prim-0.5.0.0
                      hashable-1.2.4.0@hashable-1.2.4.0-EMu4H7FB10MAl6hwKw992G
                      integer-gmp-1.0.0.1
                      kan-extensions-5.0.1@kan-extensions-5.0.1-Asa0tkk9PuPLZ2eXuJ10Gr
                      lens-4.14@lens-4.14-LQbbTc84mRL8zB39b41ZKA
                      mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM
                      parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X
                      prelude-extras-0.4.0.3@prelude-extras-0.4.0.3-FAyB4iuuM7cHXdrLMZtdXq
                      pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.1.0@primitive-0.6.1.0-Ip44DqhfCp21tTUYbecwa
                      profunctors-5.2@profunctors-5.2-2ZZOz6u59T2H8y7z3NgZkY
                      random-1.1@random-1.1-54KmMHXjttlERYcr1mvsAe
                      reflection-2.1.2@reflection-2.1.2-J1ZzlxijzaHGRixYxgxlf9
                      semigroupoids-5.1@semigroupoids-5.1-1Gay4xNO77GHd4DGCzVuax
                      split-0.2.3.1@split-0.2.3.1-IJKK4pOCYGKud0jZImZke
                      stm-2.4.4.1@stm-2.4.4.1-4z2NRWnB0NIIUvSJsHW0kF
                      tagged-0.8.5@tagged-0.8.5-CtgV6EcN0do8F92i1S6iYx
                      template-haskell-2.11.0.0
                      text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
                      transformers-compat-0.5.1.4@transformers-compat-0.5.1.4-81lZyuOJOvsD0zyCv2TKld
                      unordered-containers-0.2.7.1@unordered-containers-0.2.7.1-Eo9jd5DMz45DhBLCG8skzW
                      vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         hashable-1.2.4.0@hashable-1.2.4.0-EMu4H7FB10MAl6hwKw992G:Data.Hashable.Generic
         reflection-2.1.2@reflection-2.1.2-J1ZzlxijzaHGRixYxgxlf9:Data.Reflection
         stm-2.4.4.1@stm-2.4.4.1-4z2NRWnB0NIIUvSJsHW0kF:Control.Monad.STM
         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text
         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text.Lazy
         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text.Show
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Fusion.Bundle
         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Unboxed
family instance modules: adjunctions-4.3@adjunctions-4.3-3ol9sWZt3In19pwXwPv3Xc:Data.Functor.Rep
                         base-4.9.0.0:Control.Applicative base-4.9.0.0:Data.Complex
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Compose
                         base-4.9.0.0:Data.Functor.Const base-4.9.0.0:Data.Functor.Identity
                         base-4.9.0.0:Data.Functor.Product base-4.9.0.0:Data.Functor.Sum
                         base-4.9.0.0:Data.List.NonEmpty base-4.9.0.0:Data.Monoid
                         base-4.9.0.0:Data.Semigroup base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:Data.Version base-4.9.0.0:Data.Void
                         base-4.9.0.0:GHC.Exts base-4.9.0.0:GHC.Generics
                         base-4.9.0.0:GHC.IO.Exception base-4.9.0.0:GHC.TypeLits
                         bifunctors-5.4.1@bifunctors-5.4.1-8Xk5Wsnk1fr6rBLkW9MO8p:Data.Bifunctor.Biff
                         bifunctors-5.4.1@bifunctors-5.4.1-8Xk5Wsnk1fr6rBLkW9MO8p:Data.Bifunctor.Clown
                         bifunctors-5.4.1@bifunctors-5.4.1-8Xk5Wsnk1fr6rBLkW9MO8p:Data.Bifunctor.Flip
                         bifunctors-5.4.1@bifunctors-5.4.1-8Xk5Wsnk1fr6rBLkW9MO8p:Data.Bifunctor.Join
                         bifunctors-5.4.1@bifunctors-5.4.1-8Xk5Wsnk1fr6rBLkW9MO8p:Data.Bifunctor.Joker
                         bifunctors-5.4.1@bifunctors-5.4.1-8Xk5Wsnk1fr6rBLkW9MO8p:Data.Bifunctor.Product
                         bifunctors-5.4.1@bifunctors-5.4.1-8Xk5Wsnk1fr6rBLkW9MO8p:Data.Bifunctor.Sum
                         bifunctors-5.4.1@bifunctors-5.4.1-8Xk5Wsnk1fr6rBLkW9MO8p:Data.Bifunctor.Tannen
                         bifunctors-5.4.1@bifunctors-5.4.1-8Xk5Wsnk1fr6rBLkW9MO8p:Data.Bifunctor.Wrapped
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         ghc-boot-th-8.0.1@ghc-boot-th-8.0.1:GHC.LanguageExtensions.Type
                         kan-extensions-5.0.1@kan-extensions-5.0.1-Asa0tkk9PuPLZ2eXuJ10Gr:Data.Functor.Day
                         kan-extensions-5.0.1@kan-extensions-5.0.1-Asa0tkk9PuPLZ2eXuJ10Gr:Data.Functor.Yoneda
                         lens-4.14@lens-4.14-LQbbTc84mRL8zB39b41ZKA:Control.Lens.At
                         lens-4.14@lens-4.14-LQbbTc84mRL8zB39b41ZKA:Control.Lens.Internal.Indexed
                         lens-4.14@lens-4.14-LQbbTc84mRL8zB39b41ZKA:Control.Lens.Reified
                         lens-4.14@lens-4.14-LQbbTc84mRL8zB39b41ZKA:Control.Lens.Tuple
                         lens-4.14@lens-4.14-LQbbTc84mRL8zB39b41ZKA:Control.Lens.Wrapped
                         lens-4.14@lens-4.14-LQbbTc84mRL8zB39b41ZKA:Control.Lens.Zoom
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.1.0@primitive-0.6.1.0-Ip44DqhfCp21tTUYbecwa:Control.Monad.Primitive
                         profunctors-5.2@profunctors-5.2-2ZZOz6u59T2H8y7z3NgZkY:Data.Profunctor.Rep
                         tagged-0.8.5@tagged-0.8.5-CtgV6EcN0do8F92i1S6iYx:Data.Tagged
                         template-haskell-2.11.0.0:Language.Haskell.TH.Syntax
                         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text
                         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text.Lazy
                         unordered-containers-0.2.7.1@unordered-containers-0.2.7.1-Eo9jd5DMz45DhBLCG8skzW:Data.HashMap.Base
                         unordered-containers-0.2.7.1@unordered-containers-0.2.7.1-Eo9jd5DMz45DhBLCG8skzW:Data.HashSet
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Primitive
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Storable
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Unboxed
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Unboxed.Base
import  -/  Alias ba36719cc8f68ab87c0ee8446a683f1b
  exports: 03b73823d7379fa3fc65780b7c8ac5e2
  Depth 09f60f1afd9625b82a4b6dd1070a407c
import  -/  BasicData 2a7d7454833f4f04d9c30a40b6d5a151
  exports: 05582099e9a48170ebc021a187a7905d
  Position a4a6ae1d21eb516f790aeadb42103ac1
  _zobristKey 65972c6976f94e107b02aa43c8598294
import  -/  Constructor 3ef4f47044021b23db79b8e99d34d085
  exports: 5c7bafe425e900ca8caa1b8f4b7e51d6
  startPos 5208f4f9dfda6396701765a5179a8cc5
import  -/  Move 44a778e409d712d8dcaf2c07d1b2800d
  exports: c971bac89379bbc97981f28ed121b754
  legalMoves f4398696a4e91057c69a0ee4e4024904
  makeMove b10c71dbea286ede8bea4e8fc9f77a6b
import  -/  Position af8b43b323818dabb635634fc880445d
  exports: 0d659c33f0a366721f46836234c7b111
  calcHashKey 587b13a99669afd8fd8fa93209bd0292
  showPos a6c0a3c076c8b731e1ef5a1924c94c9a
import  -/  base-4.9.0.0:Control.Monad b6b2f076948b5e8acd6d95beb4d22bfc
import  -/  base-4.9.0.0:Data.Foldable 3cbed01c922be29649c33015287c82ca
import  -/  base-4.9.0.0:Data.Functor 67cebb006c069ea73adcd2d468cdb0dc
import  -/  base-4.9.0.0:Data.Maybe 086a84053ef7f7810663b5f03b7ec3f7
import  -/  base-4.9.0.0:Data.Traversable 578f976513fd28b7f58c156ea20c192a
import  -/  base-4.9.0.0:GHC.Base dd8044a8d640eee51828c17c476a6ba7
import  -/  base-4.9.0.0:GHC.Err 20faef8829fd13c027d0ee2213637534
import  -/  base-4.9.0.0:GHC.List 47d436dfb7454bb1883fb4d943e3f389
import  -/  base-4.9.0.0:GHC.Real 011de9ca3282ad24a84e4e15f974f98e
import  -/  base-4.9.0.0:Prelude 2d9cd8b0ec3d728f62b734df888d2e34
import  -/  base-4.9.0.0:System.IO c1068c4f4231e3198e330f99a58145b0
import  -/  ghc-prim-0.5.0.0:GHC.Classes 16d48e012d23eaef9bca91ccdd572c02
import  -/  ghc-prim-0.5.0.0:GHC.Types 7378e41b7749213c8c88ceb6b0665d4c
import  -/  random-1.1@random-1.1-54KmMHXjttlERYcr1mvsAe:System.Random 8483439f8ec14d68196250b2c4a4fa4e
78277668fa5fc7bfadb5a2b61f3e9c6e
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   HashKeyTest.$trModule2
                   HashKeyTest.$trModule1) -}
87beac155d8a5b0bf3f7c87ea714490b
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "HashKeyTest"#) -}
151b613479cb33cfb8b18148a705b072
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "Sophy-0.1.0.0-KzkJ0b2opaf7oLnrOdwoet"#) -}
010ad916e7e72de6638d39d66a188ce5
  $whashKeyTest ::
    Alias.Depth
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <L,1*U(U)><S,U><S,U>, Inline: [0],
     Unfolding: (\ (w :: Alias.Depth)
                   (ww :: GHC.Prim.Int#)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 let {
                   w2 :: BasicData.Position -> GHC.Types.IO BasicData.Position
                   = case w of ww1 { GHC.Types.I# ww2 ->
                     HashKeyTest.$wrandomPosAt ww2 }
                 } in
                 letrec {
                   $wloop :: GHC.Prim.Int#
                             -> BasicData.Position -> [GHC.Types.IO BasicData.Position]
                     {- Arity: 2, Strictness: <S,U><L,U>, Inline: [0] -}
                   = \ (ww1 :: GHC.Prim.Int#) (w3 :: BasicData.Position) ->
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.<=# ww1 0#) of wild1 {
                       GHC.Types.False
                       -> GHC.Types.:
                            @ (GHC.Types.IO BasicData.Position)
                            (w2 w3)
                            ($wloop (GHC.Prim.-# ww1 1#) w3)
                       GHC.Types.True
                       -> GHC.Types.[] @ (GHC.Types.IO BasicData.Position) }
                 } in
                 case HashKeyTest.hashKeyTest4
                        ($wloop ww Constructor.startPos)
                        w1 of ds { (#,#) ipv ipv1 ->
                 case GHC.List.filter
                        @ BasicData.Position
                        HashKeyTest.hashKeyTest3
                        ipv1 of wild {
                   [] -> (# ipv, GHC.Tuple.() #)
                   : a1 ds1
                   -> case GHC.IO.Handle.Text.hPutStr2
                             GHC.IO.Handle.FD.stdout
                             HashKeyTest.hashKeyTest2
                             GHC.Types.True
                             ipv of ds2 { (#,#) ipv2 ipv3 ->
                      GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        (Position.showPos a1)
                        GHC.Types.True
                        ipv2 } } }) -}
cb27869de9a482544ea850a4f9895c32
  $wrandomPosAt ::
    GHC.Prim.Int#
    -> BasicData.Position -> GHC.Types.IO BasicData.Position
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# 0# ww) of wild {
                   GHC.Types.False
                   -> GHC.List.foldl2
                        @ (BasicData.Position -> GHC.Types.IO BasicData.Position)
                   GHC.Types.True
                   -> case HashKeyTest.$wxs ww of wild1 {
                        []
                        -> GHC.List.foldl2
                             @ (BasicData.Position -> GHC.Types.IO BasicData.Position)
                        : x xs -> HashKeyTest.hashKeyTest_go xs x } }) -}
729b993032b5b3901d08993c3725968c
  $wxs ::
    GHC.Prim.Int#
    -> [BasicData.Position -> GHC.Types.IO BasicData.Position]
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
e48c3a3907559ef02816f647034661ca
  hashKeyTest :: Alias.Depth -> GHC.Types.Int -> GHC.Types.IO ()
  {- Arity: 3, Strictness: <L,1*U(U)><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                HashKeyTest.hashKeyTest1
                  `cast`
                (<Alias.Depth>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
c9cdf644653de7dc03759c9d16d319ed
  hashKeyTest1 ::
    Alias.Depth
    -> GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <L,1*U(U)><S(S),1*U(U)><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Alias.Depth)
                   (w1 :: GHC.Types.Int)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 HashKeyTest.$whashKeyTest w ww1 w2 }) -}
905ad466e36abbddc60ad8d8131eeb35
  hashKeyTest2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Hash didn't match in the following position"#) -}
6c45c2e9f02c06032a83897d78bcffcf
  hashKeyTest3 :: BasicData.Position -> GHC.Types.Bool
  {- Arity: 1,
     Strictness: <S(SSSSSSSSSSSLLLLLLLSL),1*U(U,U,U,U,U,U,U,U,U,U,1*U,A,A,A,A,A,A,A,U,A)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: BasicData.Position) ->
                 case w of ww { BasicData.Position ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ww20 ->
                 case Position.$wcalcHashKey
                        ww1
                        ww2
                        ww3
                        ww4
                        ww5
                        ww6
                        ww7
                        ww8
                        ww9
                        ww10
                        ww11 of ww21 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.eqWord# ww19 ww21) of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } } }) -}
41a930d54ba32e33c94e7639e064602b
  hashKeyTest4 ::
    [GHC.Types.IO BasicData.Position]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [BasicData.Position] #)
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,U> -}
4f82b80c72f5bd0b0f9740ce1f99c599
  hashKeyTest_go ::
    [BasicData.Position -> GHC.Types.IO BasicData.Position]
    -> (BasicData.Position -> GHC.Types.IO BasicData.Position)
    -> BasicData.Position
    -> GHC.Types.IO BasicData.Position
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U> -}
ef3bd7c328242193b6b681100356c5ef
  hashMatch :: BasicData.Position -> GHC.Types.Bool
  {- Arity: 1,
     Strictness: <S(SSSSSSSSSSSLLLLLLLSL),1*U(U,U,U,U,U,U,U,U,U,U,1*U,A,A,A,A,A,A,A,U,A)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: BasicData.Position) ->
                 case w of ww { BasicData.Position ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ww20 ->
                 case Position.$wcalcHashKey
                        ww1
                        ww2
                        ww3
                        ww4
                        ww5
                        ww6
                        ww7
                        ww8
                        ww9
                        ww10
                        ww11 of ww21 { DEFAULT ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.eqWord# ww19 ww21) } }) -}
dff5d15a8b7193cd0c516276ee3c87dd
  nextRandomPos ::
    BasicData.Position -> GHC.Types.IO BasicData.Position
  {- Arity: 2,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                HashKeyTest.nextRandomPos1
                  `cast`
                (<BasicData.Position>_R
                 ->_R Sym (GHC.Types.N:IO[0] <BasicData.Position>_R)) -}
19aa1c323f4020cbeb8406ff7e428beb
  nextRandomPos1 ::
    BasicData.Position
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, BasicData.Position #)
  {- Arity: 2,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S,U>,
     Unfolding: (\ (x :: BasicData.Position)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case Move.$wmoves x of ww { (#,,#) ww1 ww2 ww3 ->
                 case GHC.List.$wlenAcc @ GHC.Word.Word16 ww1 0# of ww4 {
                   DEFAULT
                   -> case System.Random.theStdGen
                             `cast`
                           (GHC.IORef.N:IORef[0] <System.Random.StdGen>_N) of wild { GHC.STRef.STRef r# ->
                      case GHC.Prim.atomicModifyMutVar#
                             @ GHC.Prim.RealWorld
                             @ System.Random.StdGen
                             @ (System.Random.StdGen, GHC.Types.Int)
                             @ GHC.Types.Int
                             r#
                             System.Random.$fRandomInt2
                             eta of ds1 { (#,#) ipv ipv1 ->
                      case ipv1 of b1 { GHC.Types.I# ipv2 ->
                      (# ipv,
                         let {
                           $j :: GHC.Prim.Int# -> BasicData.Position
                             {- Arity: 1, Strictness: <S,U> -}
                           = \ (ww5 :: GHC.Prim.Int#)[OneShot] ->
                             case GHC.List.$w!!
                                    @ Alias.Move
                                    ww1
                                    ww5 of ww6 { GHC.Word.W16# ww7 ->
                             case x of ww8 { BasicData.Position ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ww20 ww21 ww22 ww23 ww24 ww25 ww26 ww27 ww28 ->
                             Move.$wmakeMove
                               ww7
                               ww9
                               ww10
                               ww11
                               ww12
                               ww13
                               ww14
                               ww15
                               ww16
                               ww17
                               ww18
                               ww19
                               ww20
                               ww21
                               ww22
                               ww23
                               ww24
                               ww25
                               ww26
                               ww27
                               ww28 } }
                         } in
                         case ww4 of wild1 {
                           DEFAULT
                           -> case GHC.Classes.modInt# ipv2 wild1 of ww5 { DEFAULT -> $j ww5 }
                           -1# -> $j 0# } #) } } }
                   0# -> (# eta, x #) } }) -}
ae5bbd9fa2f29f2275ac16dd5beec76d
  randomPosAt ::
    Alias.Depth
    -> BasicData.Position -> GHC.Types.IO BasicData.Position
  {- Arity: 1, Strictness: <S(S),1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Alias.Depth) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 HashKeyTest.$wrandomPosAt ww1 }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

