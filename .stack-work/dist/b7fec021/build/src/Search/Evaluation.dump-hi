
==================== FINAL INTERFACE ====================
2016-12-21 13:12:59.5409096 UTC

interface Sophy-0.1.0.0-KzkJ0b2opaf7oLnrOdwoet:Evaluation 8001
  interface hash: 7459d21574a40754b49e36118cba8816
  ABI hash: 008bf86b6494569d2bab619bd735acc9
  export-list hash: c3f28aa4cbbb32c03fe6e73e0d06f90e
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 25033e05df9576e4d3cdda9e165fa15d
  sig of: Nothing
  used TH splices: False
  where
exports:
  Evaluation.bishopBonus10
  Evaluation.bishopBonus5
  Evaluation.bishopPenalty10
  Evaluation.bishopPenalty20
  Evaluation.bishopPosition
  Evaluation.evaluate
  Evaluation.isolatedPawns
  Evaluation.kingBonus10
  Evaluation.kingBonus20
  Evaluation.kingBonus30
  Evaluation.kingDefenders
  Evaluation.kingEBonus20
  Evaluation.kingEBonus30
  Evaluation.kingEBonus40
  Evaluation.kingEPenalty10
  Evaluation.kingEPenalty20
  Evaluation.kingEPenalty30
  Evaluation.kingEPenalty40
  Evaluation.kingEPenalty50
  Evaluation.kingEPosition
  Evaluation.kingPenalty10
  Evaluation.kingPenalty20
  Evaluation.kingPenalty30
  Evaluation.kingPenalty40
  Evaluation.kingPenalty50
  Evaluation.kingPosition
  Evaluation.knightBonus10
  Evaluation.knightBonus15
  Evaluation.knightBonus20
  Evaluation.knightBonus5
  Evaluation.knightPenalty20
  Evaluation.knightPenalty30
  Evaluation.knightPenalty40
  Evaluation.knightPenalty50
  Evaluation.knightPosition
  Evaluation.mobility
  Evaluation.openADiagonals
  Evaluation.openDDiagonals
  Evaluation.openFiles
  Evaluation.outpost
  Evaluation.pawnBonus10
  Evaluation.pawnBonus20
  Evaluation.pawnBonus25
  Evaluation.pawnBonus30
  Evaluation.pawnBonus5
  Evaluation.pawnBonus50
  Evaluation.pawnPenalty10
  Evaluation.pawnPenalty20
  Evaluation.pawnPenalty5
  Evaluation.pawnPosition
  Evaluation.queenBonus5
  Evaluation.queenPenalty10
  Evaluation.queenPenalty20
  Evaluation.queenPenalty5
  Evaluation.queenPosition
  Evaluation.rookBonus10
  Evaluation.rookBonus5
  Evaluation.rookPenalty5
  Evaluation.rookPosition
  Evaluation.space
  Evaluation.tropism
module dependencies: Alias AttackTable BasicConstant BasicData
                     BitBoard Bitwise Move Position
package dependencies: StateVar-1.1.0.4@StateVar-1.1.0.4-CJpWsiXJdd89SnV9dZtTwc
                      Win32-2.3.1.1@Win32-2.3.1.1
                      adjunctions-4.3@adjunctions-4.3-3ol9sWZt3In19pwXwPv3Xc
                      array-0.5.1.1@array-0.5.1.1 base-4.9.0.0
                      base-orphans-0.5.4@base-orphans-0.5.4-5IQvrjd7gNP548VkOOyIq6
                      bifunctors-5.4.1@bifunctors-5.4.1-8Xk5Wsnk1fr6rBLkW9MO8p
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      comonad-5@comonad-5-2RMxpSOQ5MCHLHIelJrHD4
                      composition-1.0.2.1@composition-1.0.2.1-KZVQ5Se9KseC7kQ38aLGDn
                      containers-0.5.7.1@containers-0.5.7.1
                      contravariant-1.4@contravariant-1.4-KSQE31a7FruKHDlp90hIUT
                      deepseq-1.4.2.0@deepseq-1.4.2.0
                      distributive-0.5.0.2@distributive-0.5.0.2-Cdz2vLOk85j1doGXLcictT
                      exceptions-0.8.3@exceptions-0.8.3-7py7fmRxowDFpHmiHGKrTb
                      free-4.12.4@free-4.12.4-Etm59Dm8iExFxAy1L49Ovd
                      ghc-boot-th-8.0.1@ghc-boot-th-8.0.1 ghc-prim-0.5.0.0
                      hashable-1.2.4.0@hashable-1.2.4.0-EMu4H7FB10MAl6hwKw992G
                      integer-gmp-1.0.0.1
                      kan-extensions-5.0.1@kan-extensions-5.0.1-Asa0tkk9PuPLZ2eXuJ10Gr
                      lens-4.14@lens-4.14-LQbbTc84mRL8zB39b41ZKA
                      mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM
                      prelude-extras-0.4.0.3@prelude-extras-0.4.0.3-FAyB4iuuM7cHXdrLMZtdXq
                      pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.1.0@primitive-0.6.1.0-Ip44DqhfCp21tTUYbecwa
                      profunctors-5.2@profunctors-5.2-2ZZOz6u59T2H8y7z3NgZkY
                      random-1.1@random-1.1-54KmMHXjttlERYcr1mvsAe
                      reflection-2.1.2@reflection-2.1.2-J1ZzlxijzaHGRixYxgxlf9
                      semigroupoids-5.1@semigroupoids-5.1-1Gay4xNO77GHd4DGCzVuax
                      split-0.2.3.1@split-0.2.3.1-IJKK4pOCYGKud0jZImZke
                      stm-2.4.4.1@stm-2.4.4.1-4z2NRWnB0NIIUvSJsHW0kF
                      tagged-0.8.5@tagged-0.8.5-CtgV6EcN0do8F92i1S6iYx
                      template-haskell-2.11.0.0
                      text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
                      transformers-compat-0.5.1.4@transformers-compat-0.5.1.4-81lZyuOJOvsD0zyCv2TKld
                      unordered-containers-0.2.7.1@unordered-containers-0.2.7.1-Eo9jd5DMz45DhBLCG8skzW
                      vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         hashable-1.2.4.0@hashable-1.2.4.0-EMu4H7FB10MAl6hwKw992G:Data.Hashable.Generic
         reflection-2.1.2@reflection-2.1.2-J1ZzlxijzaHGRixYxgxlf9:Data.Reflection
         stm-2.4.4.1@stm-2.4.4.1-4z2NRWnB0NIIUvSJsHW0kF:Control.Monad.STM
         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text
         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text.Lazy
         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text.Show
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Fusion.Bundle
         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Unboxed
family instance modules: adjunctions-4.3@adjunctions-4.3-3ol9sWZt3In19pwXwPv3Xc:Data.Functor.Rep
                         base-4.9.0.0:Control.Applicative base-4.9.0.0:Data.Complex
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Compose
                         base-4.9.0.0:Data.Functor.Const base-4.9.0.0:Data.Functor.Identity
                         base-4.9.0.0:Data.Functor.Product base-4.9.0.0:Data.Functor.Sum
                         base-4.9.0.0:Data.List.NonEmpty base-4.9.0.0:Data.Monoid
                         base-4.9.0.0:Data.Semigroup base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:Data.Version base-4.9.0.0:Data.Void
                         base-4.9.0.0:GHC.Exts base-4.9.0.0:GHC.Generics
                         base-4.9.0.0:GHC.IO.Exception base-4.9.0.0:GHC.TypeLits
                         bifunctors-5.4.1@bifunctors-5.4.1-8Xk5Wsnk1fr6rBLkW9MO8p:Data.Bifunctor.Biff
                         bifunctors-5.4.1@bifunctors-5.4.1-8Xk5Wsnk1fr6rBLkW9MO8p:Data.Bifunctor.Clown
                         bifunctors-5.4.1@bifunctors-5.4.1-8Xk5Wsnk1fr6rBLkW9MO8p:Data.Bifunctor.Flip
                         bifunctors-5.4.1@bifunctors-5.4.1-8Xk5Wsnk1fr6rBLkW9MO8p:Data.Bifunctor.Join
                         bifunctors-5.4.1@bifunctors-5.4.1-8Xk5Wsnk1fr6rBLkW9MO8p:Data.Bifunctor.Joker
                         bifunctors-5.4.1@bifunctors-5.4.1-8Xk5Wsnk1fr6rBLkW9MO8p:Data.Bifunctor.Product
                         bifunctors-5.4.1@bifunctors-5.4.1-8Xk5Wsnk1fr6rBLkW9MO8p:Data.Bifunctor.Sum
                         bifunctors-5.4.1@bifunctors-5.4.1-8Xk5Wsnk1fr6rBLkW9MO8p:Data.Bifunctor.Tannen
                         bifunctors-5.4.1@bifunctors-5.4.1-8Xk5Wsnk1fr6rBLkW9MO8p:Data.Bifunctor.Wrapped
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         ghc-boot-th-8.0.1@ghc-boot-th-8.0.1:GHC.LanguageExtensions.Type
                         kan-extensions-5.0.1@kan-extensions-5.0.1-Asa0tkk9PuPLZ2eXuJ10Gr:Data.Functor.Day
                         kan-extensions-5.0.1@kan-extensions-5.0.1-Asa0tkk9PuPLZ2eXuJ10Gr:Data.Functor.Yoneda
                         lens-4.14@lens-4.14-LQbbTc84mRL8zB39b41ZKA:Control.Lens.At
                         lens-4.14@lens-4.14-LQbbTc84mRL8zB39b41ZKA:Control.Lens.Internal.Indexed
                         lens-4.14@lens-4.14-LQbbTc84mRL8zB39b41ZKA:Control.Lens.Reified
                         lens-4.14@lens-4.14-LQbbTc84mRL8zB39b41ZKA:Control.Lens.Tuple
                         lens-4.14@lens-4.14-LQbbTc84mRL8zB39b41ZKA:Control.Lens.Wrapped
                         lens-4.14@lens-4.14-LQbbTc84mRL8zB39b41ZKA:Control.Lens.Zoom
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.1.0@primitive-0.6.1.0-Ip44DqhfCp21tTUYbecwa:Control.Monad.Primitive
                         profunctors-5.2@profunctors-5.2-2ZZOz6u59T2H8y7z3NgZkY:Data.Profunctor.Rep
                         tagged-0.8.5@tagged-0.8.5-CtgV6EcN0do8F92i1S6iYx:Data.Tagged
                         template-haskell-2.11.0.0:Language.Haskell.TH.Syntax
                         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text
                         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text.Lazy
                         unordered-containers-0.2.7.1@unordered-containers-0.2.7.1-Eo9jd5DMz45DhBLCG8skzW:Data.HashMap.Base
                         unordered-containers-0.2.7.1@unordered-containers-0.2.7.1-Eo9jd5DMz45DhBLCG8skzW:Data.HashSet
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Primitive
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Storable
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Unboxed
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Unboxed.Base
import  -/  Alias ba36719cc8f68ab87c0ee8446a683f1b
  exports: 03b73823d7379fa3fc65780b7c8ac5e2
  BitBoard 461830e1b89cbd9e95b01ba7aa2fcc74
  Evaluation d0ec3a1908e74f25dceb92009ca2d86e
import  -/  AttackTable 9744fc5387b59a0a8607ff353b8c018d
  exports: a05285a83ff207b32b71687481ff8ff3
  kingAttack 8de35413ae8cc94ecd930015876916a7
import  -/  BasicData 2a7d7454833f4f04d9c30a40b6d5a151
  exports: 05582099e9a48170ebc021a187a7905d
  Bishop 42c313f81738f26581e31bd53cfbd397
  King 2db3132eee6067b9d25bc0e1fc945cfa
  Knight 461e5adbab338f7e2a030d9d47abe91e
  North fe9eed961d33ed02e265631f8ff4cc2e
  NorthEast 204d2ff5949f7cbf1e48b7c86fea005a
  NorthWest 71a7e5b034fc151a10ba48eed88964a8
  Pawn 1b02be8111f4c89ef250a784fb2986fe
  Position 682d610c9d78016fb58efbcec8bc1ded
  Position a4a6ae1d21eb516f790aeadb42103ac1
  Queen 9934c7b69e70a8646bf6b75fda804ef3
  Rook 86ec96c7cf9e9c94d4763e21a3c09b90
  South 2a71e753e0fd8155ece42ed5a9b17630
  SouthEast b60b0019654abce894474180331e11fe
  SouthWest a128097e97d8ca5abdd5b148f8904619
  White 1ed56db967e8b2482365f6c064064144
  _attackers f6a0ec5168d0bd061f1e7ebc903f5f17
  _bishops 663edc186d89d4d2be0499ee2e039ff6
  _defendMap 5f68ea0a2ebd91af5cbf3d06d07a526c
  _queens 4a46d684bfd5ea4ad430b16e0b96b44e
  _rooks 1ddb89a9e91db5f37f357b50bdc9e384
  activeColor 071921c133c539dfc0de6ff816d9e34b
  materialBalance 95ffff258b0622515319013592ccfc7a
import  -/  BitBoard 546ecb469d7a09f0dc9092f9430e44fc
  exports: 581f8ad67b3ac061648269de5226c9ef
  bishopAttack 8bbbaf22e6242ed152b48ca7d2115c87
  fill fdfa2511c2f9af36484ce2f46eb0da24
  fillVertically e3a1ab07a44c0180159ab317cb3e46f1
  invert 9c98a382f58a7044cb09de23c7bc1181
  kingAttack 64918d5f00be6283a13fa2055df2c12b
  knightAttack b2ddd31161b9bc6f3b547c65673f93d0
  pawnAttack 97ddddd307d3bcadba801332ddb7f944
  rookAttack 997cd4fcec55884115a1d642399a1f3a
import  -/  Bitwise dac3e64a54b8be9d7c8e1f130b8e73fa
  exports: 9b4cf91b2dee21d2fcd203a2334d40a1
  collapse 466736918cf20f0ebb026d98a12c7059
  without 67ce45f5ed5d75206d3b7d6f09efeff7
import  -/  Move 44a778e409d712d8dcaf2c07d1b2800d
  exports: c971bac89379bbc97981f28ed121b754
  legalMoves f4398696a4e91057c69a0ee4e4024904
  pass c30a49ccbe5ffa66e2dc5a50cf13c3fc
import  -/  Position af8b43b323818dabb635634fc880445d
  exports: 0d659c33f0a366721f46836234c7b111
  <-!-> 91491b08e99be8d04a2f0ed9cebe626a
  <~!~> 151cb5323a11ee050e50b6a3807af24b
  endGame 026a605469abbc99ee2852bf6f49cd6b
  isWhite 105d25cf601ec514e78d347a5c5a0d36
  material 181bf7d143ed301c6c23ac5f987ad2a5
  occupancy eb22049dbafacf872fcec58cd372f33f
  opposite db360e9035ecd51b3b7c88585c0dd71e
import  -/  base-4.9.0.0:Data.Bits c954f6297e2203ba924b7d4bb91aa2cf
import  -/  base-4.9.0.0:Data.Foldable 3cbed01c922be29649c33015287c82ca
import  -/  base-4.9.0.0:Data.Function 2d30bad1e59b32e49b27f71226717080
import  -/  base-4.9.0.0:GHC.Base dd8044a8d640eee51828c17c476a6ba7
import  -/  base-4.9.0.0:GHC.Num f0aed3315b3ed1b330b71fc4148a5581
import  -/  base-4.9.0.0:GHC.Real 011de9ca3282ad24a84e4e15f974f98e
import  -/  base-4.9.0.0:Prelude 2d9cd8b0ec3d728f62b734df888d2e34
import  -/  ghc-prim-0.5.0.0:GHC.Classes 16d48e012d23eaef9bca91ccdd572c02
import  -/  lens-4.14@lens-4.14-LQbbTc84mRL8zB39b41ZKA:Control.Lens b7b80d679f99639b22dc49438349ebe7
import  -/  lens-4.14@lens-4.14-LQbbTc84mRL8zB39b41ZKA:Control.Lens.Getter b4cdad12f267d5ddf6313c85279297ed
cb1efd52e0a1954c4668ffb4d7c01809
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Evaluation.$trModule2
                   Evaluation.$trModule1) -}
047cf9bf6a3cbf11cbc9d9e3c12ab4fc
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Evaluation"#) -}
d977743208052cd4a1a6c93d1d4ba0f9
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "Sophy-0.1.0.0-KzkJ0b2opaf7oLnrOdwoet"#) -}
79fb63424ed2eed93011a384cacd88d0
  $wevaluate ::
    GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> BasicData.Color
    -> BasicData.CastleRight
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Prim.Word#
    -> [Alias.ZobristKey]
    -> GHC.Prim.Int#
  {- Arity: 20,
     Strictness: <S,U><S,U><S,U><S,U><S,U><S,U><S,U><S,U><S,U><S,U><L,U><L,U><L,U><L,U><L,U><L,U><S,U><S,U><L,U><S,U>,
     Inline: [0] -}
7232b1e304750446f61ee0e8c8657faa
  $wkingDefenders ::
    GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> BasicData.Color
    -> GHC.Prim.Int#
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Word#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Word#)
                   (ww4 :: BasicData.Color) ->
                 let {
                   x :: GHC.Prim.Int#
                   = GHC.Prim.word2Int# (GHC.Prim.ctz64# (GHC.Prim.and# ww1 ww3))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# x 0#) of wild1 {
                   GHC.Types.False
                   -> case Evaluation.kingDefenders2 of wild2 { GHC.Types.I# n# ->
                      case Evaluation.kingDefenders1 n# x ret_ty GHC.Prim.Int# of {} }
                   GHC.Types.True
                   -> case Evaluation.kingDefenders2 of wild2 { GHC.Types.I# y ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<# x y) of wild3 {
                        GHC.Types.False
                        -> case Evaluation.kingDefenders1 y x ret_ty GHC.Prim.Int# of {}
                        GHC.Types.True
                        -> case AttackTable.kingAttackTable
                                  `cast`
                                (Trans
                                     (Data.Vector.Unboxed.Base.D:R:VectorWord640[0])
                                     (Data.Vector.Unboxed.Base.N:R:VectorWord64[0])) of wild { Data.Vector.Primitive.Vector dt dt1 dt2 ->
                           case GHC.Prim.indexWord64Array#
                                  dt2
                                  (GHC.Prim.+# dt x) of wild4 { DEFAULT ->
                           let {
                             ww5 :: GHC.Prim.Word# = GHC.Prim.and# wild4 (GHC.Prim.and# ww1 ww2)
                           } in
                           let {
                             $w$j :: GHC.Prim.Word# -> GHC.Prim.Int#
                               {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                             = \ (w :: GHC.Prim.Word#)[OneShot] ->
                               let {
                                 x1 :: GHC.Prim.Int#
                                 = GHC.Prim.word2Int# (GHC.Prim.ctz64# (GHC.Prim.and# ww ww3))
                               } in
                               case GHC.Prim.tagToEnum#
                                      @ GHC.Types.Bool
                                      (GHC.Prim.>=# x1 0#) of wild5 {
                                 GHC.Types.False
                                 -> case Evaluation.kingDefenders1 y x1 ret_ty GHC.Prim.Int# of {}
                                 GHC.Types.True
                                 -> case GHC.Prim.tagToEnum#
                                           @ GHC.Types.Bool
                                           (GHC.Prim.<# x1 y) of wild6 {
                                      GHC.Types.False
                                      -> case Evaluation.kingDefenders1 y x1
                                         ret_ty GHC.Prim.Int#
                                         of {}
                                      GHC.Types.True
                                      -> case GHC.Prim.indexWord64Array#
                                                dt2
                                                (GHC.Prim.+# dt x1) of wild7 { DEFAULT ->
                                         let {
                                           ww6 :: GHC.Prim.Word#
                                           = GHC.Prim.and# wild7 (GHC.Prim.and# ww ww2)
                                         } in
                                         case ww4 of wild8 {
                                           BasicData.White
                                           -> GHC.Prim.*#
                                                (GHC.Prim.-#
                                                   (GHC.Prim.word2Int#
                                                      (GHC.Prim.popCnt64#
                                                         (GHC.Prim.or#
                                                            (GHC.Prim.and#
                                                               (GHC.Prim.uncheckedShiftL# ww6 7#)
                                                               9187201950435737471##)
                                                            (GHC.Prim.and#
                                                               (GHC.Prim.uncheckedShiftL# ww6 9#)
                                                               18374403900871474942##))))
                                                   (GHC.Prim.word2Int# (GHC.Prim.popCnt64# w)))
                                                25#
                                           BasicData.Black
                                           -> GHC.Prim.*#
                                                (GHC.Prim.-#
                                                   (GHC.Prim.word2Int#
                                                      (GHC.Prim.popCnt64#
                                                         (GHC.Prim.or#
                                                            (GHC.Prim.and#
                                                               (GHC.Prim.uncheckedShiftRL# ww6 9#)
                                                               9187201950435737471##)
                                                            (GHC.Prim.and#
                                                               (GHC.Prim.uncheckedShiftRL# ww6 7#)
                                                               18374403900871474942##))))
                                                   (GHC.Prim.word2Int# (GHC.Prim.popCnt64# w)))
                                                25# } } } }
                           } in
                           case ww4 of wild5 {
                             BasicData.White
                             -> $w$j
                                  (GHC.Prim.or#
                                     (GHC.Prim.and#
                                        (GHC.Prim.uncheckedShiftRL# ww5 9#)
                                        9187201950435737471##)
                                     (GHC.Prim.and#
                                        (GHC.Prim.uncheckedShiftRL# ww5 7#)
                                        18374403900871474942##))
                             BasicData.Black
                             -> $w$j
                                  (GHC.Prim.or#
                                     (GHC.Prim.and#
                                        (GHC.Prim.uncheckedShiftL# ww5 7#)
                                        9187201950435737471##)
                                     (GHC.Prim.and#
                                        (GHC.Prim.uncheckedShiftL# ww5 9#)
                                        18374403900871474942##)) } } } } } }) -}
f198cef8c5bb88df882984d2978aaf0e
  $wmobility ::
    GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> BasicData.Color
    -> BasicData.CastleRight
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Prim.Word#
    -> [Alias.ZobristKey]
    -> GHC.Prim.Int#
  {- Arity: 20,
     Strictness: <L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><S,U><S,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><S,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Word#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Word#)
                   (ww4 :: GHC.Prim.Word#)
                   (ww5 :: GHC.Prim.Word#)
                   (ww6 :: GHC.Prim.Word#)
                   (ww7 :: GHC.Prim.Word#)
                   (ww8 :: BasicData.Color)
                   (ww9 :: BasicData.CastleRight)
                   (ww10 :: GHC.Prim.Int#)
                   (ww11 :: GHC.Prim.Int#)
                   (ww12 :: GHC.Prim.Int#)
                   (ww13 :: GHC.Prim.Word#)
                   (ww14 :: GHC.Prim.Word#)
                   (ww15 :: GHC.Prim.Word#)
                   (ww16 :: GHC.Prim.Word#)
                   (ww17 :: GHC.Prim.Int#)
                   (ww18 :: GHC.Prim.Word#)
                   (ww19 :: [Alias.ZobristKey]) ->
                 case Move.$wmoves
                        (BasicData.Position
                           ww
                           ww1
                           ww2
                           ww3
                           ww4
                           ww5
                           ww6
                           ww7
                           ww8
                           ww9
                           ww10
                           ww11
                           ww12
                           ww13
                           ww14
                           ww15
                           ww16
                           ww17
                           ww18
                           ww19) of ww20 { (#,,#) ww21 ww22 ww23 ->
                 case GHC.List.$wlenAcc
                        @ GHC.Word.Word16
                        ww21
                        0# of ww24 { DEFAULT ->
                 case Move.$wmoves
                        (Move.$wpass
                           ww
                           ww1
                           ww2
                           ww3
                           ww4
                           ww5
                           ww6
                           ww7
                           ww8
                           ww9
                           ww10
                           ww11
                           ww12
                           ww13
                           ww14
                           ww15
                           ww16
                           ww17
                           ww18
                           ww19) of ww25 { (#,,#) ww26 ww27 ww28 ->
                 case GHC.List.$wlenAcc
                        @ GHC.Word.Word16
                        ww26
                        0# of ww29 { DEFAULT ->
                 GHC.Prim.-# ww24 ww29 } } } }) -}
48e5b22404d39a98b9c9033c98713f71
  $wspace ::
    GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> BasicData.Color
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
  {- Arity: 10, HasNoCafRefs,
     Strictness: <S,U><S,U><S,U><S,U><S,U><S,U><S,U><S,U><S,U><S,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Word#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Word#)
                   (ww4 :: GHC.Prim.Word#)
                   (ww5 :: GHC.Prim.Word#)
                   (ww6 :: GHC.Prim.Word#)
                   (ww7 :: GHC.Prim.Word#)
                   (ww8 :: BasicData.Color)
                   (ww9 :: GHC.Prim.Word#) ->
                 let {
                   $w$j :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Int#
                     {- Arity: 2, Strictness: <S,U><S,U>, Inline: [0] -}
                   = \ (ww10 :: GHC.Prim.Word#)[OneShot]
                       (ww11 :: GHC.Prim.Word#)[OneShot] ->
                     let {
                       $w$j1 :: GHC.Prim.Word# -> GHC.Prim.Int#
                         {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                       = \ (w :: GHC.Prim.Word#)[OneShot] ->
                         let {
                           ipv :: GHC.Prim.Word#
                           = GHC.Prim.xor# (GHC.Prim.or# ww ww1) 18446744073709551615##
                         } in
                         let {
                           ipv1 :: GHC.Prim.Word# = GHC.Prim.and# ww ww3
                         } in
                         let {
                           ipv2 :: GHC.Prim.Word#
                           = GHC.Prim.and#
                               (GHC.Prim.and# ipv (GHC.Prim.uncheckedShiftL# ipv 9#))
                               18374403900871474942##
                         } in
                         let {
                           ww12 :: GHC.Prim.Word# = GHC.Prim.and# (GHC.Prim.or# ww4 ww6) ww
                         } in
                         let {
                           ipv3 :: GHC.Prim.Word#
                           = GHC.Prim.or#
                               ww12
                               (GHC.Prim.and#
                                  (GHC.Prim.and# (GHC.Prim.uncheckedShiftL# ww12 9#) ipv)
                                  18374403900871474942##)
                         } in
                         let {
                           ipv4 :: GHC.Prim.Word#
                           = GHC.Prim.or#
                               ipv3
                               (GHC.Prim.and#
                                  (GHC.Prim.and# (GHC.Prim.uncheckedShiftL# ipv3 18#) ipv2)
                                  18229723555195321344##)
                         } in
                         let {
                           ipv5 :: GHC.Prim.Word#
                           = GHC.Prim.and#
                               (GHC.Prim.and# ipv (GHC.Prim.uncheckedShiftRL# ipv 7#))
                               18374403900871474942##
                         } in
                         let {
                           ipv6 :: GHC.Prim.Word#
                           = GHC.Prim.or#
                               ww12
                               (GHC.Prim.and#
                                  (GHC.Prim.and# (GHC.Prim.uncheckedShiftRL# ww12 7#) ipv)
                                  18374403900871474942##)
                         } in
                         let {
                           ipv7 :: GHC.Prim.Word#
                           = GHC.Prim.or#
                               ipv6
                               (GHC.Prim.and#
                                  (GHC.Prim.and# (GHC.Prim.uncheckedShiftRL# ipv6 14#) ipv5)
                                  71209857637481724##)
                         } in
                         let {
                           ipv8 :: GHC.Prim.Word#
                           = GHC.Prim.and#
                               (GHC.Prim.and# ipv (GHC.Prim.uncheckedShiftRL# ipv 9#))
                               9187201950435737471##
                         } in
                         let {
                           ipv9 :: GHC.Prim.Word#
                           = GHC.Prim.or#
                               ww12
                               (GHC.Prim.and#
                                  (GHC.Prim.and# (GHC.Prim.uncheckedShiftRL# ww12 9#) ipv)
                                  9187201950435737471##)
                         } in
                         let {
                           ipv10 :: GHC.Prim.Word#
                           = GHC.Prim.or#
                               ipv9
                               (GHC.Prim.and#
                                  (GHC.Prim.and# (GHC.Prim.uncheckedShiftRL# ipv9 18#) ipv8)
                                  17802464409370431##)
                         } in
                         let {
                           ipv11 :: GHC.Prim.Word#
                           = GHC.Prim.and#
                               (GHC.Prim.and# ipv (GHC.Prim.uncheckedShiftL# ipv 7#))
                               9187201950435737471##
                         } in
                         let {
                           ipv12 :: GHC.Prim.Word#
                           = GHC.Prim.or#
                               ww12
                               (GHC.Prim.and#
                                  (GHC.Prim.and# (GHC.Prim.uncheckedShiftL# ww12 7#) ipv)
                                  9187201950435737471##)
                         } in
                         let {
                           ipv13 :: GHC.Prim.Word#
                           = GHC.Prim.or#
                               ipv12
                               (GHC.Prim.and#
                                  (GHC.Prim.and# (GHC.Prim.uncheckedShiftL# ipv12 14#) ipv11)
                                  4557430888798830336##)
                         } in
                         let {
                           ipv14 :: GHC.Prim.Word#
                           = GHC.Prim.and#
                               (GHC.Prim.and# ipv (GHC.Prim.uncheckedShiftL# ipv 1#))
                               18374403900871474942##
                         } in
                         let {
                           ww13 :: GHC.Prim.Word# = GHC.Prim.and# (GHC.Prim.or# ww5 ww6) ww
                         } in
                         let {
                           ipv15 :: GHC.Prim.Word#
                           = GHC.Prim.or#
                               ww13
                               (GHC.Prim.and#
                                  (GHC.Prim.and# (GHC.Prim.uncheckedShiftL# ww13 1#) ipv)
                                  18374403900871474942##)
                         } in
                         let {
                           ipv16 :: GHC.Prim.Word#
                           = GHC.Prim.or#
                               ipv15
                               (GHC.Prim.and#
                                  (GHC.Prim.and# (GHC.Prim.uncheckedShiftL# ipv15 2#) ipv14)
                                  18229723555195321596##)
                         } in
                         let {
                           ipv17 :: GHC.Prim.Word#
                           = GHC.Prim.or#
                               ww13
                               (GHC.Prim.and# (GHC.Prim.uncheckedShiftRL# ww13 8#) ipv)
                         } in
                         let {
                           ipv18 :: GHC.Prim.Word#
                           = GHC.Prim.and# ipv (GHC.Prim.uncheckedShiftRL# ipv 8#)
                         } in
                         let {
                           ipv19 :: GHC.Prim.Word#
                           = GHC.Prim.or#
                               ipv17
                               (GHC.Prim.and# (GHC.Prim.uncheckedShiftRL# ipv17 16#) ipv18)
                         } in
                         let {
                           ipv20 :: GHC.Prim.Word#
                           = GHC.Prim.and#
                               (GHC.Prim.and# ipv (GHC.Prim.uncheckedShiftRL# ipv 1#))
                               9187201950435737471##
                         } in
                         let {
                           ipv21 :: GHC.Prim.Word#
                           = GHC.Prim.or#
                               ww13
                               (GHC.Prim.and#
                                  (GHC.Prim.and# (GHC.Prim.uncheckedShiftRL# ww13 1#) ipv)
                                  9187201950435737471##)
                         } in
                         let {
                           ipv22 :: GHC.Prim.Word#
                           = GHC.Prim.or#
                               ipv21
                               (GHC.Prim.and#
                                  (GHC.Prim.and# (GHC.Prim.uncheckedShiftRL# ipv21 2#) ipv20)
                                  4557430888798830399##)
                         } in
                         let {
                           ipv23 :: GHC.Prim.Word#
                           = GHC.Prim.or#
                               ww13
                               (GHC.Prim.and# (GHC.Prim.uncheckedShiftL# ww13 8#) ipv)
                         } in
                         let {
                           ipv24 :: GHC.Prim.Word#
                           = GHC.Prim.and# ipv (GHC.Prim.uncheckedShiftL# ipv 8#)
                         } in
                         let {
                           ipv25 :: GHC.Prim.Word#
                           = GHC.Prim.or#
                               ipv23
                               (GHC.Prim.and# (GHC.Prim.uncheckedShiftL# ipv23 16#) ipv24)
                         } in
                         let {
                           ipv26 :: GHC.Prim.Word# = GHC.Prim.and# ww ww7
                         } in
                         GHC.Prim.-#
                           (GHC.Prim.word2Int#
                              (GHC.Prim.popCnt64#
                                 (GHC.Prim.and#
                                    (GHC.Prim.or#
                                       (GHC.Prim.or#
                                          (GHC.Prim.or#
                                             (GHC.Prim.or#
                                                w
                                                (GHC.Prim.or#
                                                   (GHC.Prim.or#
                                                      (GHC.Prim.or#
                                                         (GHC.Prim.or#
                                                            (GHC.Prim.or#
                                                               (GHC.Prim.or#
                                                                  (GHC.Prim.or#
                                                                     (GHC.Prim.and#
                                                                        (GHC.Prim.uncheckedShiftL#
                                                                           ipv1
                                                                           15#)
                                                                        9187201950435737471##)
                                                                     (GHC.Prim.and#
                                                                        (GHC.Prim.uncheckedShiftL#
                                                                           ipv1
                                                                           6#)
                                                                        4557430888798830399##))
                                                                  (GHC.Prim.and#
                                                                     (GHC.Prim.uncheckedShiftRL#
                                                                        ipv1
                                                                        10#)
                                                                     4557430888798830399##))
                                                               (GHC.Prim.and#
                                                                  (GHC.Prim.uncheckedShiftRL#
                                                                     ipv1
                                                                     17#)
                                                                  9187201950435737471##))
                                                            (GHC.Prim.and#
                                                               (GHC.Prim.uncheckedShiftRL# ipv1 15#)
                                                               18374403900871474942##))
                                                         (GHC.Prim.and#
                                                            (GHC.Prim.uncheckedShiftRL# ipv1 6#)
                                                            18229723555195321596##))
                                                      (GHC.Prim.and#
                                                         (GHC.Prim.uncheckedShiftL# ipv1 10#)
                                                         18229723555195321596##))
                                                   (GHC.Prim.and#
                                                      (GHC.Prim.uncheckedShiftL# ipv1 17#)
                                                      18374403900871474942##)))
                                             (GHC.Prim.or#
                                                (GHC.Prim.or#
                                                   (GHC.Prim.or#
                                                      (GHC.Prim.and#
                                                         (GHC.Prim.uncheckedShiftL#
                                                            (GHC.Prim.or#
                                                               ipv13
                                                               (GHC.Prim.and#
                                                                  (GHC.Prim.and#
                                                                     (GHC.Prim.uncheckedShiftL#
                                                                        ipv13
                                                                        28#)
                                                                     (GHC.Prim.and#
                                                                        (GHC.Prim.and#
                                                                           ipv11
                                                                           (GHC.Prim.uncheckedShiftL#
                                                                              ipv11
                                                                              14#))
                                                                        4557430888798830336##))
                                                                  1085102592570163200##))
                                                            7#)
                                                         9187201950435737471##)
                                                      (GHC.Prim.and#
                                                         (GHC.Prim.uncheckedShiftRL#
                                                            (GHC.Prim.or#
                                                               ipv10
                                                               (GHC.Prim.and#
                                                                  (GHC.Prim.and#
                                                                     (GHC.Prim.uncheckedShiftRL#
                                                                        ipv10
                                                                        36#)
                                                                     (GHC.Prim.and#
                                                                        (GHC.Prim.and#
                                                                           ipv8
                                                                           (GHC.Prim.uncheckedShiftRL#
                                                                              ipv8
                                                                              18#))
                                                                        17802464409370431##))
                                                                  64677154575##))
                                                            9#)
                                                         9187201950435737471##))
                                                   (GHC.Prim.and#
                                                      (GHC.Prim.uncheckedShiftRL#
                                                         (GHC.Prim.or#
                                                            ipv7
                                                            (GHC.Prim.and#
                                                               (GHC.Prim.and#
                                                                  (GHC.Prim.uncheckedShiftRL#
                                                                     ipv7
                                                                     28#)
                                                                  (GHC.Prim.and#
                                                                     (GHC.Prim.and#
                                                                        ipv5
                                                                        (GHC.Prim.uncheckedShiftRL#
                                                                           ipv5
                                                                           14#))
                                                                     71209857637481724##))
                                                               1034834473200##))
                                                         7#)
                                                      18374403900871474942##))
                                                (GHC.Prim.and#
                                                   (GHC.Prim.uncheckedShiftL#
                                                      (GHC.Prim.or#
                                                         ipv4
                                                         (GHC.Prim.and#
                                                            (GHC.Prim.and#
                                                               (GHC.Prim.uncheckedShiftL# ipv4 36#)
                                                               (GHC.Prim.and#
                                                                  (GHC.Prim.and#
                                                                     ipv2
                                                                     (GHC.Prim.uncheckedShiftL#
                                                                        ipv2
                                                                        18#))
                                                                  18229723555195321344##))
                                                            17361641481122611200##))
                                                      9#)
                                                   18374403900871474942##)))
                                          (GHC.Prim.or#
                                             (GHC.Prim.or#
                                                (GHC.Prim.or#
                                                   (GHC.Prim.uncheckedShiftL#
                                                      (GHC.Prim.or#
                                                         ipv25
                                                         (GHC.Prim.and#
                                                            (GHC.Prim.uncheckedShiftL# ipv25 32#)
                                                            (GHC.Prim.and#
                                                               ipv24
                                                               (GHC.Prim.uncheckedShiftL#
                                                                  ipv24
                                                                  16#))))
                                                      8#)
                                                   (GHC.Prim.and#
                                                      (GHC.Prim.uncheckedShiftRL#
                                                         (GHC.Prim.or#
                                                            ipv22
                                                            (GHC.Prim.and#
                                                               (GHC.Prim.and#
                                                                  (GHC.Prim.uncheckedShiftRL#
                                                                     ipv22
                                                                     4#)
                                                                  (GHC.Prim.and#
                                                                     (GHC.Prim.and#
                                                                        ipv20
                                                                        (GHC.Prim.uncheckedShiftRL#
                                                                           ipv20
                                                                           2#))
                                                                     4557430888798830399##))
                                                               1085102592571150095##))
                                                         1#)
                                                      9187201950435737471##))
                                                (GHC.Prim.uncheckedShiftRL#
                                                   (GHC.Prim.or#
                                                      ipv19
                                                      (GHC.Prim.and#
                                                         (GHC.Prim.uncheckedShiftRL# ipv19 32#)
                                                         (GHC.Prim.and#
                                                            ipv18
                                                            (GHC.Prim.uncheckedShiftRL#
                                                               ipv18
                                                               16#))))
                                                   8#))
                                             (GHC.Prim.and#
                                                (GHC.Prim.uncheckedShiftL#
                                                   (GHC.Prim.or#
                                                      ipv16
                                                      (GHC.Prim.and#
                                                         (GHC.Prim.and#
                                                            (GHC.Prim.uncheckedShiftL# ipv16 4#)
                                                            (GHC.Prim.and#
                                                               (GHC.Prim.and#
                                                                  ipv14
                                                                  (GHC.Prim.uncheckedShiftL#
                                                                     ipv14
                                                                     2#))
                                                               18229723555195321596##))
                                                         17361641481138401520##))
                                                   1#)
                                                18374403900871474942##)))
                                       (GHC.Prim.or#
                                          (GHC.Prim.or#
                                             (GHC.Prim.or#
                                                (GHC.Prim.or#
                                                   (GHC.Prim.or#
                                                      (GHC.Prim.or#
                                                         (GHC.Prim.or#
                                                            (GHC.Prim.uncheckedShiftL# ipv26 8#)
                                                            (GHC.Prim.and#
                                                               (GHC.Prim.uncheckedShiftL# ipv26 7#)
                                                               9187201950435737471##))
                                                         (GHC.Prim.and#
                                                            (GHC.Prim.uncheckedShiftRL# ipv26 1#)
                                                            9187201950435737471##))
                                                      (GHC.Prim.and#
                                                         (GHC.Prim.uncheckedShiftRL# ipv26 9#)
                                                         9187201950435737471##))
                                                   (GHC.Prim.uncheckedShiftRL# ipv26 8#))
                                                (GHC.Prim.and#
                                                   (GHC.Prim.uncheckedShiftRL# ipv26 7#)
                                                   18374403900871474942##))
                                             (GHC.Prim.and#
                                                (GHC.Prim.uncheckedShiftL# ipv26 1#)
                                                18374403900871474942##))
                                          (GHC.Prim.and#
                                             (GHC.Prim.uncheckedShiftL# ipv26 9#)
                                             18374403900871474942##)))
                                    ww11)))
                           (GHC.Prim.word2Int# (GHC.Prim.popCnt64# (GHC.Prim.and# ww9 ww10)))
                     } in
                     case ww8 of wild {
                       BasicData.White
                       -> let {
                            ipv :: GHC.Prim.Word# = GHC.Prim.and# ww ww2
                          } in
                          $w$j1
                            (GHC.Prim.or#
                               (GHC.Prim.and#
                                  (GHC.Prim.uncheckedShiftL# ipv 7#)
                                  9187201950435737471##)
                               (GHC.Prim.and#
                                  (GHC.Prim.uncheckedShiftL# ipv 9#)
                                  18374403900871474942##))
                       BasicData.Black
                       -> let {
                            ipv :: GHC.Prim.Word# = GHC.Prim.and# ww ww2
                          } in
                          $w$j1
                            (GHC.Prim.or#
                               (GHC.Prim.and#
                                  (GHC.Prim.uncheckedShiftRL# ipv 9#)
                                  9187201950435737471##)
                               (GHC.Prim.and#
                                  (GHC.Prim.uncheckedShiftRL# ipv 7#)
                                  18374403900871474942##)) }
                 } in
                 case ww8 of wild1 {
                   BasicData.White -> $w$j 4294967295## 18446744069414584320##
                   BasicData.Black -> $w$j 18446744069414584320## 4294967295## }) -}
d584daaad608513810191a74228c0bc3
  $wtropism ::
    GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
  {- Arity: 8, Strictness: <S,U><L,U><L,U><L,U><L,U><L,U><L,U><S,U>,
     Inline: [0] -}
37085dee869ea9780dfabc3939a6ad92
  bishopBonus10 :: Alias.BitBoard
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Word.W64# 26492373172224##) -}
f4e145558d684b353f30fc2381afd73a
  bishopBonus5 :: Alias.BitBoard
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Word.W64# 40020505281024##) -}
e96c78846a833f1649e59717a89eac7c
  bishopPenalty10 :: Alias.BitBoard
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Word.W64# 9115709513998107006##) -}
389b42f8f1ff8d30a48c8e66dd5d4682
  bishopPenalty20 :: Alias.BitBoard
  {- Strictness: m, Unfolding: (Evaluation.queenPenalty20) -}
506849c8695bddb5e2ef46546e8caafc
  bishopPosition :: Alias.BitBoard -> Alias.BitBoard -> GHC.Types.Int
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (whites :: Alias.BitBoard) (blacks :: Alias.BitBoard) ->
                 case whites of whites1 { GHC.Word.W64# ipv ->
                 case blacks of blacks1 { GHC.Word.W64# ipv1 ->
                 GHC.Types.I#
                   (GHC.Prim.-#
                      (GHC.Prim.-#
                         (GHC.Prim.-#
                            (GHC.Prim.+#
                               (GHC.Prim.+#
                                  (GHC.Prim.*#
                                     (GHC.Prim.word2Int#
                                        (GHC.Prim.popCnt64#
                                           (GHC.Prim.and# ipv1 9295429630892703873##)))
                                     20#)
                                  (GHC.Prim.*#
                                     (GHC.Prim.word2Int#
                                        (GHC.Prim.popCnt64#
                                           (GHC.Prim.or#
                                              (GHC.Prim.and# ipv 26492373172224##)
                                              (GHC.Prim.and# ipv1 9115709513998107006##))))
                                     10#))
                               (GHC.Prim.*#
                                  (GHC.Prim.word2Int#
                                     (GHC.Prim.popCnt64# (GHC.Prim.and# ipv 40020505281024##)))
                                  5#))
                            (GHC.Prim.*#
                               (GHC.Prim.word2Int#
                                  (GHC.Prim.popCnt64# (GHC.Prim.and# ipv1 18577350176538624##)))
                               5#))
                         (GHC.Prim.*#
                            (GHC.Prim.word2Int#
                               (GHC.Prim.popCnt64#
                                  (GHC.Prim.or#
                                     (GHC.Prim.and# ipv 9115709513998107006##)
                                     (GHC.Prim.and# ipv1 138796567363584##))))
                            10#))
                      (GHC.Prim.*#
                         (GHC.Prim.word2Int#
                            (GHC.Prim.popCnt64# (GHC.Prim.and# ipv 9295429630892703873##)))
                         20#)) } }) -}
f42704fec9c54a4c295d2ec8c2ae73a1
  evaluate :: BasicData.Position -> Alias.Evaluation
  {- Arity: 1,
     Strictness: <S(SSSSSSSSSSLLLLLLSSLS),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: BasicData.Position) ->
                 case w of ww { BasicData.Position ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ww20 ->
                 case Evaluation.$wevaluate
                        ww1
                        ww2
                        ww3
                        ww4
                        ww5
                        ww6
                        ww7
                        ww8
                        ww9
                        ww10
                        ww11
                        ww12
                        ww13
                        ww14
                        ww15
                        ww16
                        ww17
                        ww18
                        ww19
                        ww20 of ww21 { DEFAULT ->
                 GHC.Types.I# ww21 } }) -}
d4683ca93269f1d2c87ca439536af5d8
  isolatedPawns :: BasicData.Position -> Alias.Evaluation
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SSSLLLLLSLLLLLLLLLLL),1*U(U,U,U,A,A,A,A,A,U,A,A,A,A,A,A,A,A,A,A,A)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: BasicData.Position) ->
                 case w of ww { BasicData.Position ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ww20 ->
                 case case ww9 of wild {
                        BasicData.White -> Evaluation.isolatedPawns4
                        BasicData.Black
                        -> Evaluation.isolatedPawns3 } of fillBackward { DEFAULT ->
                 case case ww9 of wild {
                        BasicData.White -> Evaluation.isolatedPawns2
                        BasicData.Black
                        -> Evaluation.isolatedPawns1 } of fillForward { DEFAULT ->
                 let {
                   ipv :: GHC.Prim.Word# = GHC.Prim.and# ww2 ww3
                 } in
                 case fillBackward
                        (case ww9 of wild {
                           BasicData.White
                           -> GHC.Word.W64#
                                (GHC.Prim.or#
                                   (GHC.Prim.and#
                                      (GHC.Prim.uncheckedShiftRL# ipv 9#)
                                      9187201950435737471##)
                                   (GHC.Prim.and#
                                      (GHC.Prim.uncheckedShiftRL# ipv 7#)
                                      18374403900871474942##))
                           BasicData.Black
                           -> GHC.Word.W64#
                                (GHC.Prim.or#
                                   (GHC.Prim.and#
                                      (GHC.Prim.uncheckedShiftL# ipv 7#)
                                      9187201950435737471##)
                                   (GHC.Prim.and#
                                      (GHC.Prim.uncheckedShiftL# ipv 9#)
                                      18374403900871474942##)) }) of b1 { GHC.Word.W64# ipv1 ->
                 let {
                   ipv2 :: GHC.Prim.Word# = GHC.Prim.and# ww1 ww3
                 } in
                 case fillForward
                        (case ww9 of wild {
                           BasicData.White
                           -> GHC.Word.W64#
                                (GHC.Prim.or#
                                   (GHC.Prim.and#
                                      (GHC.Prim.uncheckedShiftL# ipv2 7#)
                                      9187201950435737471##)
                                   (GHC.Prim.and#
                                      (GHC.Prim.uncheckedShiftL# ipv2 9#)
                                      18374403900871474942##))
                           BasicData.Black
                           -> GHC.Word.W64#
                                (GHC.Prim.or#
                                   (GHC.Prim.and#
                                      (GHC.Prim.uncheckedShiftRL# ipv2 9#)
                                      9187201950435737471##)
                                   (GHC.Prim.and#
                                      (GHC.Prim.uncheckedShiftRL# ipv2 7#)
                                      18374403900871474942##)) }) of b2 { GHC.Word.W64# ipv3 ->
                 GHC.Types.I#
                   (GHC.Prim.*#
                      (GHC.Prim.-#
                         (GHC.Prim.word2Int#
                            (GHC.Prim.popCnt64#
                               (GHC.Prim.and# ipv2 (GHC.Prim.xor# ipv3 18446744073709551615##))))
                         (GHC.Prim.word2Int#
                            (GHC.Prim.popCnt64#
                               (GHC.Prim.and# ipv (GHC.Prim.xor# ipv1 18446744073709551615##)))))
                      25#) } } } } }) -}
2ad683f0c34c1f211452dbdf62ec494d
  isolatedPawns1 :: Alias.PieceMap -> Alias.BitBoard
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (w1 :: Alias.PieceMap) ->
                 case w1 of ww { GHC.Word.W64# ww1 ->
                 let {
                   ipv :: GHC.Prim.Word#
                   = GHC.Prim.or# ww1 (GHC.Prim.uncheckedShiftRL# ww1 8#)
                 } in
                 let {
                   ipv1 :: GHC.Prim.Word#
                   = GHC.Prim.or# ipv (GHC.Prim.uncheckedShiftRL# ipv 16#)
                 } in
                 GHC.Word.W64#
                   (GHC.Prim.or# ipv1 (GHC.Prim.uncheckedShiftRL# ipv1 32#)) }) -}
01b2f3260588d3ef2ec9a02304d0b6ee
  isolatedPawns2 :: Alias.PieceMap -> Alias.BitBoard
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (w1 :: Alias.PieceMap) ->
                 case w1 of ww { GHC.Word.W64# ww1 ->
                 let {
                   ipv :: GHC.Prim.Word#
                   = GHC.Prim.or# ww1 (GHC.Prim.uncheckedShiftL# ww1 8#)
                 } in
                 let {
                   ipv1 :: GHC.Prim.Word#
                   = GHC.Prim.or# ipv (GHC.Prim.uncheckedShiftL# ipv 16#)
                 } in
                 GHC.Word.W64#
                   (GHC.Prim.or# ipv1 (GHC.Prim.uncheckedShiftL# ipv1 32#)) }) -}
84b3a9e5169a0af6c4928b1890ba11b2
  isolatedPawns3 :: Alias.PieceMap -> Alias.BitBoard
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (w1 :: Alias.PieceMap) ->
                 case w1 of ww { GHC.Word.W64# ww1 ->
                 let {
                   ipv :: GHC.Prim.Word#
                   = GHC.Prim.or# ww1 (GHC.Prim.uncheckedShiftL# ww1 8#)
                 } in
                 let {
                   ipv1 :: GHC.Prim.Word#
                   = GHC.Prim.or# ipv (GHC.Prim.uncheckedShiftL# ipv 16#)
                 } in
                 GHC.Word.W64#
                   (GHC.Prim.or# ipv1 (GHC.Prim.uncheckedShiftL# ipv1 32#)) }) -}
a40cc65aa57b03f1cb6496048c8e279c
  isolatedPawns4 :: Alias.PieceMap -> Alias.BitBoard
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (w1 :: Alias.PieceMap) ->
                 case w1 of ww { GHC.Word.W64# ww1 ->
                 let {
                   ipv :: GHC.Prim.Word#
                   = GHC.Prim.or# ww1 (GHC.Prim.uncheckedShiftRL# ww1 8#)
                 } in
                 let {
                   ipv1 :: GHC.Prim.Word#
                   = GHC.Prim.or# ipv (GHC.Prim.uncheckedShiftRL# ipv 16#)
                 } in
                 GHC.Word.W64#
                   (GHC.Prim.or# ipv1 (GHC.Prim.uncheckedShiftRL# ipv1 32#)) }) -}
bceeb0467fda293648c42e61f36bd8ff
  kingBonus10 :: Alias.BitBoard
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Word.W64# 36##) -}
92d6faef955eb1d7f9ad1f938a2bc293
  kingBonus20 :: Alias.BitBoard
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Word.W64# 50049##) -}
4959f88781234dfdab7900edb198cdaf
  kingBonus30 :: Alias.BitBoard
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Word.W64# 66##) -}
3ea6254bcaedcdd193fc7b580e2bc317
  kingDefenders :: BasicData.Position -> Alias.Evaluation
  {- Arity: 1,
     Strictness: <S(SSSLLLLSSLLLLLLLLLLL),1*U(U,U,U,A,A,A,A,U,U,A,A,A,A,A,A,A,A,A,A,A)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: BasicData.Position) ->
                 case w of ww { BasicData.Position ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ww20 ->
                 case Evaluation.$wkingDefenders
                        ww1
                        ww2
                        ww3
                        ww8
                        ww9 of ww21 { DEFAULT ->
                 GHC.Types.I# ww21 } }) -}
7a3664e7845bd307eeff1e38b1f4fd3b
  kingDefenders1 :: GHC.Prim.Int# -> GHC.Prim.Int# -> Alias.BitBoard
  {- Arity: 2, Strictness: <L,U><L,U>x -}
11b101309dcc9c486d79bcc61afce162
  kingDefenders2 :: GHC.Types.Int
  {- Unfolding: (Data.Vector.Generic.length
                   @ Data.Vector.Unboxed.Base.Vector
                   @ Alias.BitBoard
                   Data.Vector.Unboxed.Base.$fVectorVectorWord64
                   AttackTable.kingAttackTable) -}
a094bef87fdc781e1f7a24c24b6653df
  kingEBonus20 :: Alias.BitBoard
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Word.W64# 39582420959232##) -}
7ff6929063a00a1926ab85fb5e12b8b4
  kingEBonus30 :: Alias.BitBoard
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Word.W64# 26672855777280##) -}
7c8052993df8b2ef4a6213739dd6f207
  kingEBonus40 :: Alias.BitBoard
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Word.W64# 103481868288##) -}
39ab85f403db532a8e5627502aef965b
  kingEPenalty10 :: Alias.BitBoard
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Word.W64# 10205951508480000##) -}
b0d0d83b91b4c3ca7f0eb53bff11ab10
  kingEPenalty20 :: Alias.BitBoard
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Word.W64# 1747959605373173760##) -}
163f3c12f1e0bd097c3be71c6421ffe4
  kingEPenalty30 :: Alias.BitBoard
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Word.W64# 2630526050584609406##) -}
debb97119a2872d2060a1b273181388b
  kingEPenalty40 :: Alias.BitBoard
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Word.W64# 4755801206503243776##) -}
33503f47075669a081aa4b0df117a154
  kingEPenalty50 :: Alias.BitBoard
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Word.W64# 9295429630892703744##) -}
3be5fb6ffa301e2e2b8cdd8b55833df5
  kingEPosition :: Alias.BitBoard -> Alias.BitBoard -> GHC.Types.Int
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (whites :: Alias.BitBoard) (blacks :: Alias.BitBoard) ->
                 case whites of whites1 { GHC.Word.W64# ipv ->
                 case blacks of blacks1 { GHC.Word.W64# ipv1 ->
                 GHC.Types.I#
                   (GHC.Prim.-#
                      (GHC.Prim.-#
                         (GHC.Prim.-#
                            (GHC.Prim.-#
                               (GHC.Prim.-#
                                  (GHC.Prim.+#
                                     (GHC.Prim.+#
                                        (GHC.Prim.+#
                                           (GHC.Prim.+#
                                              (GHC.Prim.*#
                                                 (GHC.Prim.word2Int#
                                                    (GHC.Prim.popCnt64# (GHC.Prim.and# ipv1 129##)))
                                                 50#)
                                              (GHC.Prim.*#
                                                 (GHC.Prim.word2Int#
                                                    (GHC.Prim.popCnt64#
                                                       (GHC.Prim.or#
                                                          (GHC.Prim.and# ipv 103481868288##)
                                                          (GHC.Prim.and# ipv1 66##))))
                                                 40#))
                                           (GHC.Prim.*#
                                              (GHC.Prim.word2Int#
                                                 (GHC.Prim.popCnt64#
                                                    (GHC.Prim.or#
                                                       (GHC.Prim.and# ipv 26672855777280##)
                                                       (GHC.Prim.and# ipv1 9134005387484299556##))))
                                              30#))
                                        (GHC.Prim.*#
                                           (GHC.Prim.word2Int#
                                              (GHC.Prim.popCnt64#
                                                 (GHC.Prim.or#
                                                    (GHC.Prim.and# ipv 39582420959232##)
                                                    (GHC.Prim.and# ipv1 16920##))))
                                           20#))
                                     (GHC.Prim.*#
                                        (GHC.Prim.word2Int#
                                           (GHC.Prim.popCnt64#
                                              (GHC.Prim.and# ipv1 72852346905600##)))
                                        10#))
                                  (GHC.Prim.*#
                                     (GHC.Prim.word2Int#
                                        (GHC.Prim.popCnt64#
                                           (GHC.Prim.and# ipv 10205951508480000##)))
                                     10#))
                               (GHC.Prim.*#
                                  (GHC.Prim.word2Int#
                                     (GHC.Prim.popCnt64#
                                        (GHC.Prim.or#
                                           (GHC.Prim.and# ipv1 39582420959232##)
                                           (GHC.Prim.and# ipv 1747959605373173760##))))
                                  20#))
                            (GHC.Prim.*#
                               (GHC.Prim.word2Int#
                                  (GHC.Prim.popCnt64#
                                     (GHC.Prim.or#
                                        (GHC.Prim.and# ipv1 26672855777280##)
                                        (GHC.Prim.and# ipv 2630526050584609406##))))
                               30#))
                         (GHC.Prim.*#
                            (GHC.Prim.word2Int#
                               (GHC.Prim.popCnt64#
                                  (GHC.Prim.or#
                                     (GHC.Prim.and# ipv1 103481868288##)
                                     (GHC.Prim.and# ipv 4755801206503243776##))))
                            40#))
                      (GHC.Prim.*#
                         (GHC.Prim.word2Int#
                            (GHC.Prim.popCnt64# (GHC.Prim.and# ipv 9295429630892703744##)))
                         50#)) } }) -}
5abc804211bb060cc4f7b459705331b1
  kingPenalty10 :: Alias.BitBoard
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Word.W64# 8454144##) -}
f784c0ca01ad806269255dfdfef0ea90
  kingPenalty20 :: Alias.BitBoard
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Word.W64# 2172518400##) -}
1df791fdb3fc5bebf993ccb4e9b971cf
  kingPenalty30 :: Alias.BitBoard
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Word.W64# 9331882295650418688##) -}
bbdc65b65b1bd36ed9212ae36122321c
  kingPenalty40 :: Alias.BitBoard
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Word.W64# 7378697628168486912##) -}
e358136dc2ce349fb4f5ff5c28c27448
  kingPenalty50 :: Alias.BitBoard
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Word.W64# 1736164147709607936##) -}
d8bd7ef394bfcb4176cd8d641a0ea10d
  kingPosition :: Alias.BitBoard -> Alias.BitBoard -> GHC.Types.Int
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (whites :: Alias.BitBoard) (blacks :: Alias.BitBoard) ->
                 case whites of whites1 { GHC.Word.W64# ipv ->
                 case blacks of blacks1 { GHC.Word.W64# ipv1 ->
                 GHC.Types.I#
                   (GHC.Prim.-#
                      (GHC.Prim.-#
                         (GHC.Prim.-#
                            (GHC.Prim.-#
                               (GHC.Prim.-#
                                  (GHC.Prim.+#
                                     (GHC.Prim.+#
                                        (GHC.Prim.+#
                                           (GHC.Prim.+#
                                              (GHC.Prim.*#
                                                 (GHC.Prim.word2Int#
                                                    (GHC.Prim.popCnt64#
                                                       (GHC.Prim.and# ipv1 404232216##)))
                                                 50#)
                                              (GHC.Prim.*#
                                                 (GHC.Prim.word2Int#
                                                    (GHC.Prim.popCnt64#
                                                       (GHC.Prim.and# ipv1 104797202022##)))
                                                 40#))
                                           (GHC.Prim.*#
                                              (GHC.Prim.word2Int#
                                                 (GHC.Prim.popCnt64#
                                                    (GHC.Prim.or#
                                                       (GHC.Prim.and# ipv 66##)
                                                       (GHC.Prim.and# ipv1 440259412353##))))
                                              30#))
                                        (GHC.Prim.*#
                                           (GHC.Prim.word2Int#
                                              (GHC.Prim.popCnt64#
                                                 (GHC.Prim.or#
                                                    (GHC.Prim.and# ipv 50049##)
                                                    (GHC.Prim.and# ipv1 139092515880960##))))
                                           20#))
                                     (GHC.Prim.*#
                                        (GHC.Prim.word2Int#
                                           (GHC.Prim.popCnt64#
                                              (GHC.Prim.or#
                                                 (GHC.Prim.and# ipv 36##)
                                                 (GHC.Prim.and# ipv1 141836999983104##))))
                                        10#))
                                  (GHC.Prim.*#
                                     (GHC.Prim.word2Int#
                                        (GHC.Prim.popCnt64#
                                           (GHC.Prim.or#
                                              (GHC.Prim.and# ipv1 2594073385365405696##)
                                              (GHC.Prim.and# ipv 8454144##))))
                                     10#))
                               (GHC.Prim.*#
                                  (GHC.Prim.word2Int#
                                     (GHC.Prim.popCnt64#
                                        (GHC.Prim.or#
                                           (GHC.Prim.and# ipv1 9350317251351281664##)
                                           (GHC.Prim.and# ipv 2172518400##))))
                                  20#))
                            (GHC.Prim.*#
                               (GHC.Prim.word2Int#
                                  (GHC.Prim.popCnt64#
                                     (GHC.Prim.or#
                                        (GHC.Prim.and# ipv1 4755801206503243776##)
                                        (GHC.Prim.and# ipv 9331882295650418688##))))
                               30#))
                         (GHC.Prim.*#
                            (GHC.Prim.word2Int#
                               (GHC.Prim.popCnt64# (GHC.Prim.and# ipv 7378697628168486912##)))
                            40#))
                      (GHC.Prim.*#
                         (GHC.Prim.word2Int#
                            (GHC.Prim.popCnt64# (GHC.Prim.and# ipv 1736164147709607936##)))
                         50#)) } }) -}
62069993fb61f20818a7bae89f3cddfe
  knightBonus10 :: Alias.BitBoard
  {- Strictness: m, Unfolding: (Evaluation.kingEBonus20) -}
08deb47edacf6ae47efecf30667b72b9
  knightBonus15 :: Alias.BitBoard
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Word.W64# 26543503441920##) -}
bd0822f605c6247f0c5b3c2072b3e6ee
  knightBonus20 :: Alias.BitBoard
  {- Strictness: m, Unfolding: (Evaluation.kingEBonus40) -}
0c389cf9ff36315f57f3819c8dbb7776
  knightBonus5 :: Alias.BitBoard
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Word.W64# 283472173056##) -}
95a2e57ca383a9fd03defc6d5b0e0487
  knightPenalty20 :: Alias.BitBoard
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Word.W64# 18577348462920192##) -}
ccfa3322a4f06fc026b9fb65b9e6d5e5
  knightPenalty30 :: Alias.BitBoard
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Word.W64# 4323598035499155516##) -}
c27fffd8a195167c05d481b309363f84
  knightPenalty40 :: Alias.BitBoard
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Word.W64# 4792111478498951490##) -}
317fbf3b0c45a6ecf624867cd77d33c5
  knightPenalty50 :: Alias.BitBoard
  {- Strictness: m, Unfolding: (Evaluation.queenPenalty20) -}
3c11c0da65600e360649ae0a3a217d9b
  knightPosition :: Alias.BitBoard -> Alias.BitBoard -> GHC.Types.Int
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (whites :: Alias.BitBoard) (blacks :: Alias.BitBoard) ->
                 case whites of whites1 { GHC.Word.W64# ipv ->
                 case blacks of blacks1 { GHC.Word.W64# ipv1 ->
                 GHC.Types.I#
                   (GHC.Prim.-#
                      (GHC.Prim.-#
                         (GHC.Prim.-#
                            (GHC.Prim.-#
                               (GHC.Prim.-#
                                  (GHC.Prim.-#
                                     (GHC.Prim.-#
                                        (GHC.Prim.+#
                                           (GHC.Prim.+#
                                              (GHC.Prim.+#
                                                 (GHC.Prim.+#
                                                    (GHC.Prim.+#
                                                       (GHC.Prim.+#
                                                          (GHC.Prim.*#
                                                             (GHC.Prim.word2Int#
                                                                (GHC.Prim.popCnt64#
                                                                   (GHC.Prim.and#
                                                                      ipv1
                                                                      9295429630892703873##)))
                                                             50#)
                                                          (GHC.Prim.*#
                                                             (GHC.Prim.word2Int#
                                                                (GHC.Prim.popCnt64#
                                                                   (GHC.Prim.and#
                                                                      ipv1
                                                                      4792111478498951490##)))
                                                             40#))
                                                       (GHC.Prim.*#
                                                          (GHC.Prim.word2Int#
                                                             (GHC.Prim.popCnt64#
                                                                (GHC.Prim.and#
                                                                   ipv1
                                                                   4323598035499155516##)))
                                                          30#))
                                                    (GHC.Prim.*#
                                                       (GHC.Prim.word2Int#
                                                          (GHC.Prim.popCnt64#
                                                             (GHC.Prim.or#
                                                                (GHC.Prim.and# ipv 103481868288##)
                                                                (GHC.Prim.and#
                                                                   ipv1
                                                                   18577348462920192##))))
                                                       20#))
                                                 (GHC.Prim.*#
                                                    (GHC.Prim.word2Int#
                                                       (GHC.Prim.popCnt64#
                                                          (GHC.Prim.and# ipv 26543503441920##)))
                                                    15#))
                                              (GHC.Prim.*#
                                                 (GHC.Prim.word2Int#
                                                    (GHC.Prim.popCnt64#
                                                       (GHC.Prim.and# ipv 39582420959232##)))
                                                 10#))
                                           (GHC.Prim.*#
                                              (GHC.Prim.word2Int#
                                                 (GHC.Prim.popCnt64#
                                                    (GHC.Prim.and# ipv 283472173056##)))
                                              5#))
                                        (GHC.Prim.*#
                                           (GHC.Prim.word2Int#
                                              (GHC.Prim.popCnt64#
                                                 (GHC.Prim.and# ipv1 6827968315785216##)))
                                           5#))
                                     (GHC.Prim.*#
                                        (GHC.Prim.word2Int#
                                           (GHC.Prim.popCnt64#
                                              (GHC.Prim.and# ipv1 39582420959232##)))
                                        10#))
                                  (GHC.Prim.*#
                                     (GHC.Prim.word2Int#
                                        (GHC.Prim.popCnt64# (GHC.Prim.and# ipv1 26543503441920##)))
                                     15#))
                               (GHC.Prim.*#
                                  (GHC.Prim.word2Int#
                                     (GHC.Prim.popCnt64#
                                        (GHC.Prim.or#
                                           (GHC.Prim.and# ipv1 103481868288##)
                                           (GHC.Prim.and# ipv 18577348462920192##))))
                                  20#))
                            (GHC.Prim.*#
                               (GHC.Prim.word2Int#
                                  (GHC.Prim.popCnt64# (GHC.Prim.and# ipv 4323598035499155516##)))
                               30#))
                         (GHC.Prim.*#
                            (GHC.Prim.word2Int#
                               (GHC.Prim.popCnt64# (GHC.Prim.and# ipv 4792111478498951490##)))
                            40#))
                      (GHC.Prim.*#
                         (GHC.Prim.word2Int#
                            (GHC.Prim.popCnt64# (GHC.Prim.and# ipv 9295429630892703873##)))
                         50#)) } }) -}
ff4af2a2182cca1e125c64f2abc55143
  mobility :: BasicData.Position -> GHC.Types.Int
  {- Arity: 1,
     Strictness: <S(LLLLLLLLSSLLLLLLLLLS),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: BasicData.Position) ->
                 case w of ww { BasicData.Position ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ww20 ->
                 case Evaluation.$wmobility
                        ww1
                        ww2
                        ww3
                        ww4
                        ww5
                        ww6
                        ww7
                        ww8
                        ww9
                        ww10
                        ww11
                        ww12
                        ww13
                        ww14
                        ww15
                        ww16
                        ww17
                        ww18
                        ww19
                        ww20 of ww21 { DEFAULT ->
                 GHC.Types.I# ww21 } }) -}
766e7895ae44711252ed89d5496795cd
  openADiagonals :: BasicData.Position -> Alias.Evaluation
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SSSLLLLLLLLLLLLLLLLL),1*U(U,U,U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: BasicData.Position) ->
                 case w of ww { BasicData.Position ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ww20 ->
                 let {
                   ipv :: GHC.Prim.Word# = GHC.Prim.and# ww1 ww3
                 } in
                 let {
                   ipv1 :: GHC.Prim.Word#
                   = GHC.Prim.or#
                       ipv
                       (GHC.Prim.and#
                          (GHC.Prim.uncheckedShiftRL# ipv 7#)
                          18374403900871474942##)
                 } in
                 let {
                   ipv2 :: GHC.Prim.Word#
                   = GHC.Prim.or#
                       ipv1
                       (GHC.Prim.and#
                          (GHC.Prim.uncheckedShiftRL# ipv1 14#)
                          71209857637481724##)
                 } in
                 let {
                   ipv3 :: GHC.Prim.Word#
                   = GHC.Prim.or#
                       ipv
                       (GHC.Prim.and#
                          (GHC.Prim.uncheckedShiftL# ipv 7#)
                          9187201950435737471##)
                 } in
                 let {
                   ipv4 :: GHC.Prim.Word#
                   = GHC.Prim.or#
                       ipv3
                       (GHC.Prim.and#
                          (GHC.Prim.uncheckedShiftL# ipv3 14#)
                          4557430888798830336##)
                 } in
                 let {
                   ipv5 :: GHC.Prim.Word#
                   = GHC.Prim.or#
                       (GHC.Prim.or#
                          ipv4
                          (GHC.Prim.and#
                             (GHC.Prim.uncheckedShiftL# ipv4 28#)
                             1085102592570163200##))
                       (GHC.Prim.or#
                          ipv2
                          (GHC.Prim.and#
                             (GHC.Prim.uncheckedShiftRL# ipv2 28#)
                             1034834473200##))
                 } in
                 let {
                   ipv6 :: GHC.Prim.Word# = GHC.Prim.and# ww2 ww3
                 } in
                 let {
                   ipv7 :: GHC.Prim.Word#
                   = GHC.Prim.or#
                       ipv6
                       (GHC.Prim.and#
                          (GHC.Prim.uncheckedShiftRL# ipv6 7#)
                          18374403900871474942##)
                 } in
                 let {
                   ipv8 :: GHC.Prim.Word#
                   = GHC.Prim.or#
                       ipv7
                       (GHC.Prim.and#
                          (GHC.Prim.uncheckedShiftRL# ipv7 14#)
                          71209857637481724##)
                 } in
                 let {
                   ipv9 :: GHC.Prim.Word#
                   = GHC.Prim.or#
                       ipv6
                       (GHC.Prim.and#
                          (GHC.Prim.uncheckedShiftL# ipv6 7#)
                          9187201950435737471##)
                 } in
                 let {
                   ipv10 :: GHC.Prim.Word#
                   = GHC.Prim.or#
                       ipv9
                       (GHC.Prim.and#
                          (GHC.Prim.uncheckedShiftL# ipv9 14#)
                          4557430888798830336##)
                 } in
                 let {
                   ipv11 :: GHC.Prim.Word#
                   = GHC.Prim.or#
                       (GHC.Prim.or#
                          ipv10
                          (GHC.Prim.and#
                             (GHC.Prim.uncheckedShiftL# ipv10 28#)
                             1085102592570163200##))
                       (GHC.Prim.or#
                          ipv8
                          (GHC.Prim.and#
                             (GHC.Prim.uncheckedShiftRL# ipv8 28#)
                             1034834473200##))
                 } in
                 case GHC.Classes.divInt#
                        (GHC.Prim.-#
                           (GHC.Prim.word2Int#
                              (GHC.Prim.popCnt64#
                                 (GHC.Prim.and# ipv5 (GHC.Prim.xor# ipv11 18446744073709551615##))))
                           (GHC.Prim.word2Int#
                              (GHC.Prim.popCnt64#
                                 (GHC.Prim.and#
                                    ipv11
                                    (GHC.Prim.xor# ipv5 18446744073709551615##)))))
                        8# of ww21 { DEFAULT ->
                 GHC.Types.I# (GHC.Prim.*# ww21 10#) } }) -}
da14c34edb4d0dcdeafdc85b28f1b1be
  openDDiagonals :: BasicData.Position -> Alias.Evaluation
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SSSLLLLLLLLLLLLLLLLL),1*U(U,U,U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: BasicData.Position) ->
                 case w of ww { BasicData.Position ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ww20 ->
                 let {
                   ipv :: GHC.Prim.Word# = GHC.Prim.and# ww1 ww3
                 } in
                 let {
                   ipv1 :: GHC.Prim.Word#
                   = GHC.Prim.or#
                       ipv
                       (GHC.Prim.and#
                          (GHC.Prim.uncheckedShiftRL# ipv 9#)
                          9187201950435737471##)
                 } in
                 let {
                   ipv2 :: GHC.Prim.Word#
                   = GHC.Prim.or#
                       ipv1
                       (GHC.Prim.and#
                          (GHC.Prim.uncheckedShiftRL# ipv1 18#)
                          17802464409370431##)
                 } in
                 let {
                   ipv3 :: GHC.Prim.Word#
                   = GHC.Prim.or#
                       ipv
                       (GHC.Prim.and#
                          (GHC.Prim.uncheckedShiftL# ipv 9#)
                          18374403900871474942##)
                 } in
                 let {
                   ipv4 :: GHC.Prim.Word#
                   = GHC.Prim.or#
                       ipv3
                       (GHC.Prim.and#
                          (GHC.Prim.uncheckedShiftL# ipv3 18#)
                          18229723555195321344##)
                 } in
                 let {
                   ipv5 :: GHC.Prim.Word#
                   = GHC.Prim.or#
                       (GHC.Prim.or#
                          ipv4
                          (GHC.Prim.and#
                             (GHC.Prim.uncheckedShiftL# ipv4 36#)
                             17361641481122611200##))
                       (GHC.Prim.or#
                          ipv2
                          (GHC.Prim.and#
                             (GHC.Prim.uncheckedShiftRL# ipv2 36#)
                             64677154575##))
                 } in
                 let {
                   ipv6 :: GHC.Prim.Word# = GHC.Prim.and# ww2 ww3
                 } in
                 let {
                   ipv7 :: GHC.Prim.Word#
                   = GHC.Prim.or#
                       ipv6
                       (GHC.Prim.and#
                          (GHC.Prim.uncheckedShiftRL# ipv6 9#)
                          9187201950435737471##)
                 } in
                 let {
                   ipv8 :: GHC.Prim.Word#
                   = GHC.Prim.or#
                       ipv7
                       (GHC.Prim.and#
                          (GHC.Prim.uncheckedShiftRL# ipv7 18#)
                          17802464409370431##)
                 } in
                 let {
                   ipv9 :: GHC.Prim.Word#
                   = GHC.Prim.or#
                       ipv6
                       (GHC.Prim.and#
                          (GHC.Prim.uncheckedShiftL# ipv6 9#)
                          18374403900871474942##)
                 } in
                 let {
                   ipv10 :: GHC.Prim.Word#
                   = GHC.Prim.or#
                       ipv9
                       (GHC.Prim.and#
                          (GHC.Prim.uncheckedShiftL# ipv9 18#)
                          18229723555195321344##)
                 } in
                 let {
                   ipv11 :: GHC.Prim.Word#
                   = GHC.Prim.or#
                       (GHC.Prim.or#
                          ipv10
                          (GHC.Prim.and#
                             (GHC.Prim.uncheckedShiftL# ipv10 36#)
                             17361641481122611200##))
                       (GHC.Prim.or#
                          ipv8
                          (GHC.Prim.and#
                             (GHC.Prim.uncheckedShiftRL# ipv8 36#)
                             64677154575##))
                 } in
                 case GHC.Classes.divInt#
                        (GHC.Prim.-#
                           (GHC.Prim.word2Int#
                              (GHC.Prim.popCnt64#
                                 (GHC.Prim.and# ipv5 (GHC.Prim.xor# ipv11 18446744073709551615##))))
                           (GHC.Prim.word2Int#
                              (GHC.Prim.popCnt64#
                                 (GHC.Prim.and#
                                    ipv11
                                    (GHC.Prim.xor# ipv5 18446744073709551615##)))))
                        8# of ww21 { DEFAULT ->
                 GHC.Types.I# (GHC.Prim.*# ww21 10#) } }) -}
34cf414cfe1e23f8746ec80aae3a60fa
  openFiles :: BasicData.Position -> Alias.Evaluation
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SSSLLLLLLLLLLLLLLLLL),1*U(U,U,U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: BasicData.Position) ->
                 case w of ww { BasicData.Position ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ww20 ->
                 let {
                   ipv :: GHC.Prim.Word# = GHC.Prim.and# ww1 ww3
                 } in
                 let {
                   ipv3 :: GHC.Prim.Word#
                   = GHC.Prim.or# ipv (GHC.Prim.uncheckedShiftL# ipv 8#)
                 } in
                 let {
                   ipv4 :: GHC.Prim.Word#
                   = GHC.Prim.or# ipv3 (GHC.Prim.uncheckedShiftL# ipv3 16#)
                 } in
                 let {
                   ipv1 :: GHC.Prim.Word#
                   = GHC.Prim.or# ipv (GHC.Prim.uncheckedShiftRL# ipv 8#)
                 } in
                 let {
                   ipv2 :: GHC.Prim.Word#
                   = GHC.Prim.or# ipv1 (GHC.Prim.uncheckedShiftRL# ipv1 16#)
                 } in
                 let {
                   ipv7 :: GHC.Prim.Word#
                   = GHC.Prim.or#
                       (GHC.Prim.or# ipv4 (GHC.Prim.uncheckedShiftL# ipv4 32#))
                       (GHC.Prim.or# ipv2 (GHC.Prim.uncheckedShiftRL# ipv2 32#))
                 } in
                 let {
                   ipv8 :: GHC.Prim.Word# = GHC.Prim.and# ww2 ww3
                 } in
                 let {
                   ipv9 :: GHC.Prim.Word#
                   = GHC.Prim.or# ipv8 (GHC.Prim.uncheckedShiftL# ipv8 8#)
                 } in
                 let {
                   ipv10 :: GHC.Prim.Word#
                   = GHC.Prim.or# ipv9 (GHC.Prim.uncheckedShiftL# ipv9 16#)
                 } in
                 let {
                   ipv11 :: GHC.Prim.Word#
                   = GHC.Prim.or# ipv8 (GHC.Prim.uncheckedShiftRL# ipv8 8#)
                 } in
                 let {
                   ipv12 :: GHC.Prim.Word#
                   = GHC.Prim.or# ipv11 (GHC.Prim.uncheckedShiftRL# ipv11 16#)
                 } in
                 let {
                   ipv13 :: GHC.Prim.Word#
                   = GHC.Prim.or#
                       (GHC.Prim.or# ipv10 (GHC.Prim.uncheckedShiftL# ipv10 32#))
                       (GHC.Prim.or# ipv12 (GHC.Prim.uncheckedShiftRL# ipv12 32#))
                 } in
                 case GHC.Classes.divInt#
                        (GHC.Prim.-#
                           (GHC.Prim.word2Int#
                              (GHC.Prim.popCnt64#
                                 (GHC.Prim.and# ipv7 (GHC.Prim.xor# ipv13 18446744073709551615##))))
                           (GHC.Prim.word2Int#
                              (GHC.Prim.popCnt64#
                                 (GHC.Prim.and#
                                    ipv13
                                    (GHC.Prim.xor# ipv7 18446744073709551615##)))))
                        8# of ww21 { DEFAULT ->
                 GHC.Types.I# (GHC.Prim.*# ww21 20#) } }) -}
de389e5631dd4e5bac1044f4021ba35c
  outpost :: BasicData.Position -> Alias.Evaluation
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SSSSLLLLSLLLLLLLLLLL),1*U(U,U,U,U,A,A,A,A,U,A,A,A,A,A,A,A,A,A,A,A)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: BasicData.Position) ->
                 case w of ww { BasicData.Position ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ww20 ->
                 let {
                   $w$j :: GHC.Prim.Word# -> GHC.Prim.Int#
                     {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                   = \ (w1 :: GHC.Prim.Word#)[OneShot] ->
                     let {
                       ipv :: GHC.Prim.Word# = GHC.Prim.and# ww1 ww3
                     } in
                     let {
                       ipv3 :: GHC.Prim.Word#
                       = GHC.Prim.or# ipv (GHC.Prim.uncheckedShiftL# ipv 8#)
                     } in
                     let {
                       ipv4 :: GHC.Prim.Word#
                       = GHC.Prim.or# ipv3 (GHC.Prim.uncheckedShiftL# ipv3 16#)
                     } in
                     let {
                       ipv1 :: GHC.Prim.Word#
                       = GHC.Prim.or# ipv (GHC.Prim.uncheckedShiftRL# ipv 8#)
                     } in
                     let {
                       ipv2 :: GHC.Prim.Word#
                       = GHC.Prim.or# ipv1 (GHC.Prim.uncheckedShiftRL# ipv1 16#)
                     } in
                     let {
                       ipv7 :: GHC.Prim.Word# = GHC.Prim.and# ww2 ww3
                     } in
                     let {
                       ipv8 :: GHC.Prim.Word#
                       = GHC.Prim.or# ipv7 (GHC.Prim.uncheckedShiftL# ipv7 8#)
                     } in
                     let {
                       ipv9 :: GHC.Prim.Word#
                       = GHC.Prim.or# ipv8 (GHC.Prim.uncheckedShiftL# ipv8 16#)
                     } in
                     let {
                       ipv10 :: GHC.Prim.Word#
                       = GHC.Prim.or# ipv7 (GHC.Prim.uncheckedShiftRL# ipv7 8#)
                     } in
                     let {
                       ipv11 :: GHC.Prim.Word#
                       = GHC.Prim.or# ipv10 (GHC.Prim.uncheckedShiftRL# ipv10 16#)
                     } in
                     let {
                       ipv12 :: GHC.Prim.Word#
                       = GHC.Prim.or# ipv7 (GHC.Prim.uncheckedShiftL# ipv7 8#)
                     } in
                     let {
                       ipv13 :: GHC.Prim.Word#
                       = GHC.Prim.or# ipv12 (GHC.Prim.uncheckedShiftL# ipv12 16#)
                     } in
                     let {
                       ipv14 :: GHC.Prim.Word#
                       = GHC.Prim.or# ipv7 (GHC.Prim.uncheckedShiftRL# ipv7 8#)
                     } in
                     let {
                       ipv15 :: GHC.Prim.Word#
                       = GHC.Prim.or# ipv14 (GHC.Prim.uncheckedShiftRL# ipv14 16#)
                     } in
                     let {
                       ipv16 :: GHC.Prim.Word#
                       = GHC.Prim.or# ipv (GHC.Prim.uncheckedShiftL# ipv 8#)
                     } in
                     let {
                       ipv17 :: GHC.Prim.Word#
                       = GHC.Prim.or# ipv16 (GHC.Prim.uncheckedShiftL# ipv16 16#)
                     } in
                     let {
                       ipv18 :: GHC.Prim.Word#
                       = GHC.Prim.or# ipv (GHC.Prim.uncheckedShiftRL# ipv 8#)
                     } in
                     let {
                       ipv19 :: GHC.Prim.Word#
                       = GHC.Prim.or# ipv18 (GHC.Prim.uncheckedShiftRL# ipv18 16#)
                     } in
                     case ww9 of wild {
                       BasicData.White
                       -> let {
                            ipv20 :: GHC.Prim.Word# = GHC.Prim.and# ww1 ww3
                          } in
                          GHC.Prim.*#
                            (GHC.Prim.-#
                               (GHC.Prim.word2Int#
                                  (GHC.Prim.popCnt64#
                                     (GHC.Prim.and#
                                        (GHC.Prim.and#
                                           (GHC.Prim.and# ww1 ww4)
                                           (GHC.Prim.or#
                                              (GHC.Prim.and#
                                                 (GHC.Prim.uncheckedShiftL# ipv20 7#)
                                                 9187201950435737471##)
                                              (GHC.Prim.and#
                                                 (GHC.Prim.uncheckedShiftL# ipv20 9#)
                                                 18374403900871474942##)))
                                        (GHC.Prim.and#
                                           (GHC.Prim.or#
                                              (GHC.Prim.or#
                                                 ipv9
                                                 (GHC.Prim.uncheckedShiftL# ipv9 32#))
                                              (GHC.Prim.or#
                                                 ipv11
                                                 (GHC.Prim.uncheckedShiftRL# ipv11 32#)))
                                           (GHC.Prim.xor#
                                              (GHC.Prim.or#
                                                 (GHC.Prim.or#
                                                    ipv4
                                                    (GHC.Prim.uncheckedShiftL# ipv4 32#))
                                                 (GHC.Prim.or#
                                                    ipv2
                                                    (GHC.Prim.uncheckedShiftRL# ipv2 32#)))
                                              18446744073709551615##)))))
                               (GHC.Prim.word2Int#
                                  (GHC.Prim.popCnt64#
                                     (GHC.Prim.and#
                                        (GHC.Prim.and# (GHC.Prim.and# ww2 ww4) w1)
                                        (GHC.Prim.and#
                                           (GHC.Prim.or#
                                              (GHC.Prim.or#
                                                 ipv17
                                                 (GHC.Prim.uncheckedShiftL# ipv17 32#))
                                              (GHC.Prim.or#
                                                 ipv19
                                                 (GHC.Prim.uncheckedShiftRL# ipv19 32#)))
                                           (GHC.Prim.xor#
                                              (GHC.Prim.or#
                                                 (GHC.Prim.or#
                                                    ipv13
                                                    (GHC.Prim.uncheckedShiftL# ipv13 32#))
                                                 (GHC.Prim.or#
                                                    ipv15
                                                    (GHC.Prim.uncheckedShiftRL# ipv15 32#)))
                                              18446744073709551615##))))))
                            10#
                       BasicData.Black
                       -> let {
                            ipv20 :: GHC.Prim.Word# = GHC.Prim.and# ww1 ww3
                          } in
                          GHC.Prim.*#
                            (GHC.Prim.-#
                               (GHC.Prim.word2Int#
                                  (GHC.Prim.popCnt64#
                                     (GHC.Prim.and#
                                        (GHC.Prim.and#
                                           (GHC.Prim.and# ww1 ww4)
                                           (GHC.Prim.or#
                                              (GHC.Prim.and#
                                                 (GHC.Prim.uncheckedShiftRL# ipv20 9#)
                                                 9187201950435737471##)
                                              (GHC.Prim.and#
                                                 (GHC.Prim.uncheckedShiftRL# ipv20 7#)
                                                 18374403900871474942##)))
                                        (GHC.Prim.and#
                                           (GHC.Prim.or#
                                              (GHC.Prim.or#
                                                 ipv9
                                                 (GHC.Prim.uncheckedShiftL# ipv9 32#))
                                              (GHC.Prim.or#
                                                 ipv11
                                                 (GHC.Prim.uncheckedShiftRL# ipv11 32#)))
                                           (GHC.Prim.xor#
                                              (GHC.Prim.or#
                                                 (GHC.Prim.or#
                                                    ipv4
                                                    (GHC.Prim.uncheckedShiftL# ipv4 32#))
                                                 (GHC.Prim.or#
                                                    ipv2
                                                    (GHC.Prim.uncheckedShiftRL# ipv2 32#)))
                                              18446744073709551615##)))))
                               (GHC.Prim.word2Int#
                                  (GHC.Prim.popCnt64#
                                     (GHC.Prim.and#
                                        (GHC.Prim.and# (GHC.Prim.and# ww2 ww4) w1)
                                        (GHC.Prim.and#
                                           (GHC.Prim.or#
                                              (GHC.Prim.or#
                                                 ipv17
                                                 (GHC.Prim.uncheckedShiftL# ipv17 32#))
                                              (GHC.Prim.or#
                                                 ipv19
                                                 (GHC.Prim.uncheckedShiftRL# ipv19 32#)))
                                           (GHC.Prim.xor#
                                              (GHC.Prim.or#
                                                 (GHC.Prim.or#
                                                    ipv13
                                                    (GHC.Prim.uncheckedShiftL# ipv13 32#))
                                                 (GHC.Prim.or#
                                                    ipv15
                                                    (GHC.Prim.uncheckedShiftRL# ipv15 32#)))
                                              18446744073709551615##))))))
                            10# }
                 } in
                 case ww9 of wild {
                   BasicData.White
                   -> let {
                        ipv :: GHC.Prim.Word# = GHC.Prim.and# ww2 ww3
                      } in
                      case $w$j
                             (GHC.Prim.or#
                                (GHC.Prim.and#
                                   (GHC.Prim.uncheckedShiftRL# ipv 9#)
                                   9187201950435737471##)
                                (GHC.Prim.and#
                                   (GHC.Prim.uncheckedShiftRL# ipv 7#)
                                   18374403900871474942##)) of ww21 { DEFAULT ->
                      GHC.Types.I# ww21 }
                   BasicData.Black
                   -> let {
                        ipv :: GHC.Prim.Word# = GHC.Prim.and# ww2 ww3
                      } in
                      case $w$j
                             (GHC.Prim.or#
                                (GHC.Prim.and#
                                   (GHC.Prim.uncheckedShiftL# ipv 7#)
                                   9187201950435737471##)
                                (GHC.Prim.and#
                                   (GHC.Prim.uncheckedShiftL# ipv 9#)
                                   18374403900871474942##)) of ww21 { DEFAULT ->
                      GHC.Types.I# ww21 } } }) -}
52a5fca2550fb881225a71ff9ae19041
  pawnBonus10 :: Alias.BitBoard
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Word.W64# 214559386265088##) -}
ffc22b53d70bc3629ad490657361abed
  pawnBonus20 :: Alias.BitBoard
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Word.W64# 39582821253120##) -}
be44d27ab1e30c248881338f8add2dd4
  pawnBonus25 :: Alias.BitBoard
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Word.W64# 103079215104##) -}
a095d482a2dce46ef2896a7165d4eb6c
  pawnBonus30 :: Alias.BitBoard
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Word.W64# 26388279066624##) -}
bd13aa31e42d93740cea68705cd93fbb
  pawnBonus5 :: Alias.BitBoard
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Word.W64# 837527109888##) -}
7c06651b2ece9d2f11dd50bb2617e53d
  pawnBonus50 :: Alias.BitBoard
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Word.W64# 71776119061217280##) -}
8186ead787851c153285d698caeab30a
  pawnPenalty10 :: Alias.BitBoard
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Word.W64# 2359296##) -}
3da7e2256aa3569d54bd15ce96e797dd
  pawnPenalty20 :: Alias.BitBoard
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Word.W64# 6144##) -}
cd8fe9dd5c505df67c1c349e1b59622b
  pawnPenalty5 :: Alias.BitBoard
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Word.W64# 4325376##) -}
f348df59581daa6ab742a74bc90306f9
  pawnPosition :: Alias.BitBoard -> Alias.BitBoard -> GHC.Types.Int
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (whites :: Alias.BitBoard) (blacks :: Alias.BitBoard) ->
                 case whites of whites1 { GHC.Word.W64# ipv ->
                 case blacks of blacks1 { GHC.Word.W64# ipv1 ->
                 GHC.Types.I#
                   (GHC.Prim.-#
                      (GHC.Prim.-#
                         (GHC.Prim.-#
                            (GHC.Prim.-#
                               (GHC.Prim.-#
                                  (GHC.Prim.-#
                                     (GHC.Prim.+#
                                        (GHC.Prim.+#
                                           (GHC.Prim.+#
                                              (GHC.Prim.+#
                                                 (GHC.Prim.+#
                                                    (GHC.Prim.*#
                                                       (GHC.Prim.word2Int#
                                                          (GHC.Prim.popCnt64#
                                                             (GHC.Prim.and#
                                                                ipv
                                                                71776119061217280##)))
                                                       50#)
                                                    (GHC.Prim.*#
                                                       (GHC.Prim.word2Int#
                                                          (GHC.Prim.popCnt64#
                                                             (GHC.Prim.and# ipv 26388279066624##)))
                                                       30#))
                                                 (GHC.Prim.*#
                                                    (GHC.Prim.word2Int#
                                                       (GHC.Prim.popCnt64#
                                                          (GHC.Prim.and# ipv 103079215104##)))
                                                    25#))
                                              (GHC.Prim.*#
                                                 (GHC.Prim.word2Int#
                                                    (GHC.Prim.popCnt64#
                                                       (GHC.Prim.or#
                                                          (GHC.Prim.and# ipv 39582821253120##)
                                                          (GHC.Prim.and# ipv1 6755399441055744##))))
                                                 20#))
                                           (GHC.Prim.*#
                                              (GHC.Prim.word2Int#
                                                 (GHC.Prim.popCnt64#
                                                    (GHC.Prim.or#
                                                       (GHC.Prim.and# ipv 214559386265088##)
                                                       (GHC.Prim.and# ipv1 39582418599936##))))
                                              10#))
                                        (GHC.Prim.*#
                                           (GHC.Prim.word2Int#
                                              (GHC.Prim.popCnt64#
                                                 (GHC.Prim.or#
                                                    (GHC.Prim.and# ipv 837527109888##)
                                                    (GHC.Prim.and# ipv1 72567767433216##))))
                                           5#))
                                     (GHC.Prim.*#
                                        (GHC.Prim.word2Int#
                                           (GHC.Prim.popCnt64#
                                              (GHC.Prim.or#
                                                 (GHC.Prim.and# ipv 4325376##)
                                                 (GHC.Prim.and# ipv1 36452112267214848##))))
                                        5#))
                                  (GHC.Prim.*#
                                     (GHC.Prim.word2Int#
                                        (GHC.Prim.popCnt64#
                                           (GHC.Prim.or#
                                              (GHC.Prim.and# ipv 2359296##)
                                              (GHC.Prim.and# ipv1 28710448241246208##))))
                                     10#))
                               (GHC.Prim.*#
                                  (GHC.Prim.word2Int#
                                     (GHC.Prim.popCnt64#
                                        (GHC.Prim.or#
                                           (GHC.Prim.and# ipv 6144##)
                                           (GHC.Prim.and# ipv1 103081574400##))))
                                  20#))
                            (GHC.Prim.*#
                               (GHC.Prim.word2Int#
                                  (GHC.Prim.popCnt64# (GHC.Prim.and# ipv1 402653184##)))
                               25#))
                         (GHC.Prim.*#
                            (GHC.Prim.word2Int#
                               (GHC.Prim.popCnt64# (GHC.Prim.and# ipv1 1572864##)))
                            30#))
                      (GHC.Prim.*#
                         (GHC.Prim.word2Int#
                            (GHC.Prim.popCnt64# (GHC.Prim.and# ipv1 65280##)))
                         50#)) } }) -}
a235197d196e54091c76aca7f77e6d43
  queenBonus5 :: Alias.BitBoard
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Word.W64# 66229410471936##) -}
918d090364bc6758ef19765e2470123b
  queenPenalty10 :: Alias.BitBoard
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Word.W64# 7386326700872794470##) -}
1bc2a0f5a1e0b13936b5d898e9874d85
  queenPenalty20 :: Alias.BitBoard
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Word.W64# 9295429630892703873##) -}
e8618c4d778fd143ba0d1565a6551714
  queenPenalty5 :: Alias.BitBoard
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Word.W64# 1729524098205220888##) -}
7b9032f6066126cc0a91cf02b5cd8b04
  queenPosition :: Alias.BitBoard -> Alias.BitBoard -> GHC.Types.Int
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (whites :: Alias.BitBoard) (blacks :: Alias.BitBoard) ->
                 case whites of whites1 { GHC.Word.W64# ipv ->
                 case blacks of blacks1 { GHC.Word.W64# ipv1 ->
                 GHC.Types.I#
                   (GHC.Prim.-#
                      (GHC.Prim.-#
                         (GHC.Prim.-#
                            (GHC.Prim.+#
                               (GHC.Prim.+#
                                  (GHC.Prim.*#
                                     (GHC.Prim.word2Int#
                                        (GHC.Prim.popCnt64#
                                           (GHC.Prim.and# ipv1 9295429630892703873##)))
                                     20#)
                                  (GHC.Prim.*#
                                     (GHC.Prim.word2Int#
                                        (GHC.Prim.popCnt64#
                                           (GHC.Prim.and# ipv1 7386326700872794470##)))
                                     10#))
                               (GHC.Prim.*#
                                  (GHC.Prim.word2Int#
                                     (GHC.Prim.popCnt64#
                                        (GHC.Prim.or#
                                           (GHC.Prim.and# ipv 66229410471936##)
                                           (GHC.Prim.and# ipv1 1729382256935501848##))))
                                  5#))
                            (GHC.Prim.*#
                               (GHC.Prim.word2Int#
                                  (GHC.Prim.popCnt64#
                                     (GHC.Prim.or#
                                        (GHC.Prim.and# ipv1 9143797405188096##)
                                        (GHC.Prim.and# ipv 1729524098205220888##))))
                               5#))
                         (GHC.Prim.*#
                            (GHC.Prim.word2Int#
                               (GHC.Prim.popCnt64# (GHC.Prim.and# ipv 7386326700872794470##)))
                            10#))
                      (GHC.Prim.*#
                         (GHC.Prim.word2Int#
                            (GHC.Prim.popCnt64# (GHC.Prim.and# ipv 9295429630892703873##)))
                         20#)) } }) -}
114061730231b411d4dd60ad7782637d
  rookBonus10 :: Alias.BitBoard
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Word.W64# 35465847065542656##) -}
7ade1d235caf12b3fe016bbfd6c23cd0
  rookBonus5 :: Alias.BitBoard
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Word.W64# 9295429630892703768##) -}
76098416389d98c0e5fb34365f6b0933
  rookPenalty5 :: Alias.BitBoard
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Word.W64# 142393223512320##) -}
f0d4b5a1a0afe5025dcd0e8820310e32
  rookPosition :: Alias.BitBoard -> Alias.BitBoard -> GHC.Types.Int
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (whites :: Alias.BitBoard) (blacks :: Alias.BitBoard) ->
                 case whites of whites1 { GHC.Word.W64# ipv ->
                 case blacks of blacks1 { GHC.Word.W64# ipv1 ->
                 GHC.Types.I#
                   (GHC.Prim.-#
                      (GHC.Prim.-#
                         (GHC.Prim.+#
                            (GHC.Prim.*#
                               (GHC.Prim.word2Int#
                                  (GHC.Prim.popCnt64# (GHC.Prim.and# ipv 35465847065542656##)))
                               10#)
                            (GHC.Prim.*#
                               (GHC.Prim.word2Int#
                                  (GHC.Prim.popCnt64#
                                     (GHC.Prim.or#
                                        (GHC.Prim.and# ipv 9295429630892703768##)
                                        (GHC.Prim.and# ipv1 36452665219153920##))))
                               5#))
                         (GHC.Prim.*#
                            (GHC.Prim.word2Int#
                               (GHC.Prim.popCnt64#
                                  (GHC.Prim.or#
                                     (GHC.Prim.and# ipv1 1729382256910270593##)
                                     (GHC.Prim.and# ipv 142393223512320##))))
                            5#))
                      (GHC.Prim.*#
                         (GHC.Prim.word2Int#
                            (GHC.Prim.popCnt64# (GHC.Prim.and# ipv1 32256##)))
                         10#)) } }) -}
d72826dca90976cb8612ee6376dd13ce
  space :: BasicData.Position -> Alias.Evaluation
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SSSSSSSSSLLLLLLLSLLL),1*U(U,U,U,U,U,U,U,U,U,A,A,A,A,A,A,A,U,A,A,A)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: BasicData.Position) ->
                 case w of ww { BasicData.Position ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ww20 ->
                 case Evaluation.$wspace
                        ww1
                        ww2
                        ww3
                        ww4
                        ww5
                        ww6
                        ww7
                        ww8
                        ww9
                        ww17 of ww21 { DEFAULT ->
                 GHC.Types.I# ww21 } }) -}
aa3d671fbd170eafd9596fda14e900ba
  tropism :: BasicData.Position -> Alias.Evaluation
  {- Arity: 1,
     Strictness: <S(SLLLLLLSLLLLLLLLLLLL),1*U(U,U,U,U,U,U,U,U,A,A,A,A,A,A,A,A,A,A,A,A)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: BasicData.Position) ->
                 case w of ww { BasicData.Position ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ww20 ->
                 case Evaluation.$wtropism
                        ww1
                        ww2
                        ww3
                        ww4
                        ww5
                        ww6
                        ww7
                        ww8 of ww21 { DEFAULT ->
                 GHC.Types.I# ww21 } }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

