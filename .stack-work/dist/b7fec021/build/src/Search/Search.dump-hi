
==================== FINAL INTERFACE ====================
2016-12-23 07:46:03.8809821 UTC

interface Sophy-0.1.0.0-KzkJ0b2opaf7oLnrOdwoet:Search 8001
  interface hash: f09019375cd18514df09cd0f64e6d9e0
  ABI hash: 3127de119458e89b815990ee38c14a7e
  export-list hash: 8cd0cb00fcc2320d71932da0e499c8e2
  orphan hash: 1185274e29d7af0441023b22e375ea81
  flag hash: 3191267f49135665ab03a7886aa47ab0
  sig of: Nothing
  used TH splices: True
  where
exports:
  Search.apply
  Search.aspirationSearch
  Search.assign
  Search.clearVariation
  Search.counter
  Search.cutoff
  Search.declare
  Search.defeat
  Search.environment
  Search.getHash
  Search.getKillers
  Search.getSelectedMove
  Search.getVariation
  Search.iddfs
  Search.indexPos
  Search.initSearchState
  Search.killers
  Search.lookupTT
  Search.maxEval
  Search.minEval
  Search.mtdf
  Search.negaScout
  Search.putHash
  Search.putKiller
  Search.putMove
  Search.quiescence
  Search.refer
  Search.samePos
  Search.say
  Search.search
  Search.setVariation
  Search.table
  Search.tickCounter
  Search.uciInfo
  Search.updateBounds
  Search.variation
  Search.verifyCutoff
  Search.HashEntry{Search.HashEntry posId priority refutation score scoreType}
  Search.HashTable
  Search.NodeType{Search.All Search.Cut Search.PV}
  Search.Search
  Search.SearchEnvironment{Search.SearchEnvironment _table}
  Search.SearchState{Search.SearchState _counter _killers _variation}
module dependencies: Alias AttackTable BasicConstant BasicData
                     BitBoard Bitwise Evaluation Move Position
package dependencies: MonadRandom-0.4.2.3@MonadRandom-0.4.2.3-8TfCm6PGvGYB7omozORhov
                      StateVar-1.1.0.4@StateVar-1.1.0.4-CJpWsiXJdd89SnV9dZtTwc
                      Win32-2.3.1.1@Win32-2.3.1.1
                      adjunctions-4.3@adjunctions-4.3-3ol9sWZt3In19pwXwPv3Xc
                      array-0.5.1.1@array-0.5.1.1 base-4.9.0.0
                      base-orphans-0.5.4@base-orphans-0.5.4-5IQvrjd7gNP548VkOOyIq6
                      bifunctors-5.4.1@bifunctors-5.4.1-8Xk5Wsnk1fr6rBLkW9MO8p
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      comonad-5@comonad-5-2RMxpSOQ5MCHLHIelJrHD4
                      composition-1.0.2.1@composition-1.0.2.1-KZVQ5Se9KseC7kQ38aLGDn
                      containers-0.5.7.1@containers-0.5.7.1
                      contravariant-1.4@contravariant-1.4-KSQE31a7FruKHDlp90hIUT
                      deepseq-1.4.2.0@deepseq-1.4.2.0
                      distributive-0.5.0.2@distributive-0.5.0.2-Cdz2vLOk85j1doGXLcictT
                      either-4.4.1.1@either-4.4.1.1-BWHIQ5hdPI1HrEUIKYYfaI
                      exceptions-0.8.3@exceptions-0.8.3-7py7fmRxowDFpHmiHGKrTb
                      free-4.12.4@free-4.12.4-Etm59Dm8iExFxAy1L49Ovd
                      ghc-boot-th-8.0.1@ghc-boot-th-8.0.1 ghc-prim-0.5.0.0
                      hashable-1.2.4.0@hashable-1.2.4.0-EMu4H7FB10MAl6hwKw992G
                      integer-gmp-1.0.0.1
                      kan-extensions-5.0.1@kan-extensions-5.0.1-Asa0tkk9PuPLZ2eXuJ10Gr
                      lens-4.14@lens-4.14-LQbbTc84mRL8zB39b41ZKA
                      mmorph-1.0.9@mmorph-1.0.9-DmSwQqk5nLj7roLAcydGz
                      monad-control-1.0.1.0@monad-control-1.0.1.0-HoNEBoNfniX3vjSfkI7WTT
                      mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM
                      prelude-extras-0.4.0.3@prelude-extras-0.4.0.3-FAyB4iuuM7cHXdrLMZtdXq
                      pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.1.0@primitive-0.6.1.0-Ip44DqhfCp21tTUYbecwa
                      profunctors-5.2@profunctors-5.2-2ZZOz6u59T2H8y7z3NgZkY
                      random-1.1@random-1.1-54KmMHXjttlERYcr1mvsAe
                      reflection-2.1.2@reflection-2.1.2-J1ZzlxijzaHGRixYxgxlf9
                      semigroupoids-5.1@semigroupoids-5.1-1Gay4xNO77GHd4DGCzVuax
                      split-0.2.3.1@split-0.2.3.1-IJKK4pOCYGKud0jZImZke
                      stm-2.4.4.1@stm-2.4.4.1-4z2NRWnB0NIIUvSJsHW0kF
                      tagged-0.8.5@tagged-0.8.5-CtgV6EcN0do8F92i1S6iYx
                      template-haskell-2.11.0.0
                      text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
                      transformers-base-0.4.4@transformers-base-0.4.4-25SoAegOdaF8rLEnnb5jPI
                      transformers-compat-0.5.1.4@transformers-compat-0.5.1.4-81lZyuOJOvsD0zyCv2TKld
                      unordered-containers-0.2.7.1@unordered-containers-0.2.7.1-Eo9jd5DMz45DhBLCG8skzW
                      vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6
orphans: MonadRandom-0.4.2.3@MonadRandom-0.4.2.3-8TfCm6PGvGYB7omozORhov:Control.Monad.Random
         base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         hashable-1.2.4.0@hashable-1.2.4.0-EMu4H7FB10MAl6hwKw992G:Data.Hashable.Generic
         reflection-2.1.2@reflection-2.1.2-J1ZzlxijzaHGRixYxgxlf9:Data.Reflection
         stm-2.4.4.1@stm-2.4.4.1-4z2NRWnB0NIIUvSJsHW0kF:Control.Monad.STM
         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text
         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text.Lazy
         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text.Show
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Fusion.Bundle
         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Unboxed
family instance modules: adjunctions-4.3@adjunctions-4.3-3ol9sWZt3In19pwXwPv3Xc:Data.Functor.Rep
                         base-4.9.0.0:Control.Applicative base-4.9.0.0:Data.Complex
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Compose
                         base-4.9.0.0:Data.Functor.Const base-4.9.0.0:Data.Functor.Identity
                         base-4.9.0.0:Data.Functor.Product base-4.9.0.0:Data.Functor.Sum
                         base-4.9.0.0:Data.List.NonEmpty base-4.9.0.0:Data.Monoid
                         base-4.9.0.0:Data.Semigroup base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:Data.Version base-4.9.0.0:Data.Void
                         base-4.9.0.0:GHC.Exts base-4.9.0.0:GHC.Generics
                         base-4.9.0.0:GHC.IO.Exception base-4.9.0.0:GHC.TypeLits
                         bifunctors-5.4.1@bifunctors-5.4.1-8Xk5Wsnk1fr6rBLkW9MO8p:Data.Bifunctor.Biff
                         bifunctors-5.4.1@bifunctors-5.4.1-8Xk5Wsnk1fr6rBLkW9MO8p:Data.Bifunctor.Clown
                         bifunctors-5.4.1@bifunctors-5.4.1-8Xk5Wsnk1fr6rBLkW9MO8p:Data.Bifunctor.Flip
                         bifunctors-5.4.1@bifunctors-5.4.1-8Xk5Wsnk1fr6rBLkW9MO8p:Data.Bifunctor.Join
                         bifunctors-5.4.1@bifunctors-5.4.1-8Xk5Wsnk1fr6rBLkW9MO8p:Data.Bifunctor.Joker
                         bifunctors-5.4.1@bifunctors-5.4.1-8Xk5Wsnk1fr6rBLkW9MO8p:Data.Bifunctor.Product
                         bifunctors-5.4.1@bifunctors-5.4.1-8Xk5Wsnk1fr6rBLkW9MO8p:Data.Bifunctor.Sum
                         bifunctors-5.4.1@bifunctors-5.4.1-8Xk5Wsnk1fr6rBLkW9MO8p:Data.Bifunctor.Tannen
                         bifunctors-5.4.1@bifunctors-5.4.1-8Xk5Wsnk1fr6rBLkW9MO8p:Data.Bifunctor.Wrapped
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         either-4.4.1.1@either-4.4.1.1-BWHIQ5hdPI1HrEUIKYYfaI:Control.Monad.Trans.Either
                         ghc-boot-th-8.0.1@ghc-boot-th-8.0.1:GHC.LanguageExtensions.Type
                         kan-extensions-5.0.1@kan-extensions-5.0.1-Asa0tkk9PuPLZ2eXuJ10Gr:Data.Functor.Day
                         kan-extensions-5.0.1@kan-extensions-5.0.1-Asa0tkk9PuPLZ2eXuJ10Gr:Data.Functor.Yoneda
                         lens-4.14@lens-4.14-LQbbTc84mRL8zB39b41ZKA:Control.Lens.At
                         lens-4.14@lens-4.14-LQbbTc84mRL8zB39b41ZKA:Control.Lens.Internal.Indexed
                         lens-4.14@lens-4.14-LQbbTc84mRL8zB39b41ZKA:Control.Lens.Reified
                         lens-4.14@lens-4.14-LQbbTc84mRL8zB39b41ZKA:Control.Lens.Tuple
                         lens-4.14@lens-4.14-LQbbTc84mRL8zB39b41ZKA:Control.Lens.Wrapped
                         lens-4.14@lens-4.14-LQbbTc84mRL8zB39b41ZKA:Control.Lens.Zoom
                         monad-control-1.0.1.0@monad-control-1.0.1.0-HoNEBoNfniX3vjSfkI7WTT:Control.Monad.Trans.Control
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.1.0@primitive-0.6.1.0-Ip44DqhfCp21tTUYbecwa:Control.Monad.Primitive
                         profunctors-5.2@profunctors-5.2-2ZZOz6u59T2H8y7z3NgZkY:Data.Profunctor.Rep
                         tagged-0.8.5@tagged-0.8.5-CtgV6EcN0do8F92i1S6iYx:Data.Tagged
                         template-haskell-2.11.0.0:Language.Haskell.TH.Syntax
                         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text
                         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text.Lazy
                         unordered-containers-0.2.7.1@unordered-containers-0.2.7.1-Eo9jd5DMz45DhBLCG8skzW:Data.HashMap.Base
                         unordered-containers-0.2.7.1@unordered-containers-0.2.7.1-Eo9jd5DMz45DhBLCG8skzW:Data.HashSet
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Primitive
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Storable
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Unboxed
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Unboxed.Base
import  -/  Alias ba36719cc8f68ab87c0ee8446a683f1b
  exports: 03b73823d7379fa3fc65780b7c8ac5e2
  Alpha 885944b668a519abfa4deb35d392f971
  Beta 945368d0629a5e6b20e8b15ae818249d
  Counter b5577b028d85d8737b481f58598f74e9
  Depth 09f60f1afd9625b82a4b6dd1070a407c
  Evaluation d0ec3a1908e74f25dceb92009ca2d86e
  Killers 44cc75fc02cfcc10551456614115d539
  Move 28ada285c0d62028b4226580e5f1ab97
  TableSize bdeb6159e6082b9d66418f003e47d688
  Variation a76e2d8ed74a58a7def59e57f5d5d8d8
  ZobristKey ab98ea94473ec2650a6572a2f90c85e1
import  -/  BasicData 2a7d7454833f4f04d9c30a40b6d5a151
  exports: 05582099e9a48170ebc021a187a7905d
  Exact 3d71c206217192d2739f5713b0a3f856
  King 2db3132eee6067b9d25bc0e1fc945cfa
  LowerBound 4ff2c0de29d9db1123fa58bcd4b566f2
  Position a4a6ae1d21eb516f790aeadb42103ac1
  ScoreType 5e36171074e73b14b120e7a641b7de10
  UpperBound 10f7e51fd375eca6a7c9840613d544ee
  _zobristKey 65972c6976f94e107b02aa43c8598294
  plyCount 89e6ae44a85de21278080acc314226ce
import  -/  Evaluation 008bf86b6494569d2bab619bd735acc9
  exports: c3f28aa4cbbb32c03fe6e73e0d06f90e
  evaluate f42704fec9c54a4c295d2ec8c2ae73a1
import  -/  Move 44a778e409d712d8dcaf2c07d1b2800d
  exports: c971bac89379bbc97981f28ed121b754
  isCheck 376546f14ac6501994d7226a5b89376a
  isQuiet d2080fdebce11cedf2d7f7a66be8a092
  isTactical 2dafa972c9eac619046ebaf683a91d8d
  legalMoves f4398696a4e91057c69a0ee4e4024904
  makeMove b10c71dbea286ede8bea4e8fc9f77a6b
  noisyMoves e975411a384f2951ba13b83739c18375
  pass c30a49ccbe5ffa66e2dc5a50cf13c3fc
  toLAN 9e6b618b23ec6e81887841cb543ee7fd
import  -/  Position af8b43b323818dabb635634fc880445d
  exports: 0d659c33f0a366721f46836234c7b111
  canDraw da5efa381dde6b56483d4a46821ad5a6
  endGame 026a605469abbc99ee2852bf6f49cd6b
  insufficientMaterial 5b492342d61079d5d8b17f5bbd1bc84a
  isInCheck f23bea5a9021001de293e8b6302cc85c
  material 181bf7d143ed301c6c23ac5f987ad2a5
import  -/  base-4.9.0.0:Control.Arrow 1ad0e235ca96a02d05ff19477912bb7e
import  -/  base-4.9.0.0:Control.Concurrent c3bd1c151fa27857a3c9d1db4bfc9ff7
import  -/  base-4.9.0.0:Control.Exception 8217a8269170a7a872c6de95a3662e12
import  -/  base-4.9.0.0:Control.Exception.Base 0f704105a0b2c9a9a0b50fdf0b35065d
import  -/  base-4.9.0.0:Control.Monad b6b2f076948b5e8acd6d95beb4d22bfc
import  -/  base-4.9.0.0:Control.Monad.IO.Class 6093ce5ace985d5ea81901bb51e28805
import  -/  base-4.9.0.0:Control.Monad.ST 5bfaae5dac94ed9df935d3d24117e9c2
import  -/  base-4.9.0.0:Data.Bits c954f6297e2203ba924b7d4bb91aa2cf
import  -/  base-4.9.0.0:Data.Either 4cef602ce360a0155ac0dd580a5b4863
import  -/  base-4.9.0.0:Data.Foldable 3cbed01c922be29649c33015287c82ca
import  -/  base-4.9.0.0:Data.Function 2d30bad1e59b32e49b27f71226717080
import  -/  base-4.9.0.0:Data.Functor 67cebb006c069ea73adcd2d468cdb0dc
import  -/  base-4.9.0.0:Data.IORef 7f33e58c885bf966bd92941b35914a88
import  -/  base-4.9.0.0:Data.List d711f98b49ef5d33e5b3d404631ed073
import  -/  base-4.9.0.0:Data.Maybe 086a84053ef7f7810663b5f03b7ec3f7
import  -/  base-4.9.0.0:Data.OldList 3c899c6d8e6204063769214449ac0954
import  -/  base-4.9.0.0:GHC.Base dd8044a8d640eee51828c17c476a6ba7
import  -/  base-4.9.0.0:GHC.Conc.Sync a1292c872414656fef080815d5d8e73c
import  -/  base-4.9.0.0:GHC.Err 20faef8829fd13c027d0ee2213637534
import  -/  base-4.9.0.0:GHC.Exception c6c6865d3d26014bfd1ac2ce722cdb53
import  -/  base-4.9.0.0:GHC.Float a46e197015eefaa013d7004e58481c54
import  -/  base-4.9.0.0:GHC.IO 1429985c1cb03cc0778fa4876799f1d2
import  -/  base-4.9.0.0:GHC.IORef 6ac2f49b0185ee3e0f9801f489e4a880
import  -/  base-4.9.0.0:GHC.List 47d436dfb7454bb1883fb4d943e3f389
import  -/  base-4.9.0.0:GHC.Num f0aed3315b3ed1b330b71fc4148a5581
import  -/  base-4.9.0.0:GHC.Real 011de9ca3282ad24a84e4e15f974f98e
import  -/  base-4.9.0.0:GHC.Show 0b5845243cb2ec62b57dd6963d276ec6
import  -/  base-4.9.0.0:Prelude 2d9cd8b0ec3d728f62b734df888d2e34
import  -/  base-4.9.0.0:System.IO c1068c4f4231e3198e330f99a58145b0
import  -/  composition-1.0.2.1@composition-1.0.2.1-KZVQ5Se9KseC7kQ38aLGDn:Data.Composition 277e45277a1ccd458458914c9cb45808
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base 36d2e459af5b8f1294c95bcce8d15e65
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Strict d0f9e72d2f2024ac80b30679f49f5143
import  -/  either-4.4.1.1@either-4.4.1.1-BWHIQ5hdPI1HrEUIKYYfaI:Control.Monad.Trans.Either 334f4eb610013240b29291c4f37e4ead
import  -/  ghc-prim-0.5.0.0:GHC.Classes 16d48e012d23eaef9bca91ccdd572c02
import  -/  ghc-prim-0.5.0.0:GHC.Types 7378e41b7749213c8c88ceb6b0665d4c
import  -/  lens-4.14@lens-4.14-LQbbTc84mRL8zB39b41ZKA:Control.Lens b7b80d679f99639b22dc49438349ebe7
import  -/  lens-4.14@lens-4.14-LQbbTc84mRL8zB39b41ZKA:Control.Lens.Getter b4cdad12f267d5ddf6313c85279297ed
import  -/  lens-4.14@lens-4.14-LQbbTc84mRL8zB39b41ZKA:Control.Lens.Iso b22769590b24512e0bb94513909450c8
import  -/  lens-4.14@lens-4.14-LQbbTc84mRL8zB39b41ZKA:Control.Lens.Setter 5dd87d764c6c78a841d6cc4f4c0b1fef
import  -/  lens-4.14@lens-4.14-LQbbTc84mRL8zB39b41ZKA:Control.Lens.TH 36e9d75427edb0642c4f058cda24cd53
import  -/  lens-4.14@lens-4.14-LQbbTc84mRL8zB39b41ZKA:Control.Lens.Type 270ffd0ddba3f1e8d7fe322624ac30d8
import  -/  mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM:Control.Monad.Reader 859b39f57eb3bed457106c30aac21473
import  -/  mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM:Control.Monad.Reader.Class 70af8bbe9a2a47df6e22d8f7d28d8a76
import  -/  mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM:Control.Monad.State.Class 6b9267d06a66633777f53733046c8d46
import  -/  mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM:Control.Monad.State.Strict 2e6138c12a3998caa148eedf4c0371a0
import  -/  stm-2.4.4.1@stm-2.4.4.1-4z2NRWnB0NIIUvSJsHW0kF:Control.Concurrent.STM 674516fe7a455ad46572e426b17538fa
import  -/  time-1.6.0.1@time-1.6.0.1:Data.Time feb04036d549fe1fa913ff01e216d803
import  -/  transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Class 61c0b71ca50a4fc1487174a3edd8a6af
import  -/  transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Reader 756452dbc99b10a10b52491debebc1d0
import  -/  transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.State.Strict b8fa87c41e99462c4ab440d6e4b4ef5b
import  -/  vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Mutable a270ee5ace70125b65106211782615b9
c46648db375628364b747067fc96ebec
  $s$fApplicativeEitherT1 ::
    GHC.Base.Monad
      (Control.Monad.Trans.Reader.ReaderT
         Search.SearchEnvironment GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                (Search.$s$fApplicativeEitherT_$s$fMonadReaderT
                   @ Search.SearchEnvironment) -}
5bde4749462a8dd4cc05ec4e44b9c8ed
  $s$fApplicativeEitherT2 ::
    GHC.Base.Functor
      (Control.Monad.Trans.Reader.ReaderT
         Search.SearchEnvironment GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                (Search.$s$fApplicativeEitherT_$s$fFunctorReaderT
                   @ Search.SearchEnvironment) -}
0c6cd2cea5b1090ce11c4f7ab1191001
  $s$fApplicativeEitherT_$dApplicative ::
    GHC.Base.Applicative GHC.Types.IO
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True) GHC.Base.$fApplicativeIO -}
8eb9acf7f86f86f86794db2412262aab
  $s$fApplicativeEitherT_$s$fApplicativeReaderT ::
    GHC.Base.Applicative
      (Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ r.
                  @ (Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO)
                  (Search.$s$fApplicativeEitherT_$s$fApplicativeReaderT_$cp1Applicative
                     @ r)
                  (\ @ a (eta1 :: a) (eta2 :: r) ->
                   GHC.Base.const
                     @ (GHC.Types.IO a)
                     @ r
                     (GHC.Base.returnIO @ a eta1)
                     eta2)
                    `cast`
                  (forall (a :: <*>_N).
                   <a>_R
                   ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                 <*>_N <r>_R <GHC.Types.IO>_R <a>_N))
                  (Search.$s$fApplicativeEitherT_$s$fApplicativeReaderT_$c<*> @ r)
                  (Control.Monad.Trans.Reader.$fApplicativeReaderT_$c*>
                     @ GHC.Types.IO
                     @ r
                     Search.$s$fApplicativeEitherT_$dApplicative)
                  (Control.Monad.Trans.Reader.$fApplicativeReaderT_$c<*
                     @ GHC.Types.IO
                     @ r
                     Search.$s$fApplicativeEitherT_$dApplicative) -}
1f8cd73ce57b167496bd34805b488607
  $s$fApplicativeEitherT_$s$fApplicativeReaderT_$c<*> ::
    Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO (a -> b)
    -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a
    -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(S(SL))),1*C1(C1(U(U,1*C1(U))))><L,1*C1(C1(U(U,U)))><L,U><S,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ r
                   @ a
                   @ b
                   (f :: Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO (a -> b))
                   (v :: Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (r -> GHC.Types.IO b)
                   @ (Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b)
                   (\ (tpl :: r -> GHC.Types.IO b) -> tpl)
                     `cast`
                   (<r -> GHC.Types.IO b>_R
                    ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                  <*>_N <r>_R <GHC.Types.IO>_R <b>_N))
                   (\ (r1 :: r) ->
                    GHC.Base.$fApplicativeIO_$sap
                      @ a
                      @ b
                      (Control.Monad.Trans.Reader.runReaderT
                         @ r
                         @ *
                         @ GHC.Types.IO
                         @ (a -> b)
                         f
                         r1)
                      (Control.Monad.Trans.Reader.runReaderT
                         @ r
                         @ *
                         @ GHC.Types.IO
                         @ a
                         v
                         r1))) -}
5a94eec88de2106c2ffd7df3f4562a08
  $s$fApplicativeEitherT_$s$fApplicativeReaderT_$cp1Applicative ::
    GHC.Base.Functor
      (Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Search.$s$fApplicativeEitherT_$s$fFunctorReaderT -}
e30673bcd0c406404ab731df9ad0490f
  $s$fApplicativeEitherT_$s$fApplicativeStateT ::
    GHC.Base.Applicative
      (Control.Monad.Trans.State.Strict.StateT
         s
         (Control.Monad.Trans.Reader.ReaderT
            Search.SearchEnvironment GHC.Types.IO))
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ s.
                  @ (Control.Monad.Trans.State.Strict.StateT
                       s
                       (Control.Monad.Trans.Reader.ReaderT
                          Search.SearchEnvironment GHC.Types.IO))
                  (Search.$s$fApplicativeEitherT_$s$fApplicativeStateT_$cp1Applicative
                     @ s)
                  (Search.$s$fApplicativeEitherT_$s$fApplicativeStateT_$cpure @ s)
                  (Search.$s$fApplicativeEitherT_$s$fApplicativeStateT_$c<*> @ s)
                  (Control.Monad.Trans.State.Strict.$fApplicativeStateT_$c*>
                     @ (Control.Monad.Trans.Reader.ReaderT
                          Search.SearchEnvironment GHC.Types.IO)
                     @ s
                     Search.$s$fApplicativeEitherT2
                     Search.$s$fApplicativeEitherT1)
                  (Control.Monad.Trans.State.Strict.$fApplicativeStateT_$c<*
                     @ (Control.Monad.Trans.Reader.ReaderT
                          Search.SearchEnvironment GHC.Types.IO)
                     @ s
                     Search.$s$fApplicativeEitherT2
                     Search.$s$fApplicativeEitherT1) -}
73a3544d8116f4f8372c2b72ee0ef832
  $s$fApplicativeEitherT_$s$fApplicativeStateT_$c<*> ::
    Control.Monad.Trans.State.Strict.StateT
      s
      (Control.Monad.Trans.Reader.ReaderT
         Search.SearchEnvironment GHC.Types.IO)
      (a -> b)
    -> Control.Monad.Trans.State.Strict.StateT
         s
         (Control.Monad.Trans.Reader.ReaderT
            Search.SearchEnvironment GHC.Types.IO)
         a
    -> Control.Monad.Trans.State.Strict.StateT
         s
         (Control.Monad.Trans.Reader.ReaderT
            Search.SearchEnvironment GHC.Types.IO)
         b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(U)><L,C(C1(C1(U(U,1*U(U,U)))))><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ a
                   @ b
                   (ds :: Control.Monad.Trans.State.Strict.StateT
                            s
                            (Control.Monad.Trans.Reader.ReaderT
                               Search.SearchEnvironment GHC.Types.IO)
                            (a -> b))
                   (ds1 :: Control.Monad.Trans.State.Strict.StateT
                             s
                             (Control.Monad.Trans.Reader.ReaderT
                                Search.SearchEnvironment GHC.Types.IO)
                             a) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (s
                      -> Control.Monad.Trans.Reader.ReaderT
                           Search.SearchEnvironment GHC.Types.IO (b, s))
                   @ (Control.Monad.Trans.State.Strict.StateT
                        s
                        (Control.Monad.Trans.Reader.ReaderT
                           Search.SearchEnvironment GHC.Types.IO)
                        b)
                   (\ (tpl :: s
                              -> Control.Monad.Trans.Reader.ReaderT
                                   Search.SearchEnvironment GHC.Types.IO (b, s)) ->
                    tpl)
                     `cast`
                   (<s
                     -> Control.Monad.Trans.Reader.ReaderT
                          Search.SearchEnvironment GHC.Types.IO (b, s)>_R
                    ->_R Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                  <s>_N
                                  <Control.Monad.Trans.Reader.ReaderT
                                     Search.SearchEnvironment GHC.Types.IO>_R
                                  <b>_N))
                   (\ (s1 :: s) ->
                    let {
                      m1 :: Control.Monad.Trans.Reader.ReaderT
                              Search.SearchEnvironment GHC.Types.IO (a -> b, s)
                      = ds
                          `cast`
                        (Control.Monad.Trans.State.Strict.N:StateT[0]
                             <s>_N
                             <Control.Monad.Trans.Reader.ReaderT
                                Search.SearchEnvironment GHC.Types.IO>_R
                             <a -> b>_N)
                          s1
                    } in
                    GHC.Base.$
                      @ 'GHC.Types.PtrRepLifted
                      @ (Search.SearchEnvironment -> GHC.Types.IO (b, s))
                      @ (Control.Monad.Trans.Reader.ReaderT
                           Search.SearchEnvironment GHC.Types.IO (b, s))
                      (\ (tpl :: Search.SearchEnvironment -> GHC.Types.IO (b, s)) -> tpl)
                        `cast`
                      (<Search.SearchEnvironment -> GHC.Types.IO (b, s)>_R
                       ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                     <*>_N
                                     <Search.SearchEnvironment>_R
                                     <GHC.Types.IO>_R
                                     <(b, s)>_N))
                      (\ (r1 :: Search.SearchEnvironment) ->
                       GHC.Base.bindIO
                         @ (a -> b, s)
                         @ (b, s)
                         (Control.Monad.Trans.Reader.runReaderT
                            @ Search.SearchEnvironment
                            @ *
                            @ GHC.Types.IO
                            @ (a -> b, s)
                            m1
                            r1)
                         (\ (a1 :: (a -> b, s)) ->
                          case a1 of wild { (,) f s' ->
                          let {
                            m2 :: Control.Monad.Trans.Reader.ReaderT
                                    Search.SearchEnvironment GHC.Types.IO (a, s)
                            = ds1
                                `cast`
                              (Control.Monad.Trans.State.Strict.N:StateT[0]
                                   <s>_N
                                   <Control.Monad.Trans.Reader.ReaderT
                                      Search.SearchEnvironment GHC.Types.IO>_R
                                   <a>_N)
                                s'
                          } in
                          Control.Monad.Trans.Reader.runReaderT
                            @ Search.SearchEnvironment
                            @ *
                            @ GHC.Types.IO
                            @ (b, s)
                            (GHC.Base.$
                               @ 'GHC.Types.PtrRepLifted
                               @ (Search.SearchEnvironment -> GHC.Types.IO (b, s))
                               @ (Control.Monad.Trans.Reader.ReaderT
                                    Search.SearchEnvironment GHC.Types.IO (b, s))
                               (\ (tpl :: Search.SearchEnvironment -> GHC.Types.IO (b, s)) -> tpl)
                                 `cast`
                               (<Search.SearchEnvironment -> GHC.Types.IO (b, s)>_R
                                ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                              <*>_N
                                              <Search.SearchEnvironment>_R
                                              <GHC.Types.IO>_R
                                              <(b, s)>_N))
                               (\ (r2 :: Search.SearchEnvironment) ->
                                GHC.Base.bindIO
                                  @ (a, s)
                                  @ (b, s)
                                  (Control.Monad.Trans.Reader.runReaderT
                                     @ Search.SearchEnvironment
                                     @ *
                                     @ GHC.Types.IO
                                     @ (a, s)
                                     m2
                                     r2)
                                  (\ (a2 :: (a, s)) ->
                                   case a2 of wild1 { (,) x s'' ->
                                   Control.Monad.Trans.Reader.runReaderT
                                     @ Search.SearchEnvironment
                                     @ *
                                     @ GHC.Types.IO
                                     @ (b, s)
                                     (Search.$s$fApplicativeEitherT_$s$fMonadReaderT_$creturn
                                        @ Search.SearchEnvironment
                                        @ (b, s)
                                        (f x, s''))
                                     r2 })))
                            r1 })))) -}
4ffdb0f80431813d79f3977a6d4c51ca
  $s$fApplicativeEitherT_$s$fApplicativeStateT_$cp1Applicative ::
    GHC.Base.Functor
      (Control.Monad.Trans.State.Strict.StateT
         s
         (Control.Monad.Trans.Reader.ReaderT
            Search.SearchEnvironment GHC.Types.IO))
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Search.$s$fApplicativeEitherT_$s$fFunctorStateT -}
718280e1282dd850dd238c258cce4c51
  $s$fApplicativeEitherT_$s$fApplicativeStateT_$cpure ::
    a
    -> Control.Monad.Trans.State.Strict.StateT
         s
         (Control.Monad.Trans.Reader.ReaderT
            Search.SearchEnvironment GHC.Types.IO)
         a
  {- Arity: 4, HasNoCafRefs, Strictness: <L,U><L,U><L,A><S,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ s @ a (a1 :: a) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (s
                      -> Control.Monad.Trans.Reader.ReaderT
                           Search.SearchEnvironment GHC.Types.IO (a, s))
                   @ (Control.Monad.Trans.State.Strict.StateT
                        s
                        (Control.Monad.Trans.Reader.ReaderT
                           Search.SearchEnvironment GHC.Types.IO)
                        a)
                   (\ (tpl :: s
                              -> Control.Monad.Trans.Reader.ReaderT
                                   Search.SearchEnvironment GHC.Types.IO (a, s)) ->
                    tpl)
                     `cast`
                   (<s
                     -> Control.Monad.Trans.Reader.ReaderT
                          Search.SearchEnvironment GHC.Types.IO (a, s)>_R
                    ->_R Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                  <s>_N
                                  <Control.Monad.Trans.Reader.ReaderT
                                     Search.SearchEnvironment GHC.Types.IO>_R
                                  <a>_N))
                   (\ (s1 :: s)
                      (eta1 :: Search.SearchEnvironment)
                      (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    ((Search.$s$fApplicativeEitherT_$s$fMonadReaderT_$creturn
                        @ Search.SearchEnvironment
                        @ (a, s)
                        (a1, s1))
                       `cast`
                     (Control.Monad.Trans.Reader.N:ReaderT[0]
                          <*>_N <Search.SearchEnvironment>_R <GHC.Types.IO>_R <(a, s)>_N)
                       eta1)
                      `cast`
                    (GHC.Types.N:IO[0] <(a, s)>_R)
                      eta2)
                     `cast`
                   (<s>_R
                    ->_R Trans
                             (<Search.SearchEnvironment>_R
                              ->_R Sym (GHC.Types.N:IO[0] <(a, s)>_R))
                             (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                       <*>_N
                                       <Search.SearchEnvironment>_R
                                       <GHC.Types.IO>_R
                                       <(a, s)>_N)))) -}
1fc80e1b5c8aa7c6e3cd832eb75c6f1a
  $s$fApplicativeEitherT_$s$fFunctorReaderT ::
    GHC.Base.Functor
      (Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ r.
                  @ (Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO)
                  (Search.$s$fApplicativeEitherT_$s$fFunctorReaderT_$cfmap @ r)
                  (Search.$s$fApplicativeEitherT_$s$fFunctorReaderT_$c<$ @ r) -}
c5b228df7651f0407ea21155240da162
  $s$fApplicativeEitherT_$s$fFunctorReaderT_$c<$ ::
    a
    -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b
    -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U><C(C(S(SL))),1*C1(C1(U(U,A)))><L,U><S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ r
                   @ a
                   @ b
                   (eta1 :: a)
                   (eta2 :: Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b)
                   (eta3 :: r) ->
                 let {
                   f :: b -> a {- Arity: 1 -} = \ (ds :: b) -> eta1
                 } in
                 (GHC.Base.$
                    @ 'GHC.Types.PtrRepLifted
                    @ (r -> GHC.Types.IO a)
                    @ (Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a)
                    (\ (tpl :: r -> GHC.Types.IO a) -> tpl)
                      `cast`
                    (<r -> GHC.Types.IO a>_R
                     ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                   <*>_N <r>_R <GHC.Types.IO>_R <a>_N))
                    (let {
                       g :: r -> GHC.Types.IO b
                       = Control.Monad.Trans.Reader.runReaderT
                           @ r
                           @ *
                           @ GHC.Types.IO
                           @ b
                           eta2
                     } in
                     (\ (x :: r)
                        (eta4 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                      (GHC.Base.$fFunctorIO_$cfmap @ b @ a f (g x))
                        `cast`
                      (GHC.Types.N:IO[0] <a>_R)
                        eta4)
                       `cast`
                     (<r>_R ->_R Sym (GHC.Types.N:IO[0] <a>_R))))
                   `cast`
                 (Control.Monad.Trans.Reader.N:ReaderT[0]
                      <*>_N <r>_R <GHC.Types.IO>_R <a>_N)
                   eta3)
                  `cast`
                (forall (r :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <a>_R
                 ->_R <Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b>_R
                 ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                               <*>_N <r>_R <GHC.Types.IO>_R <a>_N)) -}
14926d1b30afa02f956e866d6d6a43b8
  $s$fApplicativeEitherT_$s$fFunctorReaderT_$cfmap ::
    (a -> b)
    -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a
    -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*C1(U)><C(C(S(SL))),1*C1(C1(U(U,U)))><L,U><S,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ r
                   @ a
                   @ b
                   (f :: a -> b)
                   (eta1 :: Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a)
                   (eta2 :: r) ->
                 (GHC.Base.$
                    @ 'GHC.Types.PtrRepLifted
                    @ (r -> GHC.Types.IO b)
                    @ (Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b)
                    (\ (tpl :: r -> GHC.Types.IO b) -> tpl)
                      `cast`
                    (<r -> GHC.Types.IO b>_R
                     ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                   <*>_N <r>_R <GHC.Types.IO>_R <b>_N))
                    (let {
                       g :: r -> GHC.Types.IO a
                       = Control.Monad.Trans.Reader.runReaderT
                           @ r
                           @ *
                           @ GHC.Types.IO
                           @ a
                           eta1
                     } in
                     (\ (x :: r)
                        (eta3 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                      (GHC.Base.$fFunctorIO_$cfmap @ a @ b f (g x))
                        `cast`
                      (GHC.Types.N:IO[0] <b>_R)
                        eta3)
                       `cast`
                     (<r>_R ->_R Sym (GHC.Types.N:IO[0] <b>_R))))
                   `cast`
                 (Control.Monad.Trans.Reader.N:ReaderT[0]
                      <*>_N <r>_R <GHC.Types.IO>_R <b>_N)
                   eta2)
                  `cast`
                (forall (r :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <a -> b>_R
                 ->_R <Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a>_R
                 ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                               <*>_N <r>_R <GHC.Types.IO>_R <b>_N)) -}
cec3c5b808bd51470fe2668b26ebf744
  $s$fApplicativeEitherT_$s$fFunctorStateT ::
    GHC.Base.Functor
      (Control.Monad.Trans.State.Strict.StateT
         s
         (Control.Monad.Trans.Reader.ReaderT
            Search.SearchEnvironment GHC.Types.IO))
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ s.
                  @ (Control.Monad.Trans.State.Strict.StateT
                       s
                       (Control.Monad.Trans.Reader.ReaderT
                          Search.SearchEnvironment GHC.Types.IO))
                  (Search.$s$fApplicativeEitherT_$s$fFunctorStateT_$cfmap @ s)
                  (Control.Monad.Trans.State.Strict.$fFunctorStateT_$c<$
                     @ (Control.Monad.Trans.Reader.ReaderT
                          Search.SearchEnvironment GHC.Types.IO)
                     @ s
                     Search.$s$fApplicativeEitherT2) -}
3b5013eff9eac7c6615e0323fcc37fee
  $s$fApplicativeEitherT_$s$fFunctorStateT_$cfmap ::
    (a -> b)
    -> Control.Monad.Trans.State.Strict.StateT
         s
         (Control.Monad.Trans.Reader.ReaderT
            Search.SearchEnvironment GHC.Types.IO)
         a
    -> Control.Monad.Trans.State.Strict.StateT
         s
         (Control.Monad.Trans.Reader.ReaderT
            Search.SearchEnvironment GHC.Types.IO)
         b
  {- Arity: 3, HasNoCafRefs, Strictness: <L,C(U)><L,1*C1(U)><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ a
                   @ b
                   (f :: a -> b)
                   (m1 :: Control.Monad.Trans.State.Strict.StateT
                            s
                            (Control.Monad.Trans.Reader.ReaderT
                               Search.SearchEnvironment GHC.Types.IO)
                            a) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (s
                      -> Control.Monad.Trans.Reader.ReaderT
                           Search.SearchEnvironment GHC.Types.IO (b, s))
                   @ (Control.Monad.Trans.State.Strict.StateT
                        s
                        (Control.Monad.Trans.Reader.ReaderT
                           Search.SearchEnvironment GHC.Types.IO)
                        b)
                   (\ (tpl :: s
                              -> Control.Monad.Trans.Reader.ReaderT
                                   Search.SearchEnvironment GHC.Types.IO (b, s)) ->
                    tpl)
                     `cast`
                   (<s
                     -> Control.Monad.Trans.Reader.ReaderT
                          Search.SearchEnvironment GHC.Types.IO (b, s)>_R
                    ->_R Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                  <s>_N
                                  <Control.Monad.Trans.Reader.ReaderT
                                     Search.SearchEnvironment GHC.Types.IO>_R
                                  <b>_N))
                   (\ (s1 :: s) ->
                    GHC.Base.$
                      @ 'GHC.Types.PtrRepLifted
                      @ (Control.Monad.Trans.Reader.ReaderT
                           Search.SearchEnvironment GHC.Types.IO (a, s))
                      @ (Control.Monad.Trans.Reader.ReaderT
                           Search.SearchEnvironment GHC.Types.IO (b, s))
                      (let {
                         f1 :: (a, s) -> (b, s) {- Arity: 1 -}
                         = \ (ds :: (a, s)) -> case ds of wild { (,) a1 s' -> (f a1, s') }
                       } in
                       (\ (eta1 :: Control.Monad.Trans.Reader.ReaderT
                                     Search.SearchEnvironment GHC.Types.IO (a, s))
                          (eta2 :: Search.SearchEnvironment) ->
                        (GHC.Base.$
                           @ 'GHC.Types.PtrRepLifted
                           @ (Search.SearchEnvironment -> GHC.Types.IO (b, s))
                           @ (Control.Monad.Trans.Reader.ReaderT
                                Search.SearchEnvironment GHC.Types.IO (b, s))
                           (\ (tpl :: Search.SearchEnvironment -> GHC.Types.IO (b, s)) -> tpl)
                             `cast`
                           (<Search.SearchEnvironment -> GHC.Types.IO (b, s)>_R
                            ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                          <*>_N
                                          <Search.SearchEnvironment>_R
                                          <GHC.Types.IO>_R
                                          <(b, s)>_N))
                           (let {
                              g :: Search.SearchEnvironment -> GHC.Types.IO (a, s)
                              = Control.Monad.Trans.Reader.runReaderT
                                  @ Search.SearchEnvironment
                                  @ *
                                  @ GHC.Types.IO
                                  @ (a, s)
                                  eta1
                            } in
                            (\ (x :: Search.SearchEnvironment)
                               (eta3 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                             (GHC.Base.$fFunctorIO_$cfmap @ (a, s) @ (b, s) f1 (g x))
                               `cast`
                             (GHC.Types.N:IO[0] <(b, s)>_R)
                               eta3)
                              `cast`
                            (<Search.SearchEnvironment>_R
                             ->_R Sym (GHC.Types.N:IO[0] <(b, s)>_R))))
                          `cast`
                        (Control.Monad.Trans.Reader.N:ReaderT[0]
                             <*>_N <Search.SearchEnvironment>_R <GHC.Types.IO>_R <(b, s)>_N)
                          eta2)
                         `cast`
                       (<Control.Monad.Trans.Reader.ReaderT
                           Search.SearchEnvironment GHC.Types.IO (a, s)>_R
                        ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                      <*>_N
                                      <Search.SearchEnvironment>_R
                                      <GHC.Types.IO>_R
                                      <(b, s)>_N)))
                      (Control.Monad.Trans.State.Strict.runStateT
                         @ s
                         @ (Control.Monad.Trans.Reader.ReaderT
                              Search.SearchEnvironment GHC.Types.IO)
                         @ a
                         m1
                         s1))) -}
b988e9c4fc90dd12fb3063fa1c6a6621
  $s$fApplicativeEitherT_$s$fMonadReaderT ::
    GHC.Base.Monad (Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ r.
                  @ (Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO)
                  (Search.$s$fApplicativeEitherT_$s$fMonadReaderT_$cp1Monad @ r)
                  (Search.$s$fApplicativeEitherT_$s$fMonadReaderT_$c>>= @ r)
                  (Search.$s$fApplicativeEitherT_$s$fMonadReaderT_$c>> @ r)
                  (Search.$s$fApplicativeEitherT_$s$fMonadReaderT_$creturn @ r)
                  (Search.$s$fApplicativeEitherT_$s$fMonadReaderT_$cfail @ r) -}
a007c1cb3d54cf44237f46734a855bdb
  $s$fApplicativeEitherT_$s$fMonadReaderT_$c>> ::
    Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a
    -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b
    -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(S(SL))),1*C1(C1(U(U,A)))><L,1*C1(C1(U(U,U)))><L,U><S,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ r
                   @ a
                   @ b
                   (m1 :: Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a)
                   (k :: Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (r -> GHC.Types.IO b)
                   @ (Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b)
                   (\ (tpl :: r -> GHC.Types.IO b) -> tpl)
                     `cast`
                   (<r -> GHC.Types.IO b>_R
                    ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                  <*>_N <r>_R <GHC.Types.IO>_R <b>_N))
                   (\ (r1 :: r) ->
                    GHC.Base.bindIO
                      @ a
                      @ b
                      (Control.Monad.Trans.Reader.runReaderT
                         @ r
                         @ *
                         @ GHC.Types.IO
                         @ a
                         m1
                         r1)
                      (\ (a1 :: a) ->
                       Control.Monad.Trans.Reader.runReaderT
                         @ r
                         @ *
                         @ GHC.Types.IO
                         @ b
                         k
                         r1))) -}
12c1d5e29a84844b98421c00074f4694
  $s$fApplicativeEitherT_$s$fMonadReaderT_$c>>= ::
    Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a
    -> (a -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b)
    -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(S(SL))),1*C1(C1(U(U,U)))><L,1*C1(C1(C1(U(U,U))))><L,U><S,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ r
                   @ a
                   @ b
                   (m1 :: Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a)
                   (k :: a -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (r -> GHC.Types.IO b)
                   @ (Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b)
                   (\ (tpl :: r -> GHC.Types.IO b) -> tpl)
                     `cast`
                   (<r -> GHC.Types.IO b>_R
                    ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                  <*>_N <r>_R <GHC.Types.IO>_R <b>_N))
                   (\ (r1 :: r) ->
                    GHC.Base.bindIO
                      @ a
                      @ b
                      (Control.Monad.Trans.Reader.runReaderT
                         @ r
                         @ *
                         @ GHC.Types.IO
                         @ a
                         m1
                         r1)
                      (\ (a1 :: a) ->
                       Control.Monad.Trans.Reader.runReaderT
                         @ r
                         @ *
                         @ GHC.Types.IO
                         @ b
                         (k a1)
                         r1))) -}
47528058a5a6145748bd29b1bd8a285b
  $s$fApplicativeEitherT_$s$fMonadReaderT_$cfail ::
    GHC.Base.String
    -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a
  {- Arity: 3, Strictness: <B,U><B,A><B,U>x,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ r @ a (msg :: GHC.Base.String) ->
                 let {
                   eta1 :: GHC.Types.IO a = GHC.Base.$fMonadIO_$cfail @ a msg
                 } in
                 (\ (eta2 :: r) -> GHC.Base.const @ (GHC.Types.IO a) @ r eta1 eta2)
                   `cast`
                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                           <*>_N <r>_R <GHC.Types.IO>_R <a>_N))) -}
6c11751f1e2046383df8286450da364d
  $s$fApplicativeEitherT_$s$fMonadReaderT_$cp1Monad ::
    GHC.Base.Applicative
      (Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Search.$s$fApplicativeEitherT_$s$fApplicativeReaderT -}
6b247dc8d6c8d810580a64c4e6da505b
  $s$fApplicativeEitherT_$s$fMonadReaderT_$creturn ::
    a -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,A><S,U>,
     Unfolding: InlineRule (1, True, True)
                (\ @ r
                   @ a
                   (eta1 :: a)
                   (eta2 :: r)
                   (eta3 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (GHC.Base.returnIO @ a eta1) `cast` (GHC.Types.N:IO[0] <a>_R) eta3)
                  `cast`
                (forall (r :: <*>_N) (a :: <*>_N).
                 <a>_R
                 ->_R Trans
                          (<r>_R ->_R Sym (GHC.Types.N:IO[0] <a>_R))
                          (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                    <*>_N <r>_R <GHC.Types.IO>_R <a>_N))) -}
4ace7fc467ab33c694fa182bd3991ec1
  $s$fApplicativeEitherT_$s$fMonadStateT ::
    GHC.Base.Monad
      (Control.Monad.Trans.State.Strict.StateT
         s
         (Control.Monad.Trans.Reader.ReaderT
            Search.SearchEnvironment GHC.Types.IO))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ s.
                  @ (Control.Monad.Trans.State.Strict.StateT
                       s
                       (Control.Monad.Trans.Reader.ReaderT
                          Search.SearchEnvironment GHC.Types.IO))
                  (Search.$s$fApplicativeEitherT_$s$fMonadStateT_$cp1Monad @ s)
                  (Search.$s$fApplicativeEitherT_$s$fMonadStateT_$c>>= @ s)
                  (Search.$s$fApplicativeEitherT_$s$fMonadStateT_$c>> @ s)
                  (Control.Monad.Trans.State.Strict.$fMonadStateT_$creturn
                     @ (Control.Monad.Trans.Reader.ReaderT
                          Search.SearchEnvironment GHC.Types.IO)
                     @ s
                     Search.$s$fApplicativeEitherT1)
                  (Search.$s$fApplicativeEitherT_$s$fMonadStateT_$cfail @ s) -}
942ee46c4f8cac83f0f8dc8f416a801e
  $s$fApplicativeEitherT_$s$fMonadStateT_$c>> ::
    Control.Monad.Trans.State.Strict.StateT
      s
      (Control.Monad.Trans.Reader.ReaderT
         Search.SearchEnvironment GHC.Types.IO)
      a
    -> Control.Monad.Trans.State.Strict.StateT
         s
         (Control.Monad.Trans.Reader.ReaderT
            Search.SearchEnvironment GHC.Types.IO)
         b
    -> Control.Monad.Trans.State.Strict.StateT
         s
         (Control.Monad.Trans.Reader.ReaderT
            Search.SearchEnvironment GHC.Types.IO)
         b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(U)><L,C(C1(C1(U)))><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ a
                   @ b
                   (m1 :: Control.Monad.Trans.State.Strict.StateT
                            s
                            (Control.Monad.Trans.Reader.ReaderT
                               Search.SearchEnvironment GHC.Types.IO)
                            a)
                   (k :: Control.Monad.Trans.State.Strict.StateT
                           s
                           (Control.Monad.Trans.Reader.ReaderT
                              Search.SearchEnvironment GHC.Types.IO)
                           b) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (s
                      -> Control.Monad.Trans.Reader.ReaderT
                           Search.SearchEnvironment GHC.Types.IO (b, s))
                   @ (Control.Monad.Trans.State.Strict.StateT
                        s
                        (Control.Monad.Trans.Reader.ReaderT
                           Search.SearchEnvironment GHC.Types.IO)
                        b)
                   (\ (tpl :: s
                              -> Control.Monad.Trans.Reader.ReaderT
                                   Search.SearchEnvironment GHC.Types.IO (b, s)) ->
                    tpl)
                     `cast`
                   (<s
                     -> Control.Monad.Trans.Reader.ReaderT
                          Search.SearchEnvironment GHC.Types.IO (b, s)>_R
                    ->_R Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                  <s>_N
                                  <Control.Monad.Trans.Reader.ReaderT
                                     Search.SearchEnvironment GHC.Types.IO>_R
                                  <b>_N))
                   (\ (s1 :: s) ->
                    let {
                      m2 :: Control.Monad.Trans.Reader.ReaderT
                              Search.SearchEnvironment GHC.Types.IO (a, s)
                      = Control.Monad.Trans.State.Strict.runStateT
                          @ s
                          @ (Control.Monad.Trans.Reader.ReaderT
                               Search.SearchEnvironment GHC.Types.IO)
                          @ a
                          m1
                          s1
                    } in
                    GHC.Base.$
                      @ 'GHC.Types.PtrRepLifted
                      @ (Search.SearchEnvironment -> GHC.Types.IO (b, s))
                      @ (Control.Monad.Trans.Reader.ReaderT
                           Search.SearchEnvironment GHC.Types.IO (b, s))
                      (\ (tpl :: Search.SearchEnvironment -> GHC.Types.IO (b, s)) -> tpl)
                        `cast`
                      (<Search.SearchEnvironment -> GHC.Types.IO (b, s)>_R
                       ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                     <*>_N
                                     <Search.SearchEnvironment>_R
                                     <GHC.Types.IO>_R
                                     <(b, s)>_N))
                      (\ (r1 :: Search.SearchEnvironment) ->
                       GHC.Base.bindIO
                         @ (a, s)
                         @ (b, s)
                         (Control.Monad.Trans.Reader.runReaderT
                            @ Search.SearchEnvironment
                            @ *
                            @ GHC.Types.IO
                            @ (a, s)
                            m2
                            r1)
                         (\ (a1 :: (a, s)) ->
                          case a1 of wild { (,) a2 s' ->
                          Control.Monad.Trans.Reader.runReaderT
                            @ Search.SearchEnvironment
                            @ *
                            @ GHC.Types.IO
                            @ (b, s)
                            (Control.Monad.Trans.State.Strict.runStateT
                               @ s
                               @ (Control.Monad.Trans.Reader.ReaderT
                                    Search.SearchEnvironment GHC.Types.IO)
                               @ b
                               k
                               s')
                            r1 })))) -}
6a1e94c0f1855f7d0036ec5262ae8aea
  $s$fApplicativeEitherT_$s$fMonadStateT_$c>>= ::
    Control.Monad.Trans.State.Strict.StateT
      s
      (Control.Monad.Trans.Reader.ReaderT
         Search.SearchEnvironment GHC.Types.IO)
      a
    -> (a
        -> Control.Monad.Trans.State.Strict.StateT
             s
             (Control.Monad.Trans.Reader.ReaderT
                Search.SearchEnvironment GHC.Types.IO)
             b)
    -> Control.Monad.Trans.State.Strict.StateT
         s
         (Control.Monad.Trans.Reader.ReaderT
            Search.SearchEnvironment GHC.Types.IO)
         b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(U)><L,C(C1(C1(C1(U))))><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ a
                   @ b
                   (m1 :: Control.Monad.Trans.State.Strict.StateT
                            s
                            (Control.Monad.Trans.Reader.ReaderT
                               Search.SearchEnvironment GHC.Types.IO)
                            a)
                   (k :: a
                         -> Control.Monad.Trans.State.Strict.StateT
                              s
                              (Control.Monad.Trans.Reader.ReaderT
                                 Search.SearchEnvironment GHC.Types.IO)
                              b) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (s
                      -> Control.Monad.Trans.Reader.ReaderT
                           Search.SearchEnvironment GHC.Types.IO (b, s))
                   @ (Control.Monad.Trans.State.Strict.StateT
                        s
                        (Control.Monad.Trans.Reader.ReaderT
                           Search.SearchEnvironment GHC.Types.IO)
                        b)
                   (\ (tpl :: s
                              -> Control.Monad.Trans.Reader.ReaderT
                                   Search.SearchEnvironment GHC.Types.IO (b, s)) ->
                    tpl)
                     `cast`
                   (<s
                     -> Control.Monad.Trans.Reader.ReaderT
                          Search.SearchEnvironment GHC.Types.IO (b, s)>_R
                    ->_R Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                  <s>_N
                                  <Control.Monad.Trans.Reader.ReaderT
                                     Search.SearchEnvironment GHC.Types.IO>_R
                                  <b>_N))
                   (\ (s1 :: s) ->
                    let {
                      m2 :: Control.Monad.Trans.Reader.ReaderT
                              Search.SearchEnvironment GHC.Types.IO (a, s)
                      = Control.Monad.Trans.State.Strict.runStateT
                          @ s
                          @ (Control.Monad.Trans.Reader.ReaderT
                               Search.SearchEnvironment GHC.Types.IO)
                          @ a
                          m1
                          s1
                    } in
                    GHC.Base.$
                      @ 'GHC.Types.PtrRepLifted
                      @ (Search.SearchEnvironment -> GHC.Types.IO (b, s))
                      @ (Control.Monad.Trans.Reader.ReaderT
                           Search.SearchEnvironment GHC.Types.IO (b, s))
                      (\ (tpl :: Search.SearchEnvironment -> GHC.Types.IO (b, s)) -> tpl)
                        `cast`
                      (<Search.SearchEnvironment -> GHC.Types.IO (b, s)>_R
                       ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                     <*>_N
                                     <Search.SearchEnvironment>_R
                                     <GHC.Types.IO>_R
                                     <(b, s)>_N))
                      (\ (r1 :: Search.SearchEnvironment) ->
                       GHC.Base.bindIO
                         @ (a, s)
                         @ (b, s)
                         (Control.Monad.Trans.Reader.runReaderT
                            @ Search.SearchEnvironment
                            @ *
                            @ GHC.Types.IO
                            @ (a, s)
                            m2
                            r1)
                         (\ (a1 :: (a, s)) ->
                          case a1 of wild { (,) a2 s' ->
                          Control.Monad.Trans.Reader.runReaderT
                            @ Search.SearchEnvironment
                            @ *
                            @ GHC.Types.IO
                            @ (b, s)
                            (Control.Monad.Trans.State.Strict.runStateT
                               @ s
                               @ (Control.Monad.Trans.Reader.ReaderT
                                    Search.SearchEnvironment GHC.Types.IO)
                               @ b
                               (k a2)
                               s')
                            r1 })))) -}
2c820081f16a2eef3958418ba25135d0
  $s$fApplicativeEitherT_$s$fMonadStateT_$cfail ::
    GHC.Base.String
    -> Control.Monad.Trans.State.Strict.StateT
         s
         (Control.Monad.Trans.Reader.ReaderT
            Search.SearchEnvironment GHC.Types.IO)
         a
  {- Arity: 4, Strictness: <B,U><B,A><B,A><B,U>x,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ s @ a (str :: GHC.Base.String) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (s
                      -> Control.Monad.Trans.Reader.ReaderT
                           Search.SearchEnvironment GHC.Types.IO (a, s))
                   @ (Control.Monad.Trans.State.Strict.StateT
                        s
                        (Control.Monad.Trans.Reader.ReaderT
                           Search.SearchEnvironment GHC.Types.IO)
                        a)
                   (\ (tpl :: s
                              -> Control.Monad.Trans.Reader.ReaderT
                                   Search.SearchEnvironment GHC.Types.IO (a, s)) ->
                    tpl)
                     `cast`
                   (<s
                     -> Control.Monad.Trans.Reader.ReaderT
                          Search.SearchEnvironment GHC.Types.IO (a, s)>_R
                    ->_R Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                  <s>_N
                                  <Control.Monad.Trans.Reader.ReaderT
                                     Search.SearchEnvironment GHC.Types.IO>_R
                                  <a>_N))
                   (\ (ds :: s)
                      (eta1 :: Search.SearchEnvironment)
                      (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    (GHC.Base.const
                       @ (GHC.Types.IO (a, s))
                       @ Search.SearchEnvironment
                       (GHC.Base.$fMonadIO_$cfail @ (a, s) str)
                       eta1)
                      `cast`
                    (GHC.Types.N:IO[0] <(a, s)>_R)
                      eta2)
                     `cast`
                   (<s>_R
                    ->_R Trans
                             (<Search.SearchEnvironment>_R
                              ->_R Sym (GHC.Types.N:IO[0] <(a, s)>_R))
                             (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                       <*>_N
                                       <Search.SearchEnvironment>_R
                                       <GHC.Types.IO>_R
                                       <(a, s)>_N)))) -}
f424d33424a002b67bee421f9dbff8a5
  $s$fApplicativeEitherT_$s$fMonadStateT_$cp1Monad ::
    GHC.Base.Applicative
      (Control.Monad.Trans.State.Strict.StateT
         s
         (Control.Monad.Trans.Reader.ReaderT
            Search.SearchEnvironment GHC.Types.IO))
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Search.$s$fApplicativeEitherT_$s$fApplicativeStateT -}
cebee4a49b5463891739afe8c84fa07d
  $s$fMonadReaderrEitherT1 ::
    Control.Monad.Reader.Class.MonadReader
      Search.SearchEnvironment
      (Control.Monad.Trans.Reader.ReaderT
         Search.SearchEnvironment GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                (Search.$s$fMonadReaderrEitherT_$s$fMonadReaderrReaderT
                   @ Search.SearchEnvironment) -}
5494efaeb1f1b5026908e8f1c31259c5
  $s$fMonadReaderrEitherT_$s$fMonadReaderrReaderT ::
    Control.Monad.Reader.Class.MonadReader
      r (Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ r.
                  @ r
                  @ (Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO)
                  (Search.$s$fApplicativeEitherT_$s$fMonadReaderT @ r)
                  (GHC.Base.returnIO @ r)
                    `cast`
                  (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                            <*>_N <r>_R <GHC.Types.IO>_R <r>_N))
                  (Control.Monad.Reader.Class.$fMonadReaderrReaderT_$clocal
                     @ GHC.Types.IO
                     @ r
                     GHC.Base.$fMonadIO)
                  (Control.Monad.Reader.Class.$fMonadReaderrReaderT_$creader
                     @ GHC.Types.IO
                     @ r
                     GHC.Base.$fMonadIO) -}
34ec2296cc660a2d52712e6001c0c26e
  $s$fMonadReaderrEitherT_$s$fMonadReaderrStateT ::
    Control.Monad.Reader.Class.MonadReader
      Search.SearchEnvironment
      (Control.Monad.Trans.State.Strict.StateT
         s
         (Control.Monad.Trans.Reader.ReaderT
            Search.SearchEnvironment GHC.Types.IO))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ s.
                  @ Search.SearchEnvironment
                  @ (Control.Monad.Trans.State.Strict.StateT
                       s
                       (Control.Monad.Trans.Reader.ReaderT
                          Search.SearchEnvironment GHC.Types.IO))
                  (Control.Monad.Reader.Class.$fMonadReaderrStateT_$cp1MonadReader
                     @ Search.SearchEnvironment
                     @ (Control.Monad.Trans.Reader.ReaderT
                          Search.SearchEnvironment GHC.Types.IO)
                     @ s
                     Search.$s$fMonadReaderrEitherT1)
                  (Control.Monad.Reader.Class.$fMonadReaderrStateT_$cask
                     @ Search.SearchEnvironment
                     @ (Control.Monad.Trans.Reader.ReaderT
                          Search.SearchEnvironment GHC.Types.IO)
                     @ s
                     Search.$s$fMonadReaderrEitherT1)
                  (Control.Monad.Reader.Class.$fMonadReaderrStateT_$clocal
                     @ Search.SearchEnvironment
                     @ (Control.Monad.Trans.Reader.ReaderT
                          Search.SearchEnvironment GHC.Types.IO)
                     @ s
                     Search.$s$fMonadReaderrEitherT1)
                  (Control.Monad.Reader.Class.$fMonadReaderrStateT_$creader
                     @ Search.SearchEnvironment
                     @ (Control.Monad.Trans.Reader.ReaderT
                          Search.SearchEnvironment GHC.Types.IO)
                     @ s
                     Search.$s$fMonadReaderrEitherT1) -}
af5d9ffd498c86f72989570189d2883a
  $s$fMonadStatesEitherT_$s$fMonadStatesStateT ::
    Control.Monad.State.Class.MonadState
      s
      (Control.Monad.Trans.State.Strict.StateT
         s
         (Control.Monad.Trans.Reader.ReaderT
            Search.SearchEnvironment GHC.Types.IO))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ s.
                  @ s
                  @ (Control.Monad.Trans.State.Strict.StateT
                       s
                       (Control.Monad.Trans.Reader.ReaderT
                          Search.SearchEnvironment GHC.Types.IO))
                  (Search.$s$fApplicativeEitherT_$s$fMonadStateT @ s)
                  (GHC.Base.$
                     @ 'GHC.Types.PtrRepLifted
                     @ (s -> (s, s))
                     @ (Control.Monad.Trans.State.Strict.StateT
                          s
                          (Control.Monad.Trans.Reader.ReaderT
                             Search.SearchEnvironment GHC.Types.IO)
                          s)
                     (Control.Monad.Trans.State.Strict.state
                        @ (Control.Monad.Trans.Reader.ReaderT
                             Search.SearchEnvironment GHC.Types.IO)
                        @ s
                        @ s
                        Search.$s$fApplicativeEitherT1)
                     (\ (s1 :: s) -> (s1, s1)))
                  (Search.$s$fMonadStatesEitherT_$sput @ s)
                  (Control.Monad.State.Class.$fMonadStatesStateT_$cstate
                     @ (Control.Monad.Trans.Reader.ReaderT
                          Search.SearchEnvironment GHC.Types.IO)
                     @ s
                     Search.$s$fApplicativeEitherT1) -}
90b8d5cfd45889dd896d7984210e82e6
  $s$fMonadStatesEitherT_$sput ::
    s
    -> Control.Monad.Trans.State.Strict.StateT
         s
         (Control.Monad.Trans.Reader.ReaderT
            Search.SearchEnvironment GHC.Types.IO)
         ()
  {- Arity: 4, HasNoCafRefs, Strictness: <L,U><L,A><L,A><S,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ s (s1 :: s) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (s -> ((), s))
                   @ (Control.Monad.Trans.State.Strict.StateT
                        s
                        (Control.Monad.Trans.Reader.ReaderT
                           Search.SearchEnvironment GHC.Types.IO)
                        ())
                   (Control.Monad.Trans.State.Strict.state
                      @ (Control.Monad.Trans.Reader.ReaderT
                           Search.SearchEnvironment GHC.Types.IO)
                      @ s
                      @ ()
                      Search.$s$fApplicativeEitherT1)
                   (\ (ds :: s) -> (GHC.Tuple.(), s1))) -}
991e82e60750d0928086543adf3bd41c
  $sunless2 :: Data.Either.Either GHC.Types.Int ()
  {- HasNoCafRefs,
     Unfolding: (Data.Either.Right @ GHC.Types.Int @ () GHC.Tuple.()) -}
7f710548ef643383a754d412b00f1fa6
  $tc'All :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18034419245195623689##
                   8305815477659204294##
                   Search.$trModule
                   Search.$tc'All1) -}
2d4c08af00cde4abc0815a1bb6532fd3
  $tc'All1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'All"#) -}
4578b78ff7e8da8113187ad1f726b799
  $tc'Cut :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12523559046157304627##
                   7285844165122337448##
                   Search.$trModule
                   Search.$tc'Cut1) -}
add25e0663cc083343ebf2ea88fe1847
  $tc'Cut1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Cut"#) -}
ee147fa410f8a79b9367758ebe2af0e0
  $tc'HashEntry :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15888155633948286167##
                   8274334621075462141##
                   Search.$trModule
                   Search.$tc'HashEntry1) -}
83f7c9f875f6f0dded8312d9910affd4
  $tc'HashEntry1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'HashEntry"#) -}
414daaa5d3998e33890f4147d02c7412
  $tc'PV :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7360462944553093550##
                   3715226701084024126##
                   Search.$trModule
                   Search.$tc'PV1) -}
e0a6e9eb69a570f74294b14b190e9f32
  $tc'PV1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PV"#) -}
f9106c91fe09362329d056fe95225075
  $tc'SearchEnvironment :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13816098977709201816##
                   9563643871192892393##
                   Search.$trModule
                   Search.$tc'SearchEnvironment1) -}
92b272efdafaaa4397e15e440b65a6f4
  $tc'SearchEnvironment1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'SearchEnvironment"#) -}
0c0ab5abe0575b7fdec71df1570f226f
  $tc'SearchState :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7561748963469900362##
                   9271435664153184329##
                   Search.$trModule
                   Search.$tc'SearchState1) -}
1991433dec2ad86d4f730c8c2f107e02
  $tc'SearchState1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'SearchState"#) -}
d03a071b044adb1001cfd3805423e9fd
  $tcHashEntry :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5294339429869034621##
                   16640475460287993426##
                   Search.$trModule
                   Search.$tcHashEntry1) -}
efd15527a3ec3e3d7aea2ee67aa0b8f0
  $tcHashEntry1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "HashEntry"#) -}
f3e586e0f6cb08e46f32df0e1390d1a0
  $tcNodeType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1904207395265806742##
                   13979493913888232049##
                   Search.$trModule
                   Search.$tcNodeType1) -}
e793f56207697c2ec0772f81df971a17
  $tcNodeType1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "NodeType"#) -}
edcec533666f5b3a973daf349a288c80
  $tcSearchEnvironment :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14965575855196170790##
                   15808210745224186422##
                   Search.$trModule
                   Search.$tcSearchEnvironment1) -}
84b5804f9883720cc15e1f0bf666d9ee
  $tcSearchEnvironment1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "SearchEnvironment"#) -}
c4d28142b6cadd50ce1ac5775c78f6d3
  $tcSearchState :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16776828719333912270##
                   15623061137861679223##
                   Search.$trModule
                   Search.$tcSearchState1) -}
6fe71d7772c203b0894179763c52b586
  $tcSearchState1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "SearchState"#) -}
f3ec38ee4e831b0101f8c33705c1aeac
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Search.$trModule2
                   Search.$trModule1) -}
0a476c033788334d024b73cf562e8315
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Search"#) -}
78242bd4e7e1bff4a616a81fb64cc11c
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "Sophy-0.1.0.0-KzkJ0b2opaf7oLnrOdwoet"#) -}
97e87dcf1967311356894feb02b2552f
  $wenvironment ::
    GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Search.SearchEnvironment #)
  {- Arity: 2, Strictness: <S,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 0#) of wild1 {
                   GHC.Types.False
                   -> case Search.environment2 ww
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                Search.SearchEnvironment #)
                      of {}
                   GHC.Types.True
                   -> case GHC.Prim.newArray#
                             @ Search.HashEntry
                             @ (Control.Monad.Primitive.PrimState GHC.Types.IO)
                             ww
                             (Data.Vector.Mutable.uninitialised @ Search.HashEntry)
                             w `cast`
                             (GHC.Prim.State#
                                (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R of ds1 { (#,#) ipv ipv1 ->
                      (# ipv
                           `cast`
                         (GHC.Prim.State# (Control.Monad.Primitive.D:R:PrimStateIO[0]))_R,
                         Search.SearchEnvironment
                           (Data.Vector.Mutable.MVector
                              @ (Control.Monad.Primitive.PrimState GHC.Types.IO)
                              @ Search.HashEntry
                              0#
                              ww
                              ipv1)
                             `cast`
                           (Data.Vector.Mutable.MVector
                              (Control.Monad.Primitive.D:R:PrimStateIO[0])
                              <Search.HashEntry>_R)_R #) } }) -}
c4a4fdc923dc3fac6fa208cc35392095
  $widdfs ::
    GHC.Base.Maybe
      (GHC.Conc.Sync.TVar (Alias.Evaluation, Search.SearchState))
    -> BasicData.Position
    -> Control.Monad.Trans.Either.EitherT
         Alias.Evaluation
         (Control.Monad.Trans.State.Strict.StateT
            Search.SearchState
            (Control.Monad.Trans.Reader.ReaderT
               Search.SearchEnvironment GHC.Types.IO))
         Alias.Evaluation
  {- Arity: 2,
     Strictness: <L,U><L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: [0],
     Unfolding: (\ (w :: GHC.Base.Maybe
                           (GHC.Conc.Sync.TVar (Alias.Evaluation, Search.SearchState)))
                   (w1 :: BasicData.Position) ->
                 letrec {
                   $siddfs' :: GHC.Types.Int
                               -> GHC.Types.Int
                               -> GHC.Prim.Int#
                               -> Control.Monad.Trans.Either.EitherT
                                    GHC.Types.Int
                                    (Control.Monad.Trans.State.Strict.StateT
                                       Search.SearchState
                                       (Control.Monad.Trans.Reader.ReaderT
                                          Search.SearchEnvironment GHC.Types.IO))
                                    Alias.Evaluation
                     {- Arity: 3, Strictness: <L,U(U)><L,U(U)><L,U> -}
                   = \ (sc :: GHC.Types.Int)
                       (sc1 :: GHC.Types.Int)
                       (sc2 :: GHC.Prim.Int#) ->
                     let {
                       lvl56 :: GHC.Prim.Int# = GHC.Prim.+# sc2 1#
                     } in
                     let {
                       m1 :: Search.Search Alias.Evaluation
                       = Search.aspirationSearch (GHC.Types.I# sc2) sc w1
                     } in
                     (\ (s1 :: Search.SearchState) ->
                      let {
                        m2 :: Control.Monad.Trans.Reader.ReaderT
                                Search.SearchEnvironment
                                GHC.Types.IO
                                (Data.Either.Either GHC.Types.Int Alias.Evaluation,
                                 Search.SearchState)
                        = m1
                            `cast`
                          (Trans
                               (Control.Monad.Trans.Either.N:EitherT[0]
                                    <GHC.Types.Int>_N
                                    <Control.Monad.Trans.State.Strict.StateT
                                       Search.SearchState
                                       (Control.Monad.Trans.Reader.ReaderT
                                          Search.SearchEnvironment GHC.Types.IO)>_R
                                    <Alias.Evaluation>_N)
                               (Control.Monad.Trans.State.Strict.N:StateT[0]
                                    <Search.SearchState>_N
                                    <Control.Monad.Trans.Reader.ReaderT
                                       Search.SearchEnvironment GHC.Types.IO>_R
                                    <Data.Either.Either GHC.Types.Int Alias.Evaluation>_N))
                            s1
                      } in
                      (\ (r1 :: Search.SearchEnvironment)
                         (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                       case (m2
                               `cast`
                             (Control.Monad.Trans.Reader.N:ReaderT[0]
                                  <*>_N
                                  <Search.SearchEnvironment>_R
                                  <GHC.Types.IO>_R
                                  <(Data.Either.Either GHC.Types.Int Alias.Evaluation,
                                    Search.SearchState)>_N)
                               r1)
                              `cast`
                            (GHC.Types.N:IO[0]
                                 <(Data.Either.Either GHC.Types.Int Alias.Evaluation,
                                   Search.SearchState)>_R)
                              s of ds1 { (#,#) ipv ipv1 ->
                       case ipv1 of wild { (,) a1 s' ->
                       case a1 of wild1 {
                         Data.Either.Left l -> ds1
                         Data.Either.Right r
                         -> case s' of ww { Search.SearchState ww1 ww2 ww3 ->
                            case Search.$wuciInfo
                                   (GHC.Types.I# sc2)
                                   r
                                   w1
                                   ww1
                                   ww2
                                   ww3
                                   ipv of ds2 { (#,#) ipv2 ipv3 ->
                            case ipv3 of wild2 { (,) a2 s'1 ->
                            case a2 of wild3 {
                              Data.Either.Left l
                              -> (# ipv2,
                                    (Data.Either.Left @ GHC.Types.Int @ Alias.Evaluation l, s'1) #)
                              Data.Either.Right r2
                              -> case r of x { GHC.Types.I# ipv4 ->
                                 case s'1 of state { Search.SearchState ipv5 ipv6 ipv7 ->
                                 case GHC.Prim.atomically#
                                        @ ()
                                        (\ (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                         case w of wild4 {
                                           GHC.Base.Nothing -> (# eta1, GHC.Tuple.() #)
                                           GHC.Base.Just x1
                                           -> case x1 of wild5 { GHC.Conc.Sync.TVar tvar# ->
                                              case GHC.Prim.writeTVar#
                                                     @ GHC.Prim.RealWorld
                                                     @ (Alias.Evaluation, Search.SearchState)
                                                     tvar#
                                                     (x, state)
                                                     eta1 of s2# { DEFAULT ->
                                              (# s2#, GHC.Tuple.() #) } } })
                                        ipv2 of ds3 { (#,#) ipv8 ipv9 ->
                                 ((($siddfs' sc1 x lvl56)
                                     `cast`
                                   (Trans
                                        (Control.Monad.Trans.Either.N:EitherT[0]
                                             <GHC.Types.Int>_N
                                             <Control.Monad.Trans.State.Strict.StateT
                                                Search.SearchState
                                                (Control.Monad.Trans.Reader.ReaderT
                                                   Search.SearchEnvironment GHC.Types.IO)>_R
                                             <Alias.Evaluation>_N)
                                        (Control.Monad.Trans.State.Strict.N:StateT[0]
                                             <Search.SearchState>_N
                                             <Control.Monad.Trans.Reader.ReaderT
                                                Search.SearchEnvironment GHC.Types.IO>_R
                                             <Data.Either.Either GHC.Types.Int Alias.Evaluation>_N))
                                     state)
                                    `cast`
                                  (Control.Monad.Trans.Reader.N:ReaderT[0]
                                       <*>_N
                                       <Search.SearchEnvironment>_R
                                       <GHC.Types.IO>_R
                                       <(Data.Either.Either GHC.Types.Int Alias.Evaluation,
                                         Search.SearchState)>_N)
                                    r1)
                                   `cast`
                                 (GHC.Types.N:IO[0]
                                      <(Data.Either.Either GHC.Types.Int Alias.Evaluation,
                                        Search.SearchState)>_R)
                                   ipv8 } } } } } } } } } })
                        `cast`
                      (Trans
                           (<Search.SearchEnvironment>_R
                            ->_R Sym (GHC.Types.N:IO[0]
                                          <(Data.Either.Either GHC.Types.Int Alias.Evaluation,
                                            Search.SearchState)>_R))
                           (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                     <*>_N
                                     <Search.SearchEnvironment>_R
                                     <GHC.Types.IO>_R
                                     <(Data.Either.Either GHC.Types.Int Alias.Evaluation,
                                       Search.SearchState)>_N))))
                       `cast`
                     (Trans
                          (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                    <Search.SearchState>_N
                                    <Control.Monad.Trans.Reader.ReaderT
                                       Search.SearchEnvironment GHC.Types.IO>_R
                                    <Data.Either.Either GHC.Types.Int Alias.Evaluation>_N))
                          (Sym (Control.Monad.Trans.Either.N:EitherT[0]
                                    <GHC.Types.Int>_N
                                    <Control.Monad.Trans.State.Strict.StateT
                                       Search.SearchState
                                       (Control.Monad.Trans.Reader.ReaderT
                                          Search.SearchEnvironment GHC.Types.IO)>_R
                                    <Alias.Evaluation>_N)))
                 } in
                 $siddfs' Search.getHash6 Search.getHash6 1#) -}
5ba353bd6636971806847143e3f28061
  $wlookupTT ::
    Search.HashTable
    -> GHC.Types.Int
    -> Search.SearchState
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (Data.Either.Either
             GHC.Types.Int (GHC.Base.Maybe Search.HashEntry),
           Search.SearchState) #)
  {- Arity: 4, Strictness: <L,U(U,A,U)><L,U(U)><L,U><S,U>,
     Inline: [0],
     Unfolding: (\ (w :: Search.HashTable)
                   (w1 :: GHC.Types.Int)
                   (w2 :: Search.SearchState)
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.catch#
                        @ (GHC.Base.Maybe Search.HashEntry)
                        @ GHC.Exception.SomeException
                        (GHC.Magic.lazy
                           @ (GHC.Types.IO (GHC.Base.Maybe Search.HashEntry))
                           (\ (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                            case w `cast`
                                 (Data.Vector.Mutable.MVector
                                    (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0]))
                                    <Search.HashEntry>_R)_R of wild { Data.Vector.Mutable.MVector dt dt1 dt2 ->
                            case w1 of wild1 { GHC.Types.I# y ->
                            case (GHC.Prim.readArray#
                                    @ (Control.Monad.Primitive.PrimState GHC.Types.IO)
                                    @ Search.HashEntry
                                    dt2
                                    (GHC.Prim.+# dt y)
                                    eta1
                                      `cast`
                                    (GHC.Prim.State#
                                       (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R)
                                   `cast`
                                 ((#,#)
                                    <'GHC.Types.VoidRep>_R
                                    <'GHC.Types.PtrRepLifted>_R
                                    (GHC.Prim.State# (Control.Monad.Primitive.D:R:PrimStateIO[0]))_R
                                    <Search.HashEntry>_R)_R of ds1 { (#,#) ipv ipv1 ->
                            case GHC.Prim.seq#
                                   @ Search.HashEntry
                                   @ GHC.Prim.RealWorld
                                   ipv1
                                   ipv of ds { (#,#) ipv2 ipv3 ->
                            (# ipv2, GHC.Base.Just @ Search.HashEntry ipv3 #) } } } })
                             `cast`
                           (Sym (GHC.Types.N:IO[0] <GHC.Base.Maybe Search.HashEntry>_R)))
                          `cast`
                        (GHC.Types.N:IO[0] <GHC.Base.Maybe Search.HashEntry>_R)
                        Search.getHash2
                        w3 of ds1 { (#,#) ipv ipv1 ->
                 (# ipv,
                    (Data.Either.Right
                       @ GHC.Types.Int
                       @ (GHC.Base.Maybe Search.HashEntry)
                       ipv1,
                     w2) #) }) -}
31606f8118f1aa06f7c186aebfa4e964
  $wputKiller ::
    Alias.Depth
    -> GHC.Prim.Word# -> BasicData.Position -> Search.Search ()
  {- Arity: 3,
     Strictness: <L,U(U)><S,U><L,1*U(U,U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Inline: [0],
     Unfolding: (\ (w :: Alias.Depth)
                   (ww :: GHC.Prim.Word#)
                   (w1 :: BasicData.Position) ->
                 case Move.$wisQuiet w1 ww of wild {
                   GHC.Types.False
                   -> Search.putKiller2
                        `cast`
                      (Trans
                           (<Search.SearchState>_R
                            ->_R Trans
                                     (<Search.SearchEnvironment>_R
                                      ->_R Sym (GHC.Types.N:IO[0]
                                                    <(Data.Either.Either GHC.Types.Int (),
                                                      Search.SearchState)>_R))
                                     (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                               <*>_N
                                               <Search.SearchEnvironment>_R
                                               <GHC.Types.IO>_R
                                               <(Data.Either.Either GHC.Types.Int (),
                                                 Search.SearchState)>_N)))
                           (Trans
                                (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                          <Search.SearchState>_N
                                          <Control.Monad.Trans.Reader.ReaderT
                                             Search.SearchEnvironment GHC.Types.IO>_R
                                          <Data.Either.Either GHC.Types.Int ()>_N))
                                (Sym (Control.Monad.Trans.Either.N:EitherT[0]
                                          <GHC.Types.Int>_N
                                          <Control.Monad.Trans.State.Strict.StateT
                                             Search.SearchState
                                             (Control.Monad.Trans.Reader.ReaderT
                                                Search.SearchEnvironment GHC.Types.IO)>_R
                                          <()>_N))))
                   GHC.Types.True
                   -> let {
                        ww1 :: Alias.Move = GHC.Word.W16# ww
                      } in
                      let {
                        f :: GHC.Base.Maybe [Alias.Move] -> GHC.Base.Maybe [Alias.Move]
                          {- Arity: 1, Strictness: <S,1*U> -}
                        = \ (ds :: GHC.Base.Maybe [Alias.Move]) ->
                          case ds of wild1 {
                            GHC.Base.Nothing
                            -> GHC.Base.Just
                                 @ [Alias.Move]
                                 (GHC.Types.: @ Alias.Move ww1 (GHC.Types.[] @ Alias.Move))
                            GHC.Base.Just ds1
                            -> case ds1 of wild2 {
                                 [] -> Search.putKiller1
                                 : y ds2
                                 -> case ds2 of wild3 {
                                      []
                                      -> GHC.Base.Just
                                           @ [Alias.Move]
                                           (GHC.Types.:
                                              @ Alias.Move
                                              ww1
                                              (GHC.Types.:
                                                 @ Alias.Move
                                                 y
                                                 (GHC.Types.[] @ Alias.Move)))
                                      : worse ds3
                                      -> case ds3 of wild4 {
                                           []
                                           -> case y of wild5 { GHC.Word.W16# y1 ->
                                              case GHC.Prim.tagToEnum#
                                                     @ GHC.Types.Bool
                                                     (GHC.Prim.neWord# ww y1) of wild6 {
                                                GHC.Types.False -> wild1
                                                GHC.Types.True
                                                -> GHC.Base.Just
                                                     @ [Alias.Move]
                                                     (GHC.Types.:
                                                        @ Alias.Move
                                                        ww1
                                                        (GHC.Types.:
                                                           @ Alias.Move
                                                           wild5
                                                           (GHC.Types.[] @ Alias.Move))) } }
                                           : ipv ipv1 -> Search.putKiller1 } } } }
                      } in
                      Control.Monad.Trans.Either.$fMonadStatesEitherT_$cstate
                        @ Search.SearchState
                        @ (Control.Monad.Trans.State.Strict.StateT
                             Search.SearchState
                             (Control.Monad.Trans.Reader.ReaderT
                                Search.SearchEnvironment GHC.Types.IO))
                        @ GHC.Types.Int
                        (Search.$s$fMonadStatesEitherT_$s$fMonadStatesStateT
                           @ Search.SearchState)
                        @ ()
                        (\ (s1 :: Search.SearchState) ->
                         case s1 of wild1 { Search.SearchState dt x2 x3 ->
                         case w of ww2 { GHC.Types.I# ww3 ->
                         case Data.IntMap.Strict.$walter
                                @ [Alias.Move]
                                f
                                ww3
                                x3 of dt1 { DEFAULT ->
                         (GHC.Tuple.(), Search.SearchState dt x2 dt1) } } }) }) -}
8590f02223c91ea6a6dc26431427f135
  $wuciInfo ::
    Alias.Depth
    -> Alias.Evaluation
    -> BasicData.Position
    -> GHC.Prim.Int#
    -> Alias.Variation
    -> Data.IntMap.Base.IntMap Alias.Killers
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (Data.Either.Either GHC.Types.Int (), Search.SearchState) #)
  {- Arity: 7,
     Strictness: <L,1*U(U)><L,1*U(U)><L,1*U(A,A,A,A,A,A,A,A,A,A,A,A,U,A,A,A,A,A,A,A)><L,U><S,U><S,U><S,U>,
     Inline: [0] -}
e6adbd7241e1571b594468906e18e302
  data HashEntry
    = HashEntry {posId :: {-# UNPACK #-}Alias.ZobristKey,
                 priority :: {-# UNPACK #-}Alias.Depth,
                 score :: {-# UNPACK #-}Alias.Evaluation,
                 scoreType :: !BasicData.ScoreType,
                 refutation :: !GHC.Base.Maybe Alias.Move}
cd372da23dcb91760ac797395c106342
  type HashTable = Data.Vector.Mutable.IOVector Search.HashEntry
5e572ef2c513cfcf46fdf03016f75de2
  data NodeType = PV | Cut | All
275432fedf5e3c49077875109c9c6cd6
  type Search =
    Control.Monad.Trans.Either.EitherT
      Alias.Evaluation
      (Control.Monad.Trans.State.Strict.StateT
         Search.SearchState
         (Control.Monad.Trans.Reader.ReaderT
            Search.SearchEnvironment GHC.Types.IO))
    :: * -> *
485e3b0c0e78d070f133c7a95ba52b25
  data SearchEnvironment
    = SearchEnvironment {_table :: !Search.HashTable}
bee4681d93c681361a0d14b96a952fc5
  data SearchState
    = SearchState {_counter :: {-# UNPACK #-}Alias.Counter,
                   _variation :: !Alias.Variation,
                   _killers :: !Data.IntMap.Base.IntMap Alias.Killers}
cd78666ea4451bb09c9fa2a9b9318e94
  _counter :: Search.SearchState -> Alias.Counter
  RecSel Left Search.SearchState
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(U,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Search.SearchState) ->
                 case ds of wild { Search.SearchState dt ds1 ds2 ->
                 GHC.Types.I# dt }) -}
e3b4a7dac9478b3af9a7e29f9025e811
  _killers ::
    Search.SearchState -> Data.IntMap.Base.IntMap Alias.Killers
  RecSel Left Search.SearchState
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Search.SearchState) ->
                 case ds of wild { Search.SearchState dt ds1 ds2 -> ds2 }) -}
df9c5418cd06c3f00f24c8d9a11d60c2
  _table :: Search.SearchEnvironment -> Search.HashTable
  RecSel Left Search.SearchEnvironment
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U(U,U,U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Search.SearchEnvironment) ->
                 case ds of wild { Search.SearchEnvironment ds1 -> ds1 }) -}
a76b29105e6d49fa705457587502065d
  _variation :: Search.SearchState -> Alias.Variation
  RecSel Left Search.SearchState
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Search.SearchState) ->
                 case ds of wild { Search.SearchState dt ds1 ds2 -> ds1 }) -}
006a6a484c46705ac6dc34740be657c7
  apply :: (a -> a) -> GHC.IORef.IORef a -> Search.Search ()
  {- Arity: 5, HasNoCafRefs,
     Strictness: <C(S),1*C1(U)><S(S),1*U(U)><L,U><L,A><S,U>,
     Unfolding: InlineRule (0, True, True)
                Search.apply1
                  `cast`
                (forall (a :: <*>_N).
                 <a -> a>_R
                 ->_R <GHC.IORef.IORef a>_R
                 ->_R Trans
                          (<Search.SearchState>_R
                           ->_R Trans
                                    (<Search.SearchEnvironment>_R
                                     ->_R Sym (GHC.Types.N:IO[0]
                                                   <(Data.Either.Either GHC.Types.Int (),
                                                     Search.SearchState)>_R))
                                    (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                              <*>_N
                                              <Search.SearchEnvironment>_R
                                              <GHC.Types.IO>_R
                                              <(Data.Either.Either GHC.Types.Int (),
                                                Search.SearchState)>_N)))
                          (Trans
                               (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                         <Search.SearchState>_N
                                         <Control.Monad.Trans.Reader.ReaderT
                                            Search.SearchEnvironment GHC.Types.IO>_R
                                         <Data.Either.Either GHC.Types.Int ()>_N))
                               (Sym (Control.Monad.Trans.Either.N:EitherT[0]
                                         <GHC.Types.Int>_N
                                         <Control.Monad.Trans.State.Strict.StateT
                                            Search.SearchState
                                            (Control.Monad.Trans.Reader.ReaderT
                                               Search.SearchEnvironment GHC.Types.IO)>_R
                                         <()>_N)))) -}
f7768fbf09609d450ace4f8b6ac5a325
  apply1 ::
    (a -> a)
    -> GHC.IORef.IORef a
    -> Search.SearchState
    -> Search.SearchEnvironment
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (Data.Either.Either GHC.Types.Int (), Search.SearchState) #)
  {- Arity: 5, HasNoCafRefs,
     Strictness: <C(S),1*C1(U)><S(S),1*U(U)><L,U><L,A><S,U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   (x :: a -> a)
                   (y :: GHC.IORef.IORef a)
                   (eta1 :: Search.SearchState)
                   (eta2 :: Search.SearchEnvironment)
                   (eta3 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case y `cast`
                      (GHC.IORef.N:IORef[0] <a>_N) of wild { GHC.STRef.STRef var# ->
                 case GHC.Prim.readMutVar#
                        @ GHC.Prim.RealWorld
                        @ a
                        var#
                        eta3 of ds1 { (#,#) ipv ipv1 ->
                 case x ipv1 of x' { DEFAULT ->
                 case GHC.Prim.writeMutVar#
                        @ GHC.Prim.RealWorld
                        @ a
                        var#
                        x'
                        ipv of s2# { DEFAULT ->
                 (# s2#,
                    (Data.Either.Right @ GHC.Types.Int @ () GHC.Tuple.(),
                     eta1) #) } } } }) -}
036a8dba9545a03b141ea3e0cdd5cc01
  aspirationSearch ::
    Alias.Depth
    -> Alias.Evaluation
    -> BasicData.Position
    -> Search.Search Alias.Evaluation
  {- Arity: 3,
     Strictness: <L,U(U)><L,U(U)><L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Unfolding: (\ (n :: Alias.Depth)
                   (guess :: Alias.Evaluation)
                   (position :: BasicData.Position) ->
                 letrec {
                   aspire :: Alias.Alpha
                             -> Alias.Beta
                             -> Control.Monad.Trans.Either.EitherT
                                  Alias.Evaluation
                                  (Control.Monad.Trans.State.Strict.StateT
                                     Search.SearchState
                                     (Control.Monad.Trans.Reader.ReaderT
                                        Search.SearchEnvironment GHC.Types.IO))
                                  Alias.Evaluation
                     {- Arity: 2, Strictness: <L,U(U)><L,U(U)> -}
                   = \ (lower :: Alias.Alpha) (upper :: Alias.Beta) ->
                     let {
                       lvl56 :: Control.Monad.Trans.Either.EitherT
                                  Alias.Evaluation
                                  (Control.Monad.Trans.State.Strict.StateT
                                     Search.SearchState
                                     (Control.Monad.Trans.Reader.ReaderT
                                        Search.SearchEnvironment GHC.Types.IO))
                                  Alias.Evaluation
                       = aspire
                           (case lower of wild { GHC.Types.I# x ->
                            case upper of wild1 { GHC.Types.I# x1 ->
                            GHC.Types.I# (GHC.Prim.-# x (GHC.Prim.-# x1 x)) } })
                           upper
                     } in
                     let {
                       lvl57 :: Control.Monad.Trans.Either.EitherT
                                  Alias.Evaluation
                                  (Control.Monad.Trans.State.Strict.StateT
                                     Search.SearchState
                                     (Control.Monad.Trans.Reader.ReaderT
                                        Search.SearchEnvironment GHC.Types.IO))
                                  Alias.Evaluation
                       = aspire
                           lower
                           (case upper of wild { GHC.Types.I# x ->
                            case lower of wild1 { GHC.Types.I# y ->
                            GHC.Types.I# (GHC.Prim.+# x (GHC.Prim.-# x y)) } })
                     } in
                     let {
                       m1 :: Search.Search Alias.Evaluation
                       = Search.negaScout
                           n
                           lower
                           upper
                           GHC.Types.True
                           GHC.Types.False
                           position
                     } in
                     (\ (s1 :: Search.SearchState) ->
                      let {
                        m2 :: Control.Monad.Trans.Reader.ReaderT
                                Search.SearchEnvironment
                                GHC.Types.IO
                                (Data.Either.Either GHC.Types.Int Alias.Evaluation,
                                 Search.SearchState)
                        = m1
                            `cast`
                          (Trans
                               (Control.Monad.Trans.Either.N:EitherT[0]
                                    <GHC.Types.Int>_N
                                    <Control.Monad.Trans.State.Strict.StateT
                                       Search.SearchState
                                       (Control.Monad.Trans.Reader.ReaderT
                                          Search.SearchEnvironment GHC.Types.IO)>_R
                                    <Alias.Evaluation>_N)
                               (Control.Monad.Trans.State.Strict.N:StateT[0]
                                    <Search.SearchState>_N
                                    <Control.Monad.Trans.Reader.ReaderT
                                       Search.SearchEnvironment GHC.Types.IO>_R
                                    <Data.Either.Either GHC.Types.Int Alias.Evaluation>_N))
                            s1
                      } in
                      (\ (r1 :: Search.SearchEnvironment)
                         (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                       case (m2
                               `cast`
                             (Control.Monad.Trans.Reader.N:ReaderT[0]
                                  <*>_N
                                  <Search.SearchEnvironment>_R
                                  <GHC.Types.IO>_R
                                  <(Data.Either.Either GHC.Types.Int Alias.Evaluation,
                                    Search.SearchState)>_N)
                               r1)
                              `cast`
                            (GHC.Types.N:IO[0]
                                 <(Data.Either.Either GHC.Types.Int Alias.Evaluation,
                                   Search.SearchState)>_R)
                              s of ds1 { (#,#) ipv ipv1 ->
                       case ipv1 of wild { (,) a1 s' ->
                       case a1 of wild1 {
                         Data.Either.Left l -> ds1
                         Data.Either.Right r
                         -> case r of wild2 { GHC.Types.I# x ->
                            case upper of wild3 { GHC.Types.I# y ->
                            case GHC.Prim.tagToEnum#
                                   @ GHC.Types.Bool
                                   (GHC.Prim.>=# x y) of wild4 {
                              GHC.Types.False
                              -> case lower of wild5 { GHC.Types.I# y1 ->
                                 case GHC.Prim.tagToEnum#
                                        @ GHC.Types.Bool
                                        (GHC.Prim.<=# x y1) of wild6 {
                                   GHC.Types.False -> ds1
                                   GHC.Types.True
                                   -> ((lvl56
                                          `cast`
                                        (Trans
                                             (Control.Monad.Trans.Either.N:EitherT[0]
                                                  <GHC.Types.Int>_N
                                                  <Control.Monad.Trans.State.Strict.StateT
                                                     Search.SearchState
                                                     (Control.Monad.Trans.Reader.ReaderT
                                                        Search.SearchEnvironment GHC.Types.IO)>_R
                                                  <Alias.Evaluation>_N)
                                             (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                  <Search.SearchState>_N
                                                  <Control.Monad.Trans.Reader.ReaderT
                                                     Search.SearchEnvironment GHC.Types.IO>_R
                                                  <Data.Either.Either
                                                     GHC.Types.Int Alias.Evaluation>_N))
                                          s')
                                         `cast`
                                       (Control.Monad.Trans.Reader.N:ReaderT[0]
                                            <*>_N
                                            <Search.SearchEnvironment>_R
                                            <GHC.Types.IO>_R
                                            <(Data.Either.Either GHC.Types.Int Alias.Evaluation,
                                              Search.SearchState)>_N)
                                         r1)
                                        `cast`
                                      (GHC.Types.N:IO[0]
                                           <(Data.Either.Either GHC.Types.Int Alias.Evaluation,
                                             Search.SearchState)>_R)
                                        ipv } }
                              GHC.Types.True
                              -> ((lvl57
                                     `cast`
                                   (Trans
                                        (Control.Monad.Trans.Either.N:EitherT[0]
                                             <GHC.Types.Int>_N
                                             <Control.Monad.Trans.State.Strict.StateT
                                                Search.SearchState
                                                (Control.Monad.Trans.Reader.ReaderT
                                                   Search.SearchEnvironment GHC.Types.IO)>_R
                                             <Alias.Evaluation>_N)
                                        (Control.Monad.Trans.State.Strict.N:StateT[0]
                                             <Search.SearchState>_N
                                             <Control.Monad.Trans.Reader.ReaderT
                                                Search.SearchEnvironment GHC.Types.IO>_R
                                             <Data.Either.Either GHC.Types.Int Alias.Evaluation>_N))
                                     s')
                                    `cast`
                                  (Control.Monad.Trans.Reader.N:ReaderT[0]
                                       <*>_N
                                       <Search.SearchEnvironment>_R
                                       <GHC.Types.IO>_R
                                       <(Data.Either.Either GHC.Types.Int Alias.Evaluation,
                                         Search.SearchState)>_N)
                                    r1)
                                   `cast`
                                 (GHC.Types.N:IO[0]
                                      <(Data.Either.Either GHC.Types.Int Alias.Evaluation,
                                        Search.SearchState)>_R)
                                   ipv } } } } } })
                        `cast`
                      (Trans
                           (<Search.SearchEnvironment>_R
                            ->_R Sym (GHC.Types.N:IO[0]
                                          <(Data.Either.Either GHC.Types.Int Alias.Evaluation,
                                            Search.SearchState)>_R))
                           (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                     <*>_N
                                     <Search.SearchEnvironment>_R
                                     <GHC.Types.IO>_R
                                     <(Data.Either.Either GHC.Types.Int Alias.Evaluation,
                                       Search.SearchState)>_N))))
                       `cast`
                     (Trans
                          (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                    <Search.SearchState>_N
                                    <Control.Monad.Trans.Reader.ReaderT
                                       Search.SearchEnvironment GHC.Types.IO>_R
                                    <Data.Either.Either GHC.Types.Int Alias.Evaluation>_N))
                          (Sym (Control.Monad.Trans.Either.N:EitherT[0]
                                    <GHC.Types.Int>_N
                                    <Control.Monad.Trans.State.Strict.StateT
                                       Search.SearchState
                                       (Control.Monad.Trans.Reader.ReaderT
                                          Search.SearchEnvironment GHC.Types.IO)>_R
                                    <Alias.Evaluation>_N)))
                 } in
                 aspire
                   (case guess of wild { GHC.Types.I# x ->
                    GHC.Types.I# (GHC.Prim.-# x 25#) })
                   (case guess of wild { GHC.Types.I# x ->
                    GHC.Types.I# (GHC.Prim.+# x 25#) })) -}
a624657d1301799dff5077e6df03579d
  assign :: GHC.IORef.IORef a -> a -> Search.Search ()
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><L,U><L,U><L,A><S,U>,
     Unfolding: InlineRule (0, True, True)
                Search.assign1
                  `cast`
                (forall (a :: <*>_N).
                 <GHC.IORef.IORef a>_R
                 ->_R <a>_R
                 ->_R Trans
                          (<Search.SearchState>_R
                           ->_R Trans
                                    (<Search.SearchEnvironment>_R
                                     ->_R Sym (GHC.Types.N:IO[0]
                                                   <(Data.Either.Either GHC.Types.Int (),
                                                     Search.SearchState)>_R))
                                    (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                              <*>_N
                                              <Search.SearchEnvironment>_R
                                              <GHC.Types.IO>_R
                                              <(Data.Either.Either GHC.Types.Int (),
                                                Search.SearchState)>_N)))
                          (Trans
                               (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                         <Search.SearchState>_N
                                         <Control.Monad.Trans.Reader.ReaderT
                                            Search.SearchEnvironment GHC.Types.IO>_R
                                         <Data.Either.Either GHC.Types.Int ()>_N))
                               (Sym (Control.Monad.Trans.Either.N:EitherT[0]
                                         <GHC.Types.Int>_N
                                         <Control.Monad.Trans.State.Strict.StateT
                                            Search.SearchState
                                            (Control.Monad.Trans.Reader.ReaderT
                                               Search.SearchEnvironment GHC.Types.IO)>_R
                                         <()>_N)))) -}
73124518bd85e6593194969ccadcff44
  assign1 ::
    GHC.IORef.IORef a
    -> a
    -> Search.SearchState
    -> Search.SearchEnvironment
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (Data.Either.Either GHC.Types.Int (), Search.SearchState) #)
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><L,U><L,U><L,A><S,U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   (x :: GHC.IORef.IORef a)
                   (y :: a)
                   (eta1 :: Search.SearchState)
                   (eta2 :: Search.SearchEnvironment)
                   (eta3 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case x `cast`
                      (GHC.IORef.N:IORef[0] <a>_N) of wild { GHC.STRef.STRef var# ->
                 case GHC.Prim.writeMutVar#
                        @ GHC.Prim.RealWorld
                        @ a
                        var#
                        y
                        eta3 of s2# { DEFAULT ->
                 (# s2#,
                    (Data.Either.Right @ GHC.Types.Int @ () GHC.Tuple.(),
                     eta1) #) } }) -}
c5c3a075a080abf6744b99ea5934a4e4
  clearVariation :: Search.Search Alias.Variation
  {- Arity: 3, Strictness: <L,U(U,U,U)><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Search.clearVariation1
                  `cast`
                (Trans
                     (<Search.SearchState>_R
                      ->_R Trans
                               (<Search.SearchEnvironment>_R
                                ->_R Sym (GHC.Types.N:IO[0]
                                              <(Data.Either.Either GHC.Types.Int Alias.Variation,
                                                Search.SearchState)>_R))
                               (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                         <*>_N
                                         <Search.SearchEnvironment>_R
                                         <GHC.Types.IO>_R
                                         <(Data.Either.Either GHC.Types.Int Alias.Variation,
                                           Search.SearchState)>_N)))
                     (Trans
                          (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                    <Search.SearchState>_N
                                    <Control.Monad.Trans.Reader.ReaderT
                                       Search.SearchEnvironment GHC.Types.IO>_R
                                    <Data.Either.Either GHC.Types.Int Alias.Variation>_N))
                          (Sym (Control.Monad.Trans.Either.N:EitherT[0]
                                    <GHC.Types.Int>_N
                                    <Control.Monad.Trans.State.Strict.StateT
                                       Search.SearchState
                                       (Control.Monad.Trans.Reader.ReaderT
                                          Search.SearchEnvironment GHC.Types.IO)>_R
                                    <Alias.Variation>_N)))) -}
ec04bbe06df310c5f9de70dd2ed8f515
  clearVariation1 ::
    Search.SearchState
    -> Search.SearchEnvironment
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (Data.Either.Either GHC.Types.Int Alias.Variation,
           Search.SearchState) #)
  {- Arity: 3, Strictness: <L,U(U,U,U)><L,U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (s1 :: Search.SearchState)
                   (eta1 :: Search.SearchEnvironment)
                   (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ((Search.clearVariation2
                          `cast`
                        (Trans
                             (Control.Monad.Trans.Either.N:EitherT[0]
                                  <GHC.Types.Int>_N
                                  <Control.Monad.Trans.State.Strict.StateT
                                     Search.SearchState
                                     (Control.Monad.Trans.Reader.ReaderT
                                        Search.SearchEnvironment GHC.Types.IO)>_R
                                  <()>_N)
                             (Control.Monad.Trans.State.Strict.N:StateT[0]
                                  <Search.SearchState>_N
                                  <Control.Monad.Trans.Reader.ReaderT
                                     Search.SearchEnvironment GHC.Types.IO>_R
                                  <Data.Either.Either GHC.Types.Int ()>_N))
                          s1)
                         `cast`
                       (Control.Monad.Trans.Reader.N:ReaderT[0]
                            <*>_N
                            <Search.SearchEnvironment>_R
                            <GHC.Types.IO>_R
                            <(Data.Either.Either GHC.Types.Int (), Search.SearchState)>_N)
                         eta1)
                        `cast`
                      (GHC.Types.N:IO[0]
                           <(Data.Either.Either GHC.Types.Int (), Search.SearchState)>_R)
                        eta2 of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild { (,) a1 s' ->
                 case a1 of wild1 {
                   Data.Either.Left l
                   -> (# ipv,
                         (Data.Either.Left @ GHC.Types.Int @ Alias.Variation l, s') #)
                   Data.Either.Right r
                   -> (# ipv,
                         (Data.Either.Right
                            @ GHC.Types.Int
                            @ Alias.Variation
                            (case s1 of wild2 { Search.SearchState dt ds ds2 -> ds }),
                          s') #) } } }) -}
441cbab95fc670d89b605d3b971f7233
  clearVariation2 ::
    Control.Monad.Trans.Either.EitherT
      Alias.Evaluation
      (Control.Monad.Trans.State.Strict.StateT
         Search.SearchState
         (Control.Monad.Trans.Reader.ReaderT
            Search.SearchEnvironment GHC.Types.IO))
      ()
  {- Unfolding: (Control.Monad.Trans.Either.$fMonadStatesEitherT_$cstate
                   @ Search.SearchState
                   @ (Control.Monad.Trans.State.Strict.StateT
                        Search.SearchState
                        (Control.Monad.Trans.Reader.ReaderT
                           Search.SearchEnvironment GHC.Types.IO))
                   @ GHC.Types.Int
                   (Search.$s$fMonadStatesEitherT_$s$fMonadStatesStateT
                      @ Search.SearchState)
                   @ ()
                   Search.clearVariation3) -}
dc856a2cce2acbe6621618b77b0104f1
  clearVariation3 :: Search.SearchState -> ((), Search.SearchState)
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ (s1 :: Search.SearchState) ->
                 case s1 of wild { Search.SearchState dt x2 x3 ->
                 (GHC.Tuple.(),
                  Search.SearchState dt (GHC.Types.[] @ Alias.Move) x3) }) -}
2b279081d5f55b2392415f2690dde7eb
  counter :: Control.Lens.Type.Lens' Search.SearchState Alias.Counter
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S(LSS),1*U(U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ (f :: * -> *)
                   ($dFunctor :: GHC.Base.Functor f)
                   (f1 :: Alias.Counter -> f Alias.Counter)
                   (ds :: Search.SearchState) ->
                 case ds of wild { Search.SearchState dt x2 x3 ->
                 GHC.Base.fmap
                   @ f
                   $dFunctor
                   @ Alias.Counter
                   @ Search.SearchState
                   (\ (y1 :: Alias.Counter) ->
                    case y1 of dt1 { GHC.Types.I# dt2 ->
                    Search.SearchState dt2 x2 x3 })
                   (f1 (GHC.Types.I# dt)) }) -}
769821af1f2e7c023632ee1f817daf24
  cutoff ::
    GHC.Base.Monad m => e -> Control.Monad.Trans.Either.EitherT e m a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLLC(S)L),1*U(A,A,A,1*C1(U),A)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Control.Monad.Trans.Either.left -}
b644aaebef29f7658bfbc1e0bb7007df
  declare :: a -> Search.Search (GHC.IORef.IORef a)
  {- Arity: 4, HasNoCafRefs, Strictness: <L,U><L,U><L,A><S,U>,
     Unfolding: InlineRule (0, True, True)
                Search.declare1
                  `cast`
                (forall (a :: <*>_N).
                 <a>_R
                 ->_R Trans
                          (<Search.SearchState>_R
                           ->_R Trans
                                    (<Search.SearchEnvironment>_R
                                     ->_R Sym (GHC.Types.N:IO[0]
                                                   <(Data.Either.Either
                                                       GHC.Types.Int (GHC.IORef.IORef a),
                                                     Search.SearchState)>_R))
                                    (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                              <*>_N
                                              <Search.SearchEnvironment>_R
                                              <GHC.Types.IO>_R
                                              <(Data.Either.Either
                                                  GHC.Types.Int (GHC.IORef.IORef a),
                                                Search.SearchState)>_N)))
                          (Trans
                               (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                         <Search.SearchState>_N
                                         <Control.Monad.Trans.Reader.ReaderT
                                            Search.SearchEnvironment GHC.Types.IO>_R
                                         <Data.Either.Either GHC.Types.Int (GHC.IORef.IORef a)>_N))
                               (Sym (Control.Monad.Trans.Either.N:EitherT[0]
                                         <GHC.Types.Int>_N
                                         <Control.Monad.Trans.State.Strict.StateT
                                            Search.SearchState
                                            (Control.Monad.Trans.Reader.ReaderT
                                               Search.SearchEnvironment GHC.Types.IO)>_R
                                         <GHC.IORef.IORef a>_N)))) -}
8fcb53154b9039be3c5d601b04821b69
  declare1 ::
    a
    -> Search.SearchState
    -> Search.SearchEnvironment
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (Data.Either.Either GHC.Types.Int (GHC.IORef.IORef a),
           Search.SearchState) #)
  {- Arity: 4, HasNoCafRefs, Strictness: <L,U><L,U><L,A><S,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   (x :: a)
                   (eta1 :: Search.SearchState)
                   (eta2 :: Search.SearchEnvironment)
                   (eta3 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newMutVar#
                        @ a
                        @ GHC.Prim.RealWorld
                        x
                        eta3 of ds { (#,#) ipv ipv1 ->
                 (# ipv,
                    (Data.Either.Right
                       @ GHC.Types.Int
                       @ (GHC.IORef.IORef a)
                       (GHC.STRef.STRef @ GHC.Prim.RealWorld @ a ipv1)
                         `cast`
                       (Sym (GHC.IORef.N:IORef[0]) <a>_N),
                     eta1) #) }) -}
8516e6688facb8408d613be44f7277e4
  defeat :: Alias.Evaluation
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.I# -20000#) -}
a91616b2ab71c1cf4dc68a33c0bff84d
  environment ::
    Alias.TableSize -> GHC.Types.IO Search.SearchEnvironment
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Search.environment1
                  `cast`
                (<Alias.TableSize>_R
                 ->_R Sym (GHC.Types.N:IO[0] <Search.SearchEnvironment>_R)) -}
a498db51de582da9a7a3bfb0b6539430
  environment1 ::
    Alias.TableSize
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Search.SearchEnvironment #)
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Alias.TableSize)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Search.$wenvironment ww1 w1 }) -}
a7b9ada7c476f0b2a1b483789a7ef8e5
  environment2 ::
    GHC.Prim.Int#
    -> GHC.Types.IO
         (Data.Vector.Mutable.MVector
            (Control.Monad.Primitive.PrimState GHC.Types.IO) Search.HashEntry)
  {- Arity: 1, Strictness: <L,U>x -}
c311aefa254c19eb49523e5be8eb261b
  getHash ::
    BasicData.Position
    -> Search.Search (GHC.Base.Maybe Search.HashEntry)
  {- Arity: 2,
     Strictness: <L,U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,U,A)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Search.getHash1
                  `cast`
                (<BasicData.Position>_R
                 ->_R Trans
                          (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                    <Search.SearchState>_N
                                    <Control.Monad.Trans.Reader.ReaderT
                                       Search.SearchEnvironment GHC.Types.IO>_R
                                    <Data.Either.Either
                                       GHC.Types.Int (GHC.Base.Maybe Search.HashEntry)>_N))
                          (Sym (Control.Monad.Trans.Either.N:EitherT[0]
                                    <GHC.Types.Int>_N
                                    <Control.Monad.Trans.State.Strict.StateT
                                       Search.SearchState
                                       (Control.Monad.Trans.Reader.ReaderT
                                          Search.SearchEnvironment GHC.Types.IO)>_R
                                    <GHC.Base.Maybe Search.HashEntry>_N))) -}
4c433152d31b20a93c7d5346cc1297d5
  getHash1 ::
    BasicData.Position
    -> Search.SearchState
    -> Control.Monad.Trans.Reader.ReaderT
         Search.SearchEnvironment
         GHC.Types.IO
         (Data.Either.Either
            GHC.Types.Int (GHC.Base.Maybe Search.HashEntry),
          Search.SearchState)
  {- Arity: 2,
     Strictness: <L,U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,U,A)><L,U>,
     Unfolding: (\ (x :: BasicData.Position)
                   (eta1 :: Search.SearchState) ->
                 let {
                   m1 :: Control.Monad.Trans.Reader.ReaderT
                           Search.SearchEnvironment
                           GHC.Types.IO
                           (Data.Either.Either GHC.Types.Int GHC.Types.Int,
                            Search.SearchState)
                   = Search.getHash5 x eta1
                 } in
                 (\ (r1 :: Search.SearchEnvironment)
                    (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                  case (m1
                          `cast`
                        (Control.Monad.Trans.Reader.N:ReaderT[0]
                             <*>_N
                             <Search.SearchEnvironment>_R
                             <GHC.Types.IO>_R
                             <(Data.Either.Either GHC.Types.Int GHC.Types.Int,
                               Search.SearchState)>_N)
                          r1)
                         `cast`
                       (GHC.Types.N:IO[0]
                            <(Data.Either.Either GHC.Types.Int GHC.Types.Int,
                              Search.SearchState)>_R)
                         s of ds1 { (#,#) ipv ipv1 ->
                  case ipv1 of wild { (,) a1 s' ->
                  case a1 of wild1 {
                    Data.Either.Left l
                    -> (# ipv,
                          (Data.Either.Left
                             @ GHC.Types.Int
                             @ (GHC.Base.Maybe Search.HashEntry)
                             l,
                           s') #)
                    Data.Either.Right r
                    -> case ((Search.getHash3
                                `cast`
                              (Trans
                                   (Control.Monad.Trans.Either.N:EitherT[0]
                                        <GHC.Types.Int>_N
                                        <Control.Monad.Trans.State.Strict.StateT
                                           Search.SearchState
                                           (Control.Monad.Trans.Reader.ReaderT
                                              Search.SearchEnvironment GHC.Types.IO)>_R
                                        <Search.HashTable>_N)
                                   (Control.Monad.Trans.State.Strict.N:StateT[0]
                                        <Search.SearchState>_N
                                        <Control.Monad.Trans.Reader.ReaderT
                                           Search.SearchEnvironment GHC.Types.IO>_R
                                        <Data.Either.Either GHC.Types.Int Search.HashTable>_N))
                                s')
                               `cast`
                             (Control.Monad.Trans.Reader.N:ReaderT[0]
                                  <*>_N
                                  <Search.SearchEnvironment>_R
                                  <GHC.Types.IO>_R
                                  <(Data.Either.Either GHC.Types.Int Search.HashTable,
                                    Search.SearchState)>_N)
                               r1)
                              `cast`
                            (GHC.Types.N:IO[0]
                                 <(Data.Either.Either GHC.Types.Int Search.HashTable,
                                   Search.SearchState)>_R)
                              ipv of ds2 { (#,#) ipv2 ipv3 ->
                       case ipv3 of wild2 { (,) a2 s'1 ->
                       case a2 of wild3 {
                         Data.Either.Left l
                         -> (# ipv2,
                               (Data.Either.Left
                                  @ GHC.Types.Int
                                  @ (GHC.Base.Maybe Search.HashEntry)
                                  l,
                                s'1) #)
                         Data.Either.Right r2
                         -> case GHC.Prim.catch#
                                   @ (GHC.Base.Maybe Search.HashEntry)
                                   @ GHC.Exception.SomeException
                                   (GHC.Magic.lazy
                                      @ (GHC.Types.IO (GHC.Base.Maybe Search.HashEntry))
                                      (\ (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                       case r2
                                              `cast`
                                            (Data.Vector.Mutable.MVector
                                               (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0]))
                                               <Search.HashEntry>_R)_R of wild4 { Data.Vector.Mutable.MVector dt dt1 dt2 ->
                                       case r of wild5 { GHC.Types.I# y ->
                                       case (GHC.Prim.readArray#
                                               @ (Control.Monad.Primitive.PrimState GHC.Types.IO)
                                               @ Search.HashEntry
                                               dt2
                                               (GHC.Prim.+# dt y)
                                               eta2
                                                 `cast`
                                               (GHC.Prim.State#
                                                  (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R)
                                              `cast`
                                            ((#,#)
                                               <'GHC.Types.VoidRep>_R
                                               <'GHC.Types.PtrRepLifted>_R
                                               (GHC.Prim.State#
                                                  (Control.Monad.Primitive.D:R:PrimStateIO[0]))_R
                                               <Search.HashEntry>_R)_R of ds3 { (#,#) ipv4 ipv5 ->
                                       case GHC.Prim.seq#
                                              @ Search.HashEntry
                                              @ GHC.Prim.RealWorld
                                              ipv5
                                              ipv4 of ds { (#,#) ipv6 ipv7 ->
                                       (# ipv6, GHC.Base.Just @ Search.HashEntry ipv7 #) } } } })
                                        `cast`
                                      (Sym (GHC.Types.N:IO[0] <GHC.Base.Maybe Search.HashEntry>_R)))
                                     `cast`
                                   (GHC.Types.N:IO[0] <GHC.Base.Maybe Search.HashEntry>_R)
                                   Search.getHash2
                                   ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                            (# ipv4,
                               (Data.Either.Right
                                  @ GHC.Types.Int
                                  @ (GHC.Base.Maybe Search.HashEntry)
                                  (case ipv5 of wild4 {
                                     GHC.Base.Nothing -> GHC.Base.Nothing @ Search.HashEntry
                                     GHC.Base.Just x1
                                     -> case x1 of wild5 { Search.HashEntry dt dt1 dt2 ds ds4 ->
                                        case x of wild6 { BasicData.Position dt3 dt4 dt5 dt6 dt7 dt8 dt9 dt10 ds5 ds6 dt11 dt12 dt13 dt14 dt15 dt16 dt17 dt18 dt19 ds7 ->
                                        case GHC.Prim.tagToEnum#
                                               @ GHC.Types.Bool
                                               (GHC.Prim.eqWord# dt19 dt) of wild7 {
                                          GHC.Types.False -> GHC.Base.Nothing @ Search.HashEntry
                                          GHC.Types.True -> wild4 } } } }),
                                s'1) #) } } } } } } })
                   `cast`
                 (Trans
                      (<Search.SearchEnvironment>_R
                       ->_R Sym (GHC.Types.N:IO[0]
                                     <(Data.Either.Either
                                         GHC.Types.Int (GHC.Base.Maybe Search.HashEntry),
                                       Search.SearchState)>_R))
                      (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                <*>_N
                                <Search.SearchEnvironment>_R
                                <GHC.Types.IO>_R
                                <(Data.Either.Either
                                    GHC.Types.Int (GHC.Base.Maybe Search.HashEntry),
                                  Search.SearchState)>_N)))) -}
43e0060012d7efe3757500ea1941801d
  getHash2 ::
    GHC.Exception.SomeException
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          GHC.Base.Maybe Search.HashEntry #)
  {- Arity: 2,
     Unfolding: (\ (e1 :: GHC.Exception.SomeException)[OneShot]
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case e1 of wild { GHC.Exception.SomeException e0 $dException e2 ->
                 case (GHC.Exception.$p1Exception @ e0 $dException)
                        `cast`
                      (Data.Typeable.Internal.N:Typeable[0] <*>_N <e0>_N)
                        (GHC.Prim.proxy#
                           @ *
                           @ e0) of wild1 { Data.Typeable.Internal.TypeRep dt dt1 ds2 ds3 ds4 ->
                 case GHC.Exception.$fExceptionErrorCall2 of wild2 { Data.Typeable.Internal.TypeRep dt2 dt3 ds5 ds6 ds7 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.eqWord# dt dt2) of wild3 {
                   GHC.Types.False
                   -> GHC.Prim.raiseIO#
                        @ GHC.Exception.SomeException
                        @ (GHC.Base.Maybe Search.HashEntry)
                        wild
                        eta1
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.eqWord# dt1 dt3) of wild4 {
                        GHC.Types.False
                        -> GHC.Prim.raiseIO#
                             @ GHC.Exception.SomeException
                             @ (GHC.Base.Maybe Search.HashEntry)
                             wild
                             eta1
                        GHC.Types.True
                        -> case e2 of tpl { DEFAULT ->
                           (# eta1, GHC.Base.Nothing @ Search.HashEntry #) } } } } } }) -}
71434a1566c2af6c9a01ce8aa610b89d
  getHash3 ::
    Control.Monad.Trans.Either.EitherT
      GHC.Types.Int
      (Control.Monad.Trans.State.Strict.StateT
         Search.SearchState
         (Control.Monad.Trans.Reader.ReaderT
            Search.SearchEnvironment GHC.Types.IO))
      Search.HashTable
  {- Unfolding: (Control.Monad.Trans.Either.$fMonadReaderrEitherT_$creader
                   @ Search.SearchEnvironment
                   @ (Control.Monad.Trans.State.Strict.StateT
                        Search.SearchState
                        (Control.Monad.Trans.Reader.ReaderT
                           Search.SearchEnvironment GHC.Types.IO))
                   @ GHC.Types.Int
                   (Search.$s$fMonadReaderrEitherT_$s$fMonadReaderrStateT
                      @ Search.SearchState)
                   @ Search.HashTable
                   Search.getHash4) -}
1e2f4956616f9a8a278866e92c6cfa0b
  getHash4 :: Search.SearchEnvironment -> Search.HashTable
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U(U,U,U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Search.SearchEnvironment) ->
                 case ds of wild { Search.SearchEnvironment x -> x }) -}
f5c67c91b9cec2cc0e9d230c88f3cd4b
  getHash5 ::
    BasicData.Position
    -> Search.SearchState
    -> Control.Monad.Trans.Reader.ReaderT
         Search.SearchEnvironment
         GHC.Types.IO
         (Data.Either.Either GHC.Types.Int GHC.Types.Int,
          Search.SearchState)
  {- Arity: 2,
     Strictness: <L,1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,U,A)><L,U>,
     Unfolding: (\ (x :: BasicData.Position)
                   (eta1 :: Search.SearchState) ->
                 let {
                   lvl56 :: GHC.Types.Int
                   = case x of wild { BasicData.Position dt dt1 dt2 dt3 dt4 dt5 dt6 dt7 ds1 ds2 dt8 dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16 ds3 ->
                     GHC.Types.I# (GHC.Prim.word2Int# dt16) }
                 } in
                 let {
                   m1 :: Control.Monad.Trans.Reader.ReaderT
                           Search.SearchEnvironment
                           GHC.Types.IO
                           (Data.Either.Either
                              GHC.Types.Int
                              (Data.Vector.Mutable.MVector GHC.Prim.RealWorld Search.HashEntry),
                            Search.SearchState)
                   = Search.getHash3
                       `cast`
                     (Trans
                          (Control.Monad.Trans.Either.N:EitherT[0]
                               <GHC.Types.Int>_N
                               <Control.Monad.Trans.State.Strict.StateT
                                  Search.SearchState
                                  (Control.Monad.Trans.Reader.ReaderT
                                     Search.SearchEnvironment GHC.Types.IO)>_R
                               <Data.Vector.Mutable.MVector
                                  GHC.Prim.RealWorld Search.HashEntry>_N)
                          (Control.Monad.Trans.State.Strict.N:StateT[0]
                               <Search.SearchState>_N
                               <Control.Monad.Trans.Reader.ReaderT
                                  Search.SearchEnvironment GHC.Types.IO>_R
                               <Data.Either.Either
                                  GHC.Types.Int
                                  (Data.Vector.Mutable.MVector
                                     GHC.Prim.RealWorld Search.HashEntry)>_N))
                       eta1
                 } in
                 (\ (r1 :: Search.SearchEnvironment)
                    (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                  case (m1
                          `cast`
                        (Control.Monad.Trans.Reader.N:ReaderT[0]
                             <*>_N
                             <Search.SearchEnvironment>_R
                             <GHC.Types.IO>_R
                             <(Data.Either.Either
                                 GHC.Types.Int
                                 (Data.Vector.Mutable.MVector GHC.Prim.RealWorld Search.HashEntry),
                               Search.SearchState)>_N)
                          r1)
                         `cast`
                       (GHC.Types.N:IO[0]
                            <(Data.Either.Either
                                GHC.Types.Int
                                (Data.Vector.Mutable.MVector GHC.Prim.RealWorld Search.HashEntry),
                              Search.SearchState)>_R)
                         s of ds1 { (#,#) ipv ipv1 ->
                  case ipv1 of wild { (,) a1 s' ->
                  case a1 of wild1 {
                    Data.Either.Left x1
                    -> (# ipv,
                          (Data.Either.Left @ GHC.Types.Int @ GHC.Types.Int x1, s') #)
                    Data.Either.Right y
                    -> (# ipv,
                          (Data.Either.Right
                             @ GHC.Types.Int
                             @ GHC.Types.Int
                             (case y of wild2 { Data.Vector.Mutable.MVector dt dt1 dt2 ->
                              case dt1 of wild3 {
                                DEFAULT
                                -> case lvl56 of wild4 { GHC.Types.I# x1 ->
                                   case GHC.Classes.modInt# x1 wild3 of ww2 { DEFAULT ->
                                   GHC.Types.I# ww2 } }
                                -1# -> Search.getHash6
                                0# -> case GHC.Real.divZeroError ret_ty GHC.Types.Int of {} } }),
                           s') #) } } })
                   `cast`
                 (Trans
                      (<Search.SearchEnvironment>_R
                       ->_R Sym (GHC.Types.N:IO[0]
                                     <(Data.Either.Either GHC.Types.Int GHC.Types.Int,
                                       Search.SearchState)>_R))
                      (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                <*>_N
                                <Search.SearchEnvironment>_R
                                <GHC.Types.IO>_R
                                <(Data.Either.Either GHC.Types.Int GHC.Types.Int,
                                  Search.SearchState)>_N)))) -}
6f106db56f20454d6daea657afdeb96b
  getHash6 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
ec31e7d1fdc2d023daf67f9765c82064
  getKillers :: Alias.Depth -> Search.Search [Alias.Move]
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(U)><L,U(U,U,U)><L,A><S,U>,
     Unfolding: InlineRule (0, True, True)
                Search.getKillers1
                  `cast`
                (<Alias.Depth>_R
                 ->_R Trans
                          (<Search.SearchState>_R
                           ->_R Trans
                                    (<Search.SearchEnvironment>_R
                                     ->_R Sym (GHC.Types.N:IO[0]
                                                   <(Data.Either.Either GHC.Types.Int [Alias.Move],
                                                     Search.SearchState)>_R))
                                    (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                              <*>_N
                                              <Search.SearchEnvironment>_R
                                              <GHC.Types.IO>_R
                                              <(Data.Either.Either GHC.Types.Int [Alias.Move],
                                                Search.SearchState)>_N)))
                          (Trans
                               (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                         <Search.SearchState>_N
                                         <Control.Monad.Trans.Reader.ReaderT
                                            Search.SearchEnvironment GHC.Types.IO>_R
                                         <Data.Either.Either GHC.Types.Int [Alias.Move]>_N))
                               (Sym (Control.Monad.Trans.Either.N:EitherT[0]
                                         <GHC.Types.Int>_N
                                         <Control.Monad.Trans.State.Strict.StateT
                                            Search.SearchState
                                            (Control.Monad.Trans.Reader.ReaderT
                                               Search.SearchEnvironment GHC.Types.IO)>_R
                                         <[Alias.Move]>_N)))) -}
4f1c0cad14de192471ab2b2756a235a8
  getKillers1 ::
    Alias.Depth
    -> Search.SearchState
    -> Search.SearchEnvironment
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (Data.Either.Either GHC.Types.Int [Alias.Move],
           Search.SearchState) #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(U)><L,U(U,U,U)><L,A><S,U>,
     Unfolding: InlineRule (4, True, False)
                (\ (n :: Alias.Depth)
                   (eta1 :: Search.SearchState)
                   (eta2 :: Search.SearchEnvironment)
                   (eta3 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (# eta3,
                    (Data.Either.Right
                       @ GHC.Types.Int
                       @ [Alias.Move]
                       (case eta1 of wild { Search.SearchState dt ds ds1 ->
                        case n of ww { GHC.Types.I# ww1 ->
                        case Data.IntMap.Base.$wlookup @ [Alias.Move] ww1 ds1 of wild1 {
                          GHC.Base.Nothing -> GHC.Types.[] @ Alias.Move
                          GHC.Base.Just v -> v } } }),
                     eta1) #)) -}
a2ad80a67f5dccd51b138f47cd497367
  getSelectedMove :: Search.Search (GHC.Base.Maybe Alias.Move)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U(U,U,U)><L,A><S,U>,
     Unfolding: InlineRule (0, True, True)
                Search.getSelectedMove1
                  `cast`
                (Trans
                     (<Search.SearchState>_R
                      ->_R Trans
                               (<Search.SearchEnvironment>_R
                                ->_R Sym (GHC.Types.N:IO[0]
                                              <(Data.Either.Either
                                                  GHC.Types.Int (GHC.Base.Maybe Alias.Move),
                                                Search.SearchState)>_R))
                               (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                         <*>_N
                                         <Search.SearchEnvironment>_R
                                         <GHC.Types.IO>_R
                                         <(Data.Either.Either
                                             GHC.Types.Int (GHC.Base.Maybe Alias.Move),
                                           Search.SearchState)>_N)))
                     (Trans
                          (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                    <Search.SearchState>_N
                                    <Control.Monad.Trans.Reader.ReaderT
                                       Search.SearchEnvironment GHC.Types.IO>_R
                                    <Data.Either.Either
                                       GHC.Types.Int (GHC.Base.Maybe Alias.Move)>_N))
                          (Sym (Control.Monad.Trans.Either.N:EitherT[0]
                                    <GHC.Types.Int>_N
                                    <Control.Monad.Trans.State.Strict.StateT
                                       Search.SearchState
                                       (Control.Monad.Trans.Reader.ReaderT
                                          Search.SearchEnvironment GHC.Types.IO)>_R
                                    <GHC.Base.Maybe Alias.Move>_N)))) -}
c7efbcf55ff072cb9ce017f0a6d1a6a3
  getSelectedMove1 ::
    Search.SearchState
    -> Search.SearchEnvironment
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (Data.Either.Either GHC.Types.Int (GHC.Base.Maybe Alias.Move),
           Search.SearchState) #)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U(U,U,U)><L,A><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (s1 :: Search.SearchState)
                   (eta1 :: Search.SearchEnvironment)
                   (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (# eta2,
                    (Data.Either.Right
                       @ GHC.Types.Int
                       @ (GHC.Base.Maybe Alias.Move)
                       (case s1 of wild { Search.SearchState dt ds ds1 ->
                        case ds of wild1 {
                          [] -> GHC.Base.Nothing @ Alias.Move
                          : a1 ds2 -> GHC.Base.Just @ Alias.Move a1 } }),
                     s1) #)) -}
f90da9e077b805d955c196dbec9788cd
  getVariation :: Search.Search Alias.Variation
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U(U,U,U)><L,A><S,U>,
     Unfolding: InlineRule (0, True, True)
                Search.getVariation1
                  `cast`
                (Trans
                     (<Search.SearchState>_R
                      ->_R Trans
                               (<Search.SearchEnvironment>_R
                                ->_R Sym (GHC.Types.N:IO[0]
                                              <(Data.Either.Either GHC.Types.Int Alias.Variation,
                                                Search.SearchState)>_R))
                               (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                         <*>_N
                                         <Search.SearchEnvironment>_R
                                         <GHC.Types.IO>_R
                                         <(Data.Either.Either GHC.Types.Int Alias.Variation,
                                           Search.SearchState)>_N)))
                     (Trans
                          (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                    <Search.SearchState>_N
                                    <Control.Monad.Trans.Reader.ReaderT
                                       Search.SearchEnvironment GHC.Types.IO>_R
                                    <Data.Either.Either GHC.Types.Int Alias.Variation>_N))
                          (Sym (Control.Monad.Trans.Either.N:EitherT[0]
                                    <GHC.Types.Int>_N
                                    <Control.Monad.Trans.State.Strict.StateT
                                       Search.SearchState
                                       (Control.Monad.Trans.Reader.ReaderT
                                          Search.SearchEnvironment GHC.Types.IO)>_R
                                    <Alias.Variation>_N)))) -}
5ef11f8c75a7645a0d4163bca56ea69e
  getVariation1 ::
    Search.SearchState
    -> Search.SearchEnvironment
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (Data.Either.Either GHC.Types.Int Alias.Variation,
           Search.SearchState) #)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U(U,U,U)><L,A><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (s1 :: Search.SearchState)
                   (eta1 :: Search.SearchEnvironment)
                   (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (# eta2,
                    (Data.Either.Right
                       @ GHC.Types.Int
                       @ Alias.Variation
                       (case s1 of wild { Search.SearchState dt ds ds1 -> ds }),
                     s1) #)) -}
1852af05e99ea6d2e9cffaf39822978c
  iddfs ::
    Alias.Depth
    -> GHC.Base.Maybe
         (GHC.Conc.Sync.TVar (Alias.Evaluation, Search.SearchState))
    -> BasicData.Position
    -> Search.Search Alias.Evaluation
  {- Arity: 3,
     Strictness: <L,A><L,U><L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: Alias.Depth)
                   (w1 :: GHC.Base.Maybe
                            (GHC.Conc.Sync.TVar (Alias.Evaluation, Search.SearchState)))
                   (w2 :: BasicData.Position) ->
                 Search.$widdfs w1 w2) -}
92f7997c5251262c8921ef87f83e4d87
  indexPos :: BasicData.Position -> Search.Search GHC.Types.Int
  {- Arity: 2,
     Strictness: <L,1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,U,A)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Search.getHash5
                  `cast`
                (<BasicData.Position>_R
                 ->_R Trans
                          (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                    <Search.SearchState>_N
                                    <Control.Monad.Trans.Reader.ReaderT
                                       Search.SearchEnvironment GHC.Types.IO>_R
                                    <Data.Either.Either GHC.Types.Int GHC.Types.Int>_N))
                          (Sym (Control.Monad.Trans.Either.N:EitherT[0]
                                    <GHC.Types.Int>_N
                                    <Control.Monad.Trans.State.Strict.StateT
                                       Search.SearchState
                                       (Control.Monad.Trans.Reader.ReaderT
                                          Search.SearchEnvironment GHC.Types.IO)>_R
                                    <GHC.Types.Int>_N))) -}
3f20a6c3a7724491369d15d9479c3622
  initSearchState :: Search.SearchState
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Search.SearchState
                   0#
                   (GHC.Types.[] @ Alias.Move)
                   (Data.IntMap.Base.Nil @ Alias.Killers)) -}
70d5507731aa404d3feb8bd93812143d
  killers ::
    Control.Lens.Type.Lens'
      Search.SearchState (Data.IntMap.Base.IntMap Alias.Killers)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S(LSS),1*U(U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ (f :: * -> *)
                   ($dFunctor :: GHC.Base.Functor f)
                   (f1 :: Data.IntMap.Base.IntMap Alias.Killers
                          -> f (Data.IntMap.Base.IntMap Alias.Killers))
                   (ds :: Search.SearchState) ->
                 case ds of wild { Search.SearchState dt x2 x3 ->
                 GHC.Base.fmap
                   @ f
                   $dFunctor
                   @ (Data.IntMap.Base.IntMap Alias.Killers)
                   @ Search.SearchState
                   (\ (y1 :: Data.IntMap.Base.IntMap Alias.Killers) ->
                    case y1 of dt1 { DEFAULT -> Search.SearchState dt x2 dt1 })
                   (f1 x3) }) -}
21d14568195580e8a5be6872f1d1b4a6
  lookupTT ::
    Search.HashTable
    -> GHC.Types.Int -> Search.Search (GHC.Base.Maybe Search.HashEntry)
  {- Arity: 5, Strictness: <L,U(U,A,U)><L,U(U)><L,U><L,A><S,U>,
     Unfolding: InlineRule (0, True, True)
                Search.lookupTT1
                  `cast`
                (<Search.HashTable>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Trans
                          (<Search.SearchState>_R
                           ->_R Trans
                                    (<Search.SearchEnvironment>_R
                                     ->_R Sym (GHC.Types.N:IO[0]
                                                   <(Data.Either.Either
                                                       GHC.Types.Int
                                                       (GHC.Base.Maybe Search.HashEntry),
                                                     Search.SearchState)>_R))
                                    (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                              <*>_N
                                              <Search.SearchEnvironment>_R
                                              <GHC.Types.IO>_R
                                              <(Data.Either.Either
                                                  GHC.Types.Int (GHC.Base.Maybe Search.HashEntry),
                                                Search.SearchState)>_N)))
                          (Trans
                               (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                         <Search.SearchState>_N
                                         <Control.Monad.Trans.Reader.ReaderT
                                            Search.SearchEnvironment GHC.Types.IO>_R
                                         <Data.Either.Either
                                            GHC.Types.Int (GHC.Base.Maybe Search.HashEntry)>_N))
                               (Sym (Control.Monad.Trans.Either.N:EitherT[0]
                                         <GHC.Types.Int>_N
                                         <Control.Monad.Trans.State.Strict.StateT
                                            Search.SearchState
                                            (Control.Monad.Trans.Reader.ReaderT
                                               Search.SearchEnvironment GHC.Types.IO)>_R
                                         <GHC.Base.Maybe Search.HashEntry>_N)))) -}
bae99368300a021971cca3f78745b9da
  lookupTT1 ::
    Search.HashTable
    -> GHC.Types.Int
    -> Search.SearchState
    -> Search.SearchEnvironment
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (Data.Either.Either
             GHC.Types.Int (GHC.Base.Maybe Search.HashEntry),
           Search.SearchState) #)
  {- Arity: 5, Strictness: <L,U(U,A,U)><L,U(U)><L,U><L,A><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, True)
                (\ (w :: Search.HashTable)
                   (w1 :: GHC.Types.Int)
                   (w2 :: Search.SearchState)
                   (w3 :: Search.SearchEnvironment)
                   (w4 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Search.$wlookupTT w w1 w2 w4) -}
975a713f223a5f19a732ff01dd5c1b5f
  maxEval :: Alias.Evaluation
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.I# 1000000#) -}
224ce24e19dd8ed312260efca5d933a8
  minEval :: Alias.Evaluation
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.I# -1000000#) -}
5ef48067571eb3e99e6d72374c1136d5
  mtdf ::
    Alias.Depth
    -> Alias.Evaluation
    -> BasicData.Position
    -> Search.Search Alias.Evaluation
  {- Arity: 3,
     Strictness: <L,U(U)><L,U(U)><L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)> -}
d6e39bf812f0b8ab3e74968d09e2f573
  negaScout ::
    Alias.Depth
    -> Alias.Alpha
    -> Alias.Beta
    -> GHC.Types.Bool
    -> GHC.Types.Bool
    -> BasicData.Position
    -> Search.Search Alias.Evaluation
  {- Arity: 6,
     Strictness: <L,U(U)><L,U(U)><L,U(U)><L,U><L,U><L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)> -}
32455973c50f9822173e2fd4b1d4dde3
  posId :: Search.HashEntry -> Alias.ZobristKey
  RecSel Left Search.HashEntry
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLLLL),1*U(U,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Search.HashEntry) ->
                 case ds of wild { Search.HashEntry dt dt1 dt2 ds1 ds2 ->
                 GHC.Word.W64# dt }) -}
fe5eef1a7dd60e0002cc3c763e11c9ea
  priority :: Search.HashEntry -> Alias.Depth
  RecSel Left Search.HashEntry
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSLLL),1*U(A,U,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Search.HashEntry) ->
                 case ds of wild { Search.HashEntry dt dt1 dt2 ds1 ds2 ->
                 GHC.Types.I# dt1 }) -}
341eb5b84f6844d3f599d9f3bcf67dfb
  putHash ::
    BasicData.Position
    -> GHC.Base.Maybe Search.HashEntry
    -> Search.HashEntry
    -> Search.Search ()
  {- Arity: 4,
     Strictness: <L,1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,U,A)><L,1*U><L,1*U(U,U,U,U,U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Search.putHash1
                  `cast`
                (<BasicData.Position>_R
                 ->_R <GHC.Base.Maybe Search.HashEntry>_R
                 ->_R <Search.HashEntry>_R
                 ->_R Trans
                          (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                    <Search.SearchState>_N
                                    <Control.Monad.Trans.Reader.ReaderT
                                       Search.SearchEnvironment GHC.Types.IO>_R
                                    <Data.Either.Either GHC.Types.Int ()>_N))
                          (Sym (Control.Monad.Trans.Either.N:EitherT[0]
                                    <GHC.Types.Int>_N
                                    <Control.Monad.Trans.State.Strict.StateT
                                       Search.SearchState
                                       (Control.Monad.Trans.Reader.ReaderT
                                          Search.SearchEnvironment GHC.Types.IO)>_R
                                    <()>_N))) -}
45afe2dbb678c2058aadfa06147d014f
  putHash1 ::
    BasicData.Position
    -> GHC.Base.Maybe Search.HashEntry
    -> Search.HashEntry
    -> Search.SearchState
    -> Control.Monad.Trans.Reader.ReaderT
         Search.SearchEnvironment
         GHC.Types.IO
         (Data.Either.Either GHC.Types.Int (), Search.SearchState)
  {- Arity: 4,
     Strictness: <L,1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,U,A)><L,1*U><L,1*U(U,U,U,U,U)><L,U>,
     Unfolding: (\ (x :: BasicData.Position)
                   (y :: GHC.Base.Maybe Search.HashEntry)
                   (z :: Search.HashEntry)
                   (eta1 :: Search.SearchState) ->
                 let {
                   e :: Search.HashEntry
                   = case y of wild {
                       GHC.Base.Nothing -> z
                       GHC.Base.Just x1
                       -> case z of wild1 { Search.HashEntry dt dt1 dt2 ds ds1 ->
                          case x1 of wild2 { Search.HashEntry dt3 dt4 dt5 ds2 ds3 ->
                          case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.>=# dt1 dt4) of wild3 {
                            GHC.Types.False -> wild2 GHC.Types.True -> wild1 } } } }
                 } in
                 let {
                   m1 :: Control.Monad.Trans.Reader.ReaderT
                           Search.SearchEnvironment
                           GHC.Types.IO
                           (Data.Either.Either GHC.Types.Int GHC.Types.Int,
                            Search.SearchState)
                   = Search.getHash5 x eta1
                 } in
                 (\ (r1 :: Search.SearchEnvironment)
                    (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                  case (m1
                          `cast`
                        (Control.Monad.Trans.Reader.N:ReaderT[0]
                             <*>_N
                             <Search.SearchEnvironment>_R
                             <GHC.Types.IO>_R
                             <(Data.Either.Either GHC.Types.Int GHC.Types.Int,
                               Search.SearchState)>_N)
                          r1)
                         `cast`
                       (GHC.Types.N:IO[0]
                            <(Data.Either.Either GHC.Types.Int GHC.Types.Int,
                              Search.SearchState)>_R)
                         s of ds1 { (#,#) ipv ipv1 ->
                  case ipv1 of wild { (,) a1 s' ->
                  case a1 of wild1 {
                    Data.Either.Left l
                    -> (# ipv, (Data.Either.Left @ GHC.Types.Int @ () l, s') #)
                    Data.Either.Right r
                    -> case ((Search.getHash3
                                `cast`
                              (Trans
                                   (Control.Monad.Trans.Either.N:EitherT[0]
                                        <GHC.Types.Int>_N
                                        <Control.Monad.Trans.State.Strict.StateT
                                           Search.SearchState
                                           (Control.Monad.Trans.Reader.ReaderT
                                              Search.SearchEnvironment GHC.Types.IO)>_R
                                        <Search.HashTable>_N)
                                   (Control.Monad.Trans.State.Strict.N:StateT[0]
                                        <Search.SearchState>_N
                                        <Control.Monad.Trans.Reader.ReaderT
                                           Search.SearchEnvironment GHC.Types.IO>_R
                                        <Data.Either.Either GHC.Types.Int Search.HashTable>_N))
                                s')
                               `cast`
                             (Control.Monad.Trans.Reader.N:ReaderT[0]
                                  <*>_N
                                  <Search.SearchEnvironment>_R
                                  <GHC.Types.IO>_R
                                  <(Data.Either.Either GHC.Types.Int Search.HashTable,
                                    Search.SearchState)>_N)
                               r1)
                              `cast`
                            (GHC.Types.N:IO[0]
                                 <(Data.Either.Either GHC.Types.Int Search.HashTable,
                                   Search.SearchState)>_R)
                              ipv of ds2 { (#,#) ipv2 ipv3 ->
                       case ipv3 of wild2 { (,) a2 s'1 ->
                       case a2 of wild3 {
                         Data.Either.Left l
                         -> (# ipv2, (Data.Either.Left @ GHC.Types.Int @ () l, s'1) #)
                         Data.Either.Right r2
                         -> case r2
                                   `cast`
                                 (Data.Vector.Mutable.MVector
                                    (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0]))
                                    <Search.HashEntry>_R)_R of wild4 { Data.Vector.Mutable.MVector dt dt1 dt2 ->
                            case r of wild5 { GHC.Types.I# y1 ->
                            case GHC.Prim.writeArray#
                                   @ (Control.Monad.Primitive.PrimState GHC.Types.IO)
                                   @ Search.HashEntry
                                   dt2
                                   (GHC.Prim.+# dt y1)
                                   e
                                   ipv2
                                     `cast`
                                   (GHC.Prim.State#
                                      (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R of s'# { DEFAULT ->
                            (# s'#
                                 `cast`
                               (GHC.Prim.State# (Control.Monad.Primitive.D:R:PrimStateIO[0]))_R,
                               (Search.$sunless2, s'1) #) } } } } } } } } })
                   `cast`
                 (Trans
                      (<Search.SearchEnvironment>_R
                       ->_R Sym (GHC.Types.N:IO[0]
                                     <(Data.Either.Either GHC.Types.Int (), Search.SearchState)>_R))
                      (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                <*>_N
                                <Search.SearchEnvironment>_R
                                <GHC.Types.IO>_R
                                <(Data.Either.Either GHC.Types.Int (),
                                  Search.SearchState)>_N)))) -}
cbaa6bc8cea9bc9e9f143f9c647f7e1f
  putKiller ::
    Alias.Depth -> Alias.Move -> BasicData.Position -> Search.Search ()
  {- Arity: 3,
     Strictness: <L,U(U)><S(S),1*U(U)><L,1*U(U,U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Alias.Depth)
                   (w1 :: Alias.Move)
                   (w2 :: BasicData.Position) ->
                 case w1 of ww { GHC.Word.W16# ww1 ->
                 Search.$wputKiller w ww1 w2 }) -}
80890d6ccb276111c66fa50b65e25e52
  putKiller1 :: GHC.Base.Maybe [Alias.Move]
  {- Strictness: x -}
ae86cc37c72a79aca491bd5e60930948
  putKiller2 ::
    Search.SearchState
    -> Search.SearchEnvironment
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (Data.Either.Either GHC.Types.Int (), Search.SearchState) #)
  {- Arity: 3, HasNoCafRefs,
     Unfolding: (\ (eta1 :: Search.SearchState)
                   (eta2 :: Search.SearchEnvironment)
                   (eta3 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (# eta3, (Search.$sunless2, eta1) #)) -}
657d251ba7fcd3e6e4b6e46b59b5a176
  putMove :: Alias.Move -> Search.Search ()
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Alias.Move) ->
                 Control.Monad.Trans.Either.$fMonadStatesEitherT_$cstate
                   @ Search.SearchState
                   @ (Control.Monad.Trans.State.Strict.StateT
                        Search.SearchState
                        (Control.Monad.Trans.Reader.ReaderT
                           Search.SearchEnvironment GHC.Types.IO))
                   @ GHC.Types.Int
                   (Search.$s$fMonadStatesEitherT_$s$fMonadStatesStateT
                      @ Search.SearchState)
                   @ ()
                   (\ (s1 :: Search.SearchState) ->
                    case s1 of wild { Search.SearchState dt x2 x3 ->
                    (GHC.Tuple.(),
                     Search.SearchState dt (GHC.Types.: @ Alias.Move x x2) x3) })) -}
dad69c7c1673d5c5839d39b28f39fa2b
  quiescence ::
    Alias.Alpha
    -> Alias.Beta
    -> BasicData.Position
    -> Search.Search Alias.Evaluation
  {- Arity: 3,
     Strictness: <L,U(U)><L,U(U)><L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)> -}
f1a65659422d2897fcc8cf4d159da5b9
  refer :: GHC.IORef.IORef a -> Search.Search a
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><L,U><L,A><S,U>,
     Unfolding: InlineRule (0, True, True)
                Search.refer1
                  `cast`
                (forall (a :: <*>_N).
                 <GHC.IORef.IORef a>_R
                 ->_R Trans
                          (<Search.SearchState>_R
                           ->_R Trans
                                    (<Search.SearchEnvironment>_R
                                     ->_R Sym (GHC.Types.N:IO[0]
                                                   <(Data.Either.Either GHC.Types.Int a,
                                                     Search.SearchState)>_R))
                                    (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                              <*>_N
                                              <Search.SearchEnvironment>_R
                                              <GHC.Types.IO>_R
                                              <(Data.Either.Either GHC.Types.Int a,
                                                Search.SearchState)>_N)))
                          (Trans
                               (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                         <Search.SearchState>_N
                                         <Control.Monad.Trans.Reader.ReaderT
                                            Search.SearchEnvironment GHC.Types.IO>_R
                                         <Data.Either.Either GHC.Types.Int a>_N))
                               (Sym (Control.Monad.Trans.Either.N:EitherT[0]
                                         <GHC.Types.Int>_N
                                         <Control.Monad.Trans.State.Strict.StateT
                                            Search.SearchState
                                            (Control.Monad.Trans.Reader.ReaderT
                                               Search.SearchEnvironment GHC.Types.IO)>_R
                                         <a>_N)))) -}
caa5bc139fb5abe40e2ff85b26a9db14
  refer1 ::
    GHC.IORef.IORef a
    -> Search.SearchState
    -> Search.SearchEnvironment
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (Data.Either.Either GHC.Types.Int a, Search.SearchState) #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><L,U><L,A><S,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   (x :: GHC.IORef.IORef a)
                   (eta1 :: Search.SearchState)
                   (eta2 :: Search.SearchEnvironment)
                   (eta3 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case x `cast`
                      (GHC.IORef.N:IORef[0] <a>_N) of wild { GHC.STRef.STRef var# ->
                 case GHC.Prim.readMutVar#
                        @ GHC.Prim.RealWorld
                        @ a
                        var#
                        eta3 of ds1 { (#,#) ipv ipv1 ->
                 (# ipv,
                    (Data.Either.Right @ GHC.Types.Int @ a ipv1, eta1) #) } }) -}
7339499f94e440b09863220b436b5654
  refutation :: Search.HashEntry -> GHC.Base.Maybe Alias.Move
  RecSel Left Search.HashEntry
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLLLS),1*U(A,A,A,A,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Search.HashEntry) ->
                 case ds of wild { Search.HashEntry dt dt1 dt2 ds1 ds2 -> ds2 }) -}
d79b5d3f4a11eb7e2f2524e4118376f1
  samePos :: BasicData.Position -> Search.HashEntry -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLLLLLLSL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,U,A)><S(SLLLL),1*U(U,A,A,A,A)>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: BasicData.Position) (y :: Search.HashEntry) ->
                 case y of wild { Search.HashEntry dt dt1 dt2 ds ds1 ->
                 case x of wild1 { BasicData.Position dt3 dt4 dt5 dt6 dt7 dt8 dt9 dt10 ds2 ds3 dt11 dt12 dt13 dt14 dt15 dt16 dt17 dt18 dt19 ds4 ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.eqWord# dt19 dt) } }) -}
fc847fca42fd7f2ff5d980e44a7264e7
  say :: GHC.Base.String -> Search.Search ()
  {- Arity: 4, Strictness: <L,1*U><L,U><L,A><S,U>,
     Unfolding: InlineRule (0, True, True)
                Search.say1
                  `cast`
                (<GHC.Base.String>_R
                 ->_R Trans
                          (<Search.SearchState>_R
                           ->_R Trans
                                    (<Search.SearchEnvironment>_R
                                     ->_R Sym (GHC.Types.N:IO[0]
                                                   <(Data.Either.Either GHC.Types.Int (),
                                                     Search.SearchState)>_R))
                                    (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                              <*>_N
                                              <Search.SearchEnvironment>_R
                                              <GHC.Types.IO>_R
                                              <(Data.Either.Either GHC.Types.Int (),
                                                Search.SearchState)>_N)))
                          (Trans
                               (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                         <Search.SearchState>_N
                                         <Control.Monad.Trans.Reader.ReaderT
                                            Search.SearchEnvironment GHC.Types.IO>_R
                                         <Data.Either.Either GHC.Types.Int ()>_N))
                               (Sym (Control.Monad.Trans.Either.N:EitherT[0]
                                         <GHC.Types.Int>_N
                                         <Control.Monad.Trans.State.Strict.StateT
                                            Search.SearchState
                                            (Control.Monad.Trans.Reader.ReaderT
                                               Search.SearchEnvironment GHC.Types.IO)>_R
                                         <()>_N)))) -}
bf62f6dd50efde395ab7333c61c978b4
  say1 ::
    GHC.Base.String
    -> Search.SearchState
    -> Search.SearchEnvironment
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (Data.Either.Either GHC.Types.Int (), Search.SearchState) #)
  {- Arity: 4, Strictness: <L,1*U><L,U><L,A><S,U>,
     Unfolding: InlineRule (4, True, False)
                (\ (x :: GHC.Base.String)
                   (eta1 :: Search.SearchState)
                   (eta2 :: Search.SearchEnvironment)
                   (eta3 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        x
                        GHC.Types.True
                        eta3 of ds1 { (#,#) ipv ipv1 ->
                 (# ipv,
                    (Data.Either.Right @ GHC.Types.Int @ () ipv1, eta1) #) }) -}
527b7a7d86f659f3b7f629be78a3cdca
  score :: Search.HashEntry -> Alias.Evaluation
  RecSel Left Search.HashEntry
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLSLL),1*U(A,A,U,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Search.HashEntry) ->
                 case ds of wild { Search.HashEntry dt dt1 dt2 ds1 ds2 ->
                 GHC.Types.I# dt2 }) -}
fbb4322db6f27d353551b63e43ac3731
  scoreType :: Search.HashEntry -> BasicData.ScoreType
  RecSel Left Search.HashEntry
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLLSL),1*U(A,A,A,U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Search.HashEntry) ->
                 case ds of wild { Search.HashEntry dt dt1 dt2 ds1 ds2 -> ds1 }) -}
8a831325dc221b7e4f04be1b3220de4c
  search ::
    Search.Search Alias.Evaluation
    -> Search.SearchEnvironment
    -> GHC.Types.IO (Alias.Evaluation, Search.SearchState)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,1*C1(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Search.Search Alias.Evaluation) ->
                 let {
                   eta1 :: Control.Monad.Trans.Reader.ReaderT
                             Search.SearchEnvironment
                             GHC.Types.IO
                             (Data.Either.Either Alias.Evaluation Alias.Evaluation,
                              Search.SearchState)
                   = x `cast`
                     (Trans
                          (Control.Monad.Trans.Either.N:EitherT[0]
                               <Alias.Evaluation>_N
                               <Control.Monad.Trans.State.Strict.StateT
                                  Search.SearchState
                                  (Control.Monad.Trans.Reader.ReaderT
                                     Search.SearchEnvironment GHC.Types.IO)>_R
                               <Alias.Evaluation>_N)
                          (Control.Monad.Trans.State.Strict.N:StateT[0]
                               <Search.SearchState>_N
                               <Control.Monad.Trans.Reader.ReaderT
                                  Search.SearchEnvironment GHC.Types.IO>_R
                               <Data.Either.Either Alias.Evaluation Alias.Evaluation>_N))
                       Search.initSearchState
                 } in
                 (\ (eta2 :: Search.SearchEnvironment)
                    (eta3 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                  case (eta1
                          `cast`
                        (Control.Monad.Trans.Reader.N:ReaderT[0]
                             <*>_N
                             <Search.SearchEnvironment>_R
                             <GHC.Types.IO>_R
                             <(Data.Either.Either Alias.Evaluation Alias.Evaluation,
                               Search.SearchState)>_N)
                          eta2)
                         `cast`
                       (GHC.Types.N:IO[0]
                            <(Data.Either.Either Alias.Evaluation Alias.Evaluation,
                              Search.SearchState)>_R)
                         eta3 of ds { (#,#) ipv ipv1 ->
                  (# ipv,
                     case ipv1 of wild { (,) a1 s' ->
                     (case a1 of wild1 {
                        Data.Either.Left x1 -> x1 Data.Either.Right y -> y },
                      s') } #) })
                   `cast`
                 (<Search.SearchEnvironment>_R
                  ->_R Sym (GHC.Types.N:IO[0]
                                <(Alias.Evaluation, Search.SearchState)>_R))) -}
3a7c01d872baf4976bc882028eba56a3
  setVariation :: Alias.Variation -> Search.Search ()
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (xs :: Alias.Variation) ->
                 Control.Monad.Trans.Either.$fMonadStatesEitherT_$cstate
                   @ Search.SearchState
                   @ (Control.Monad.Trans.State.Strict.StateT
                        Search.SearchState
                        (Control.Monad.Trans.Reader.ReaderT
                           Search.SearchEnvironment GHC.Types.IO))
                   @ GHC.Types.Int
                   (Search.$s$fMonadStatesEitherT_$s$fMonadStatesStateT
                      @ Search.SearchState)
                   @ ()
                   (\ (s1 :: Search.SearchState) ->
                    case s1 of wild { Search.SearchState dt x2 x3 ->
                    case xs of dt1 { DEFAULT ->
                    (GHC.Tuple.(), Search.SearchState dt dt1 x3) } })) -}
a86094c036fa077710595ba526f066d2
  table ::
    Control.Lens.Type.Iso' Search.SearchEnvironment Search.HashTable
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(C(C(S))LLLL),1*U(1*C1(C1(U)),A,A,A,A)><L,1*U(1*C1(U),A)>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (2, False, False)
                (\ @ (p :: * -> * -> *)
                   @ (f :: * -> *)
                   ($dProfunctor :: Data.Profunctor.Unsafe.Profunctor p)
                   ($dFunctor :: GHC.Base.Functor f) ->
                 Data.Profunctor.Unsafe.dimap
                   @ p
                   $dProfunctor
                   @ Search.SearchEnvironment
                   @ Search.HashTable
                   @ (f Search.HashTable)
                   @ (f Search.SearchEnvironment)
                   (\ (ds :: Search.SearchEnvironment) ->
                    case ds of wild { Search.SearchEnvironment x -> x })
                   (GHC.Base.fmap
                      @ f
                      $dFunctor
                      @ Search.HashTable
                      @ Search.SearchEnvironment
                      Search.$WSearchEnvironment)) -}
0fb7697fa4db521764499075de544ace
  tickCounter :: Search.Search ()
  {- Unfolding: (Control.Monad.Trans.Either.$fMonadStatesEitherT_$cstate
                   @ Search.SearchState
                   @ (Control.Monad.Trans.State.Strict.StateT
                        Search.SearchState
                        (Control.Monad.Trans.Reader.ReaderT
                           Search.SearchEnvironment GHC.Types.IO))
                   @ GHC.Types.Int
                   (Search.$s$fMonadStatesEitherT_$s$fMonadStatesStateT
                      @ Search.SearchState)
                   @ ()
                   Search.tickCounter1) -}
ce762f70c862113cec541de44c98f672
  tickCounter1 :: Search.SearchState -> ((), Search.SearchState)
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ (s1 :: Search.SearchState) ->
                 case s1 of wild { Search.SearchState dt x2 x3 ->
                 (GHC.Tuple.(), Search.SearchState (GHC.Prim.+# dt 1#) x2 x3) }) -}
a3ae153c1c8d767680cc0e5d39d0ffae
  uciInfo ::
    Alias.Depth
    -> Alias.Evaluation -> BasicData.Position -> Search.Search ()
  {- Arity: 6,
     Strictness: <L,1*U(U)><L,1*U(U)><L,1*U(A,A,A,A,A,A,A,A,A,A,A,A,U,A,A,A,A,A,A,A)><S(LSS),1*U(U,U,U)><L,A><S,U>,
     Unfolding: InlineRule (0, True, True)
                Search.uciInfo1
                  `cast`
                (<Alias.Depth>_R
                 ->_R <Alias.Evaluation>_R
                 ->_R <BasicData.Position>_R
                 ->_R Trans
                          (<Search.SearchState>_R
                           ->_R Trans
                                    (<Search.SearchEnvironment>_R
                                     ->_R Sym (GHC.Types.N:IO[0]
                                                   <(Data.Either.Either GHC.Types.Int (),
                                                     Search.SearchState)>_R))
                                    (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                              <*>_N
                                              <Search.SearchEnvironment>_R
                                              <GHC.Types.IO>_R
                                              <(Data.Either.Either GHC.Types.Int (),
                                                Search.SearchState)>_N)))
                          (Trans
                               (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                         <Search.SearchState>_N
                                         <Control.Monad.Trans.Reader.ReaderT
                                            Search.SearchEnvironment GHC.Types.IO>_R
                                         <Data.Either.Either GHC.Types.Int ()>_N))
                               (Sym (Control.Monad.Trans.Either.N:EitherT[0]
                                         <GHC.Types.Int>_N
                                         <Control.Monad.Trans.State.Strict.StateT
                                            Search.SearchState
                                            (Control.Monad.Trans.Reader.ReaderT
                                               Search.SearchEnvironment GHC.Types.IO)>_R
                                         <()>_N)))) -}
308db98d96414892012b253bb10985ef
  uciInfo1 ::
    Alias.Depth
    -> Alias.Evaluation
    -> BasicData.Position
    -> Search.SearchState
    -> Search.SearchEnvironment
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (Data.Either.Either GHC.Types.Int (), Search.SearchState) #)
  {- Arity: 6,
     Strictness: <L,1*U(U)><L,1*U(U)><L,1*U(A,A,A,A,A,A,A,A,A,A,A,A,U,A,A,A,A,A,A,A)><S(LSS),1*U(U,U,U)><L,A><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, False)
                (\ (w :: Alias.Depth)
                   (w1 :: Alias.Evaluation)
                   (w2 :: BasicData.Position)
                   (w3 :: Search.SearchState)
                   (w4 :: Search.SearchEnvironment)
                   (w5 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w3 of ww { Search.SearchState ww1 ww2 ww3 ->
                 Search.$wuciInfo w w1 w2 ww1 ww2 ww3 w5 }) -}
067c0d99a52edd698a310b5cf22e7f45
  updateBounds ::
    Alias.Depth
    -> Alias.Alpha
    -> Alias.Beta
    -> GHC.Base.Maybe Search.HashEntry
    -> (Alias.Alpha, Alias.Beta)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(U)><L,U(U)><L,U(U)><S,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: Alias.Depth)
                   (w1 :: Alias.Alpha)
                   (w2 :: Alias.Beta)
                   (w3 :: GHC.Base.Maybe Search.HashEntry) ->
                 case w3 of wild {
                   GHC.Base.Nothing -> (w1, w2)
                   GHC.Base.Just x
                   -> case x of wild1 { Search.HashEntry dt dt1 dt2 ds ds1 ->
                      case w of wild2 { GHC.Types.I# y ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# dt1 y) of wild3 {
                        GHC.Types.False -> (w1, w2)
                        GHC.Types.True
                        -> let {
                             ds2 :: Alias.Evaluation {- Strictness: m -} = GHC.Types.I# dt2
                           } in
                           case ds of wild4 {
                             BasicData.Exact -> (ds2, ds2)
                             BasicData.LowerBound
                             -> (case w1 of wild5 { GHC.Types.I# x1 ->
                                 case GHC.Prim.tagToEnum#
                                        @ GHC.Types.Bool
                                        (GHC.Prim.<=# x1 dt2) of wild6 {
                                   GHC.Types.False -> wild5 GHC.Types.True -> ds2 } },
                                 w2)
                             BasicData.UpperBound
                             -> (w1,
                                 case w2 of wild5 { GHC.Types.I# x1 ->
                                 case GHC.Prim.tagToEnum#
                                        @ GHC.Types.Bool
                                        (GHC.Prim.<=# x1 dt2) of wild6 {
                                   GHC.Types.False -> ds2 GHC.Types.True -> wild5 } }) } } } } }) -}
34730b1f4cdc0ab8c684f4d9d39b03e1
  variation ::
    Control.Lens.Type.Lens' Search.SearchState Alias.Variation
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S(LSS),1*U(U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ (f :: * -> *)
                   ($dFunctor :: GHC.Base.Functor f)
                   (f1 :: Alias.Variation -> f Alias.Variation)
                   (ds :: Search.SearchState) ->
                 case ds of wild { Search.SearchState dt x2 x3 ->
                 GHC.Base.fmap
                   @ f
                   $dFunctor
                   @ Alias.Variation
                   @ Search.SearchState
                   (\ (y1 :: Alias.Variation) ->
                    case y1 of dt1 { DEFAULT -> Search.SearchState dt dt1 x3 })
                   (f1 x2) }) -}
b611d1e32c7780ac7aefabc5ac570560
  verifyCutoff ::
    GHC.Base.Monad m =>
    Control.Monad.Trans.Either.EitherT a m a
    -> Control.Monad.Trans.Either.EitherT a m a
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(1*U(1*U(1*C1(U),A),A,A,A,A),C(C1(U)),A,C(U),A)>,
     Unfolding: (\ @ (m :: * -> *) @ a ($dMonad :: GHC.Base.Monad m) ->
                 let {
                   f :: m (Data.Either.Either a a) -> m a
                   = GHC.Base.fmap
                       @ m
                       (GHC.Base.$p1Applicative @ m (GHC.Base.$p1Monad @ m $dMonad))
                       @ (Data.Either.Either a a)
                       @ a
                       (Search.verifyCutoff2 @ a)
                 } in
                 let {
                   lvl56 :: a -> m (Data.Either.Either a a) {- Arity: 1 -}
                   = \ (x1 :: a) ->
                     GHC.Base.return
                       @ m
                       $dMonad
                       @ (Data.Either.Either a a)
                       (Data.Either.Right @ a @ a x1)
                 } in
                 (\ (x :: Control.Monad.Trans.Either.EitherT a m a) ->
                  GHC.Base.>>=
                    @ m
                    $dMonad
                    @ a
                    @ (Data.Either.Either a a)
                    (f x `cast`
                       (Control.Monad.Trans.Either.N:EitherT[0] <a>_N <m>_R <a>_N))
                    lvl56)
                   `cast`
                 (<Control.Monad.Trans.Either.EitherT a m a>_R
                  ->_R Sym (Control.Monad.Trans.Either.N:EitherT[0]
                                <a>_N <m>_R <a>_N))) -}
2a2f219d0e60e8f0ba3312794e3ad55c
  verifyCutoff2 :: Data.Either.Either a a -> a
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds1 :: Data.Either.Either a a) ->
                 case ds1 of wild {
                   Data.Either.Left x -> x Data.Either.Right y -> y }) -}
"SPEC/Search $fApplicativeReaderT @ IO _" [ALWAYS] forall @ r
                                                          ($dApplicative :: GHC.Base.Applicative
                                                                              GHC.Types.IO)
  Control.Monad.Trans.Reader.$fApplicativeReaderT @ GHC.Types.IO
                                                  @ r
                                                  $dApplicative
  = Search.$s$fApplicativeEitherT_$s$fApplicativeReaderT @ r
"SPEC/Search $fApplicativeReaderT_$c<*> @ IO _" [ALWAYS] forall @ r
                                                                ($dApplicative :: GHC.Base.Applicative
                                                                                    GHC.Types.IO)
  Control.Monad.Trans.Reader.$fApplicativeReaderT_$c<*> @ GHC.Types.IO
                                                        @ r
                                                        $dApplicative
  = Search.$s$fApplicativeEitherT_$s$fApplicativeReaderT_$c<*> @ r
"SPEC/Search $fApplicativeReaderT_$cp1Applicative @ IO _" [ALWAYS] forall @ r
                                                                          ($dApplicative :: GHC.Base.Applicative
                                                                                              GHC.Types.IO)
  Control.Monad.Trans.Reader.$fApplicativeReaderT_$cp1Applicative @ GHC.Types.IO
                                                                  @ r
                                                                  $dApplicative
  = Search.$s$fApplicativeEitherT_$s$fApplicativeReaderT_$cp1Applicative
      @ r
"SPEC/Search $fApplicativeStateT @ (ReaderT SearchEnvironment IO) _" [ALWAYS] forall @ s
                                                                                     ($dFunctor :: GHC.Base.Functor
                                                                                                     (Control.Monad.Trans.Reader.ReaderT
                                                                                                        Search.SearchEnvironment
                                                                                                        GHC.Types.IO))
                                                                                     ($dMonad :: GHC.Base.Monad
                                                                                                   (Control.Monad.Trans.Reader.ReaderT
                                                                                                      Search.SearchEnvironment
                                                                                                      GHC.Types.IO))
  Control.Monad.Trans.State.Strict.$fApplicativeStateT @ (Control.Monad.Trans.Reader.ReaderT
                                                            Search.SearchEnvironment GHC.Types.IO)
                                                       @ s
                                                       $dFunctor
                                                       $dMonad
  = Search.$s$fApplicativeEitherT_$s$fApplicativeStateT @ s
"SPEC/Search $fApplicativeStateT_$c<*> @ (ReaderT
                                           SearchEnvironment IO) _" [ALWAYS] forall @ s
                                                                                                                                      ($dFunctor :: GHC.Base.Functor
                                                                                                                                                      (Control.Monad.Trans.Reader.ReaderT
                                                                                                                                                         Search.SearchEnvironment
                                                                                                                                                         GHC.Types.IO))
                                                                                                                                      ($dMonad :: GHC.Base.Monad
                                                                                                                                                    (Control.Monad.Trans.Reader.ReaderT
                                                                                                                                                       Search.SearchEnvironment
                                                                                                                                                       GHC.Types.IO))
  Control.Monad.Trans.State.Strict.$fApplicativeStateT_$c<*> @ (Control.Monad.Trans.Reader.ReaderT
                                                                  Search.SearchEnvironment
                                                                  GHC.Types.IO)
                                                             @ s
                                                             $dFunctor
                                                             $dMonad
  = Search.$s$fApplicativeEitherT_$s$fApplicativeStateT_$c<*> @ s
"SPEC/Search $fApplicativeStateT_$cp1Applicative @ (ReaderT
                                                     SearchEnvironment IO) _" [ALWAYS] forall @ s
                                                                                                                                                          ($dFunctor :: GHC.Base.Functor
                                                                                                                                                                          (Control.Monad.Trans.Reader.ReaderT
                                                                                                                                                                             Search.SearchEnvironment
                                                                                                                                                                             GHC.Types.IO))
                                                                                                                                                          ($dMonad :: GHC.Base.Monad
                                                                                                                                                                        (Control.Monad.Trans.Reader.ReaderT
                                                                                                                                                                           Search.SearchEnvironment
                                                                                                                                                                           GHC.Types.IO))
  Control.Monad.Trans.State.Strict.$fApplicativeStateT_$cp1Applicative @ (Control.Monad.Trans.Reader.ReaderT
                                                                            Search.SearchEnvironment
                                                                            GHC.Types.IO)
                                                                       @ s
                                                                       $dFunctor
                                                                       $dMonad
  = Search.$s$fApplicativeEitherT_$s$fApplicativeStateT_$cp1Applicative
      @ s
"SPEC/Search $fApplicativeStateT_$cpure @ (ReaderT
                                            SearchEnvironment IO) _" [ALWAYS] forall @ s
                                                                                                                                        ($dFunctor :: GHC.Base.Functor
                                                                                                                                                        (Control.Monad.Trans.Reader.ReaderT
                                                                                                                                                           Search.SearchEnvironment
                                                                                                                                                           GHC.Types.IO))
                                                                                                                                        ($dMonad :: GHC.Base.Monad
                                                                                                                                                      (Control.Monad.Trans.Reader.ReaderT
                                                                                                                                                         Search.SearchEnvironment
                                                                                                                                                         GHC.Types.IO))
  Control.Monad.Trans.State.Strict.$fApplicativeStateT_$cpure @ (Control.Monad.Trans.Reader.ReaderT
                                                                   Search.SearchEnvironment
                                                                   GHC.Types.IO)
                                                              @ s
                                                              $dFunctor
                                                              $dMonad
  = Search.$s$fApplicativeEitherT_$s$fApplicativeStateT_$cpure @ s
"SPEC/Search $fFunctorReaderT @ IO _" [ALWAYS] forall @ r
                                                      ($dFunctor :: GHC.Base.Functor GHC.Types.IO)
  Control.Monad.Trans.Reader.$fFunctorReaderT @ GHC.Types.IO
                                              @ r
                                              $dFunctor
  = Search.$s$fApplicativeEitherT_$s$fFunctorReaderT @ r
"SPEC/Search $fFunctorReaderT_$c<$ @ IO _" [ALWAYS] forall @ r
                                                           ($dFunctor :: GHC.Base.Functor
                                                                           GHC.Types.IO)
  Control.Monad.Trans.Reader.$fFunctorReaderT_$c<$ @ GHC.Types.IO
                                                   @ r
                                                   $dFunctor
  = Search.$s$fApplicativeEitherT_$s$fFunctorReaderT_$c<$ @ r
"SPEC/Search $fFunctorReaderT_$cfmap @ IO _" [ALWAYS] forall @ r
                                                             ($dFunctor :: GHC.Base.Functor
                                                                             GHC.Types.IO)
  Control.Monad.Trans.Reader.$fFunctorReaderT_$cfmap @ GHC.Types.IO
                                                     @ r
                                                     $dFunctor
  = Search.$s$fApplicativeEitherT_$s$fFunctorReaderT_$cfmap @ r
"SPEC/Search $fFunctorStateT @ (ReaderT SearchEnvironment IO) _" [ALWAYS] forall @ s
                                                                                 ($dFunctor :: GHC.Base.Functor
                                                                                                 (Control.Monad.Trans.Reader.ReaderT
                                                                                                    Search.SearchEnvironment
                                                                                                    GHC.Types.IO))
  Control.Monad.Trans.State.Strict.$fFunctorStateT @ (Control.Monad.Trans.Reader.ReaderT
                                                        Search.SearchEnvironment GHC.Types.IO)
                                                   @ s
                                                   $dFunctor
  = Search.$s$fApplicativeEitherT_$s$fFunctorStateT @ s
"SPEC/Search $fFunctorStateT_$cfmap @ (ReaderT
                                        SearchEnvironment IO) _" [ALWAYS] forall @ s
                                                                                                                                ($dFunctor :: GHC.Base.Functor
                                                                                                                                                (Control.Monad.Trans.Reader.ReaderT
                                                                                                                                                   Search.SearchEnvironment
                                                                                                                                                   GHC.Types.IO))
  Control.Monad.Trans.State.Strict.$fFunctorStateT_$cfmap @ (Control.Monad.Trans.Reader.ReaderT
                                                               Search.SearchEnvironment
                                                               GHC.Types.IO)
                                                          @ s
                                                          $dFunctor
  = Search.$s$fApplicativeEitherT_$s$fFunctorStateT_$cfmap @ s
"SPEC/Search $fMonadReaderT @ IO _" [ALWAYS] forall @ r
                                                    ($dMonad :: GHC.Base.Monad GHC.Types.IO)
  Control.Monad.Trans.Reader.$fMonadReaderT @ GHC.Types.IO
                                            @ r
                                            $dMonad
  = Search.$s$fApplicativeEitherT_$s$fMonadReaderT @ r
"SPEC/Search $fMonadReaderT_$c>> @ IO _" [ALWAYS] forall @ r
                                                         ($dMonad :: GHC.Base.Monad GHC.Types.IO)
  Control.Monad.Trans.Reader.$fMonadReaderT_$c>> @ GHC.Types.IO
                                                 @ r
                                                 $dMonad
  = Search.$s$fApplicativeEitherT_$s$fMonadReaderT_$c>> @ r
"SPEC/Search $fMonadReaderT_$c>>= @ IO _" [ALWAYS] forall @ r
                                                          ($dMonad :: GHC.Base.Monad GHC.Types.IO)
  Control.Monad.Trans.Reader.$fMonadReaderT_$c>>= @ GHC.Types.IO
                                                  @ r
                                                  $dMonad
  = Search.$s$fApplicativeEitherT_$s$fMonadReaderT_$c>>= @ r
"SPEC/Search $fMonadReaderT_$cfail @ IO _" [ALWAYS] forall @ r
                                                           ($dMonad :: GHC.Base.Monad GHC.Types.IO)
  Control.Monad.Trans.Reader.$fMonadReaderT_$cfail @ GHC.Types.IO
                                                   @ r
                                                   $dMonad
  = Search.$s$fApplicativeEitherT_$s$fMonadReaderT_$cfail @ r
"SPEC/Search $fMonadReaderT_$cp1Monad @ IO _" [ALWAYS] forall @ r
                                                              ($dMonad :: GHC.Base.Monad
                                                                            GHC.Types.IO)
  Control.Monad.Trans.Reader.$fMonadReaderT_$cp1Monad @ GHC.Types.IO
                                                      @ r
                                                      $dMonad
  = Search.$s$fApplicativeEitherT_$s$fMonadReaderT_$cp1Monad @ r
"SPEC/Search $fMonadReaderT_$creturn @ IO _" [ALWAYS] forall @ r
                                                             ($dMonad :: GHC.Base.Monad
                                                                           GHC.Types.IO)
  Control.Monad.Trans.Reader.$fMonadReaderT_$creturn @ GHC.Types.IO
                                                     @ r
                                                     $dMonad
  = Search.$s$fApplicativeEitherT_$s$fMonadReaderT_$creturn @ r
"SPEC/Search $fMonadReaderrReaderT @ IO _" [ALWAYS] forall @ r
                                                           ($dMonad :: GHC.Base.Monad GHC.Types.IO)
  Control.Monad.Reader.Class.$fMonadReaderrReaderT @ GHC.Types.IO
                                                   @ r
                                                   $dMonad
  = Search.$s$fMonadReaderrEitherT_$s$fMonadReaderrReaderT @ r
"SPEC/Search $fMonadReaderrStateT @ SearchEnvironment @ (ReaderT
                                                          SearchEnvironment IO) _" [ALWAYS] forall @ s
                                                                                                                                                                    ($dMonadReader :: Control.Monad.Reader.Class.MonadReader
                                                                                                                                                                                        Search.SearchEnvironment
                                                                                                                                                                                        (Control.Monad.Trans.Reader.ReaderT
                                                                                                                                                                                           Search.SearchEnvironment
                                                                                                                                                                                           GHC.Types.IO))
  Control.Monad.Reader.Class.$fMonadReaderrStateT @ Search.SearchEnvironment
                                                  @ (Control.Monad.Trans.Reader.ReaderT
                                                       Search.SearchEnvironment GHC.Types.IO)
                                                  @ s
                                                  $dMonadReader
  = Search.$s$fMonadReaderrEitherT_$s$fMonadReaderrStateT @ s
"SPEC/Search $fMonadStateT @ (ReaderT SearchEnvironment IO) _" [ALWAYS] forall @ s
                                                                               ($dMonad :: GHC.Base.Monad
                                                                                             (Control.Monad.Trans.Reader.ReaderT
                                                                                                Search.SearchEnvironment
                                                                                                GHC.Types.IO))
  Control.Monad.Trans.State.Strict.$fMonadStateT @ (Control.Monad.Trans.Reader.ReaderT
                                                      Search.SearchEnvironment GHC.Types.IO)
                                                 @ s
                                                 $dMonad
  = Search.$s$fApplicativeEitherT_$s$fMonadStateT @ s
"SPEC/Search $fMonadStateT_$c>> @ (ReaderT SearchEnvironment IO) _" [ALWAYS] forall @ s
                                                                                    ($dMonad :: GHC.Base.Monad
                                                                                                  (Control.Monad.Trans.Reader.ReaderT
                                                                                                     Search.SearchEnvironment
                                                                                                     GHC.Types.IO))
  Control.Monad.Trans.State.Strict.$fMonadStateT_$c>> @ (Control.Monad.Trans.Reader.ReaderT
                                                           Search.SearchEnvironment GHC.Types.IO)
                                                      @ s
                                                      $dMonad
  = Search.$s$fApplicativeEitherT_$s$fMonadStateT_$c>> @ s
"SPEC/Search $fMonadStateT_$c>>= @ (ReaderT SearchEnvironment IO) _" [ALWAYS] forall @ s
                                                                                     ($dMonad :: GHC.Base.Monad
                                                                                                   (Control.Monad.Trans.Reader.ReaderT
                                                                                                      Search.SearchEnvironment
                                                                                                      GHC.Types.IO))
  Control.Monad.Trans.State.Strict.$fMonadStateT_$c>>= @ (Control.Monad.Trans.Reader.ReaderT
                                                            Search.SearchEnvironment GHC.Types.IO)
                                                       @ s
                                                       $dMonad
  = Search.$s$fApplicativeEitherT_$s$fMonadStateT_$c>>= @ s
"SPEC/Search $fMonadStateT_$cfail @ (ReaderT SearchEnvironment IO) _" [ALWAYS] forall @ s
                                                                                      ($dMonad :: GHC.Base.Monad
                                                                                                    (Control.Monad.Trans.Reader.ReaderT
                                                                                                       Search.SearchEnvironment
                                                                                                       GHC.Types.IO))
  Control.Monad.Trans.State.Strict.$fMonadStateT_$cfail @ (Control.Monad.Trans.Reader.ReaderT
                                                             Search.SearchEnvironment GHC.Types.IO)
                                                        @ s
                                                        $dMonad
  = Search.$s$fApplicativeEitherT_$s$fMonadStateT_$cfail @ s
"SPEC/Search $fMonadStateT_$cp1Monad @ (ReaderT
                                         SearchEnvironment IO) _" [ALWAYS] forall @ s
                                                                                                                                  ($dMonad :: GHC.Base.Monad
                                                                                                                                                (Control.Monad.Trans.Reader.ReaderT
                                                                                                                                                   Search.SearchEnvironment
                                                                                                                                                   GHC.Types.IO))
  Control.Monad.Trans.State.Strict.$fMonadStateT_$cp1Monad @ (Control.Monad.Trans.Reader.ReaderT
                                                                Search.SearchEnvironment
                                                                GHC.Types.IO)
                                                           @ s
                                                           $dMonad
  = Search.$s$fApplicativeEitherT_$s$fMonadStateT_$cp1Monad @ s
"SPEC/Search $fMonadStatesStateT @ (ReaderT SearchEnvironment IO) _" [ALWAYS] forall @ s
                                                                                     ($dMonad :: GHC.Base.Monad
                                                                                                   (Control.Monad.Trans.Reader.ReaderT
                                                                                                      Search.SearchEnvironment
                                                                                                      GHC.Types.IO))
  Control.Monad.State.Class.$fMonadStatesStateT @ (Control.Monad.Trans.Reader.ReaderT
                                                     Search.SearchEnvironment GHC.Types.IO)
                                                @ s
                                                $dMonad
  = Search.$s$fMonadStatesEitherT_$s$fMonadStatesStateT @ s
"SPEC/Search put @ (ReaderT SearchEnvironment IO) _" [ALWAYS] forall @ s
                                                                     ($dMonad :: GHC.Base.Monad
                                                                                   (Control.Monad.Trans.Reader.ReaderT
                                                                                      Search.SearchEnvironment
                                                                                      GHC.Types.IO))
  Control.Monad.Trans.State.Strict.put @ (Control.Monad.Trans.Reader.ReaderT
                                            Search.SearchEnvironment GHC.Types.IO)
                                       @ s
                                       $dMonad
  = Search.$s$fMonadStatesEitherT_$sput @ s
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

