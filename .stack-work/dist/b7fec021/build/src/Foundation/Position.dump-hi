
==================== FINAL INTERFACE ====================
2016-12-17 14:57:21.8554895 UTC

interface Sophy-0.1.0.0-KzkJ0b2opaf7oLnrOdwoet:Position 8001
  interface hash: 25c5d2ea1555534d96038f3fb2fc7719
  ABI hash: af8b43b323818dabb635634fc880445d
  export-list hash: 0d659c33f0a366721f46836234c7b111
  orphan hash: 44345f9ed8e54eb97632c9ab3a7e16b9
  flag hash: 780eb08866e9f611cfa38104f3e4c47c
  sig of: Nothing
  used TH splices: False
  where
exports:
  Position.%~~
  Position.<!>
  Position.<-!->
  Position.<~!~>
  Position.activeCastleRight
  Position.arrangeEPSquare
  Position.arrangeHalfMoveClock
  Position.atSquare
  Position.backward
  Position.backward2
  Position.calcDefendMap
  Position.calcHashKey
  Position.calcMaterial
  Position.canDraw
  Position.castle
  Position.castleHashKey
  Position.castleRightWithout
  Position.changeColor
  Position.colorHashKey
  Position.combineCastleRight
  Position.disableCastling
  Position.disableEPSquare
  Position.emptySquares
  Position.enPassant
  Position.endGame
  Position.epHashKey
  Position.findCheckers
  Position.findPinners
  Position.forward
  Position.forward2
  Position.includeKingsideCastle
  Position.includeQueensideCastle
  Position.insufficientMaterial
  Position.isBlack
  Position.isEmpty
  Position.isInCheck
  Position.isOccupied
  Position.isWhite
  Position.material
  Position.minorPieces
  Position.move
  Position.occupancy
  Position.opposite
  Position.overAttacker
  Position.overDefender
  Position.pieceAt
  Position.pieceChar
  Position.pieceHashKey
  Position.pieces
  Position.promotion
  Position.showPos
  Position.swapOccupancy
module dependencies: Alias AttackTable BasicConstant BasicData
                     BitBoard Bitwise
package dependencies: StateVar-1.1.0.4@StateVar-1.1.0.4-CJpWsiXJdd89SnV9dZtTwc
                      Win32-2.3.1.1@Win32-2.3.1.1
                      adjunctions-4.3@adjunctions-4.3-3ol9sWZt3In19pwXwPv3Xc
                      array-0.5.1.1@array-0.5.1.1 base-4.9.0.0
                      base-orphans-0.5.4@base-orphans-0.5.4-5IQvrjd7gNP548VkOOyIq6
                      bifunctors-5.4.1@bifunctors-5.4.1-8Xk5Wsnk1fr6rBLkW9MO8p
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      comonad-5@comonad-5-2RMxpSOQ5MCHLHIelJrHD4
                      containers-0.5.7.1@containers-0.5.7.1
                      contravariant-1.4@contravariant-1.4-KSQE31a7FruKHDlp90hIUT
                      deepseq-1.4.2.0@deepseq-1.4.2.0
                      distributive-0.5.0.2@distributive-0.5.0.2-Cdz2vLOk85j1doGXLcictT
                      exceptions-0.8.3@exceptions-0.8.3-7py7fmRxowDFpHmiHGKrTb
                      free-4.12.4@free-4.12.4-Etm59Dm8iExFxAy1L49Ovd
                      ghc-boot-th-8.0.1@ghc-boot-th-8.0.1 ghc-prim-0.5.0.0
                      hashable-1.2.4.0@hashable-1.2.4.0-EMu4H7FB10MAl6hwKw992G
                      integer-gmp-1.0.0.1
                      kan-extensions-5.0.1@kan-extensions-5.0.1-Asa0tkk9PuPLZ2eXuJ10Gr
                      lens-4.14@lens-4.14-LQbbTc84mRL8zB39b41ZKA
                      mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM
                      prelude-extras-0.4.0.3@prelude-extras-0.4.0.3-FAyB4iuuM7cHXdrLMZtdXq
                      pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.1.0@primitive-0.6.1.0-Ip44DqhfCp21tTUYbecwa
                      profunctors-5.2@profunctors-5.2-2ZZOz6u59T2H8y7z3NgZkY
                      random-1.1@random-1.1-54KmMHXjttlERYcr1mvsAe
                      reflection-2.1.2@reflection-2.1.2-J1ZzlxijzaHGRixYxgxlf9
                      semigroupoids-5.1@semigroupoids-5.1-1Gay4xNO77GHd4DGCzVuax
                      split-0.2.3.1@split-0.2.3.1-IJKK4pOCYGKud0jZImZke
                      stm-2.4.4.1@stm-2.4.4.1-4z2NRWnB0NIIUvSJsHW0kF
                      tagged-0.8.5@tagged-0.8.5-CtgV6EcN0do8F92i1S6iYx
                      template-haskell-2.11.0.0
                      text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
                      transformers-compat-0.5.1.4@transformers-compat-0.5.1.4-81lZyuOJOvsD0zyCv2TKld
                      unordered-containers-0.2.7.1@unordered-containers-0.2.7.1-Eo9jd5DMz45DhBLCG8skzW
                      vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         hashable-1.2.4.0@hashable-1.2.4.0-EMu4H7FB10MAl6hwKw992G:Data.Hashable.Generic
         reflection-2.1.2@reflection-2.1.2-J1ZzlxijzaHGRixYxgxlf9:Data.Reflection
         stm-2.4.4.1@stm-2.4.4.1-4z2NRWnB0NIIUvSJsHW0kF:Control.Monad.STM
         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text
         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text.Lazy
         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text.Show
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Fusion.Bundle
         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Unboxed
family instance modules: adjunctions-4.3@adjunctions-4.3-3ol9sWZt3In19pwXwPv3Xc:Data.Functor.Rep
                         base-4.9.0.0:Control.Applicative base-4.9.0.0:Data.Complex
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Compose
                         base-4.9.0.0:Data.Functor.Const base-4.9.0.0:Data.Functor.Identity
                         base-4.9.0.0:Data.Functor.Product base-4.9.0.0:Data.Functor.Sum
                         base-4.9.0.0:Data.List.NonEmpty base-4.9.0.0:Data.Monoid
                         base-4.9.0.0:Data.Semigroup base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:Data.Version base-4.9.0.0:Data.Void
                         base-4.9.0.0:GHC.Exts base-4.9.0.0:GHC.Generics
                         base-4.9.0.0:GHC.IO.Exception base-4.9.0.0:GHC.TypeLits
                         bifunctors-5.4.1@bifunctors-5.4.1-8Xk5Wsnk1fr6rBLkW9MO8p:Data.Bifunctor.Biff
                         bifunctors-5.4.1@bifunctors-5.4.1-8Xk5Wsnk1fr6rBLkW9MO8p:Data.Bifunctor.Clown
                         bifunctors-5.4.1@bifunctors-5.4.1-8Xk5Wsnk1fr6rBLkW9MO8p:Data.Bifunctor.Flip
                         bifunctors-5.4.1@bifunctors-5.4.1-8Xk5Wsnk1fr6rBLkW9MO8p:Data.Bifunctor.Join
                         bifunctors-5.4.1@bifunctors-5.4.1-8Xk5Wsnk1fr6rBLkW9MO8p:Data.Bifunctor.Joker
                         bifunctors-5.4.1@bifunctors-5.4.1-8Xk5Wsnk1fr6rBLkW9MO8p:Data.Bifunctor.Product
                         bifunctors-5.4.1@bifunctors-5.4.1-8Xk5Wsnk1fr6rBLkW9MO8p:Data.Bifunctor.Sum
                         bifunctors-5.4.1@bifunctors-5.4.1-8Xk5Wsnk1fr6rBLkW9MO8p:Data.Bifunctor.Tannen
                         bifunctors-5.4.1@bifunctors-5.4.1-8Xk5Wsnk1fr6rBLkW9MO8p:Data.Bifunctor.Wrapped
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         ghc-boot-th-8.0.1@ghc-boot-th-8.0.1:GHC.LanguageExtensions.Type
                         kan-extensions-5.0.1@kan-extensions-5.0.1-Asa0tkk9PuPLZ2eXuJ10Gr:Data.Functor.Day
                         kan-extensions-5.0.1@kan-extensions-5.0.1-Asa0tkk9PuPLZ2eXuJ10Gr:Data.Functor.Yoneda
                         lens-4.14@lens-4.14-LQbbTc84mRL8zB39b41ZKA:Control.Lens.At
                         lens-4.14@lens-4.14-LQbbTc84mRL8zB39b41ZKA:Control.Lens.Internal.Indexed
                         lens-4.14@lens-4.14-LQbbTc84mRL8zB39b41ZKA:Control.Lens.Reified
                         lens-4.14@lens-4.14-LQbbTc84mRL8zB39b41ZKA:Control.Lens.Tuple
                         lens-4.14@lens-4.14-LQbbTc84mRL8zB39b41ZKA:Control.Lens.Wrapped
                         lens-4.14@lens-4.14-LQbbTc84mRL8zB39b41ZKA:Control.Lens.Zoom
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.1.0@primitive-0.6.1.0-Ip44DqhfCp21tTUYbecwa:Control.Monad.Primitive
                         profunctors-5.2@profunctors-5.2-2ZZOz6u59T2H8y7z3NgZkY:Data.Profunctor.Rep
                         tagged-0.8.5@tagged-0.8.5-CtgV6EcN0do8F92i1S6iYx:Data.Tagged
                         template-haskell-2.11.0.0:Language.Haskell.TH.Syntax
                         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text
                         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text.Lazy
                         unordered-containers-0.2.7.1@unordered-containers-0.2.7.1-Eo9jd5DMz45DhBLCG8skzW:Data.HashMap.Base
                         unordered-containers-0.2.7.1@unordered-containers-0.2.7.1-Eo9jd5DMz45DhBLCG8skzW:Data.HashSet
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Primitive
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Storable
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Unboxed
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Unboxed.Base
import  -/  Alias ba36719cc8f68ab87c0ee8446a683f1b
  exports: 03b73823d7379fa3fc65780b7c8ac5e2
  AttackMap 21778f3dbfdaaf0295382f186ba1658a
  BitBoard 461830e1b89cbd9e95b01ba7aa2fcc74
  FromSquare 3fef5aa67cf31564c7a26ebcb06187a4
  PieceValue 4186039bec2d435a1f09ed24656c3b1c
  Square 47e0dc39b5f004e762e108114ef07a8d
  ToSquare ffe89745d2b9376350dd47490a8acd37
  ZobristKey ab98ea94473ec2650a6572a2f90c85e1
import  -/  AttackTable 9744fc5387b59a0a8607ff353b8c018d
  exports: a05285a83ff207b32b71687481ff8ff3
  bishopAttack 531b74aa1e19d1691ccf0bf87f569030
  knightAttack 741f0fa16bbcd6bdf293a4bfcde44d6a
  pawnAttack 640edbb37a2b657940c1503aa7fc6cab
  queenAttack cc35896ee64c05719fe4cdcf680db355
  rookAttack c4bfccee42c8b39b38aaae826ba723f3
import  -/  BasicConstant 75629955daea2dc6e28b1b47bb042933
  exports: 8cd31e6e16b93cd2dcc5693171330c73
  bishopMaterial 8d7881707c53c29d6a447dee35cd3dee
  initBKing e7b69dafa34ac09f308632d8b2fc2d3d
  initBKingsideRook 76b92bd89083d3c028d75efa8e3f720e
  initBQueensideRook 2ace415e217e916ac14510d46dde62e5
  initKingsAndRooks 35527f1dbd69ce29fa0847e1acc6d336
  initKingsideRooks b54168533904edb08fca4c381bb6de7c
  initQueensideRooks 79629e6552bc36a5edca068ac1ccb974
  initWKRBQR 3c3233278fd5b505f85ff600986320d6
  initWKing 45991d055b83cd43663012b9cad56a00
  initWKingsideRook 9de356efb190ee2b0207d0d5471b641b
  initWQRBKR ba7ae8174d32f03cd3252b1bbdef3994
  initWQueensideRook 98bf85f5b478744a1a9a737d614b7c72
  kingMaterial 6b1f66706145b98c4dc89806e55306a1
  kingside d68a66d4b0395467dcc07899c771204c
  knightMaterial f5d7d0fee66fc015f688e28d619b2c24
  lightSquares fbe08b975021808a1f6e199f0a2a7773
  pawnMaterial 9b3f2cac3a5fce41cf26afd3bde4c658
  queenMaterial 208915c41faea8f2bd3647dec6618cfb
  rookMaterial e784b63bc7b6c295ac9d25cc8531ee91
import  -/  BasicData 2a7d7454833f4f04d9c30a40b6d5a151
  exports: 05582099e9a48170ebc021a187a7905d
  BK 7caad9abe9cf60d0b1a7c5414f6d577e
  BKBQ 794a01ff2ff0fedaab15c969ed791e99
  BQ 229c6fcca59729774df58455384aa0c8
  Bishop 42c313f81738f26581e31bd53cfbd397
  Black 522357099ddcd83c850e6a6c2fedd453
  CastleRight eb148c194a6596da1eda8b5ef23786a4
  Color 7aa905d66113e099b17b06056ad98d42
  King 2db3132eee6067b9d25bc0e1fc945cfa
  Knight 461e5adbab338f7e2a030d9d47abe91e
  Pawn 1b02be8111f4c89ef250a784fb2986fe
  PieceType d7f82d5957caceafc8b688a191800308
  Position 682d610c9d78016fb58efbcec8bc1ded
  Position a4a6ae1d21eb516f790aeadb42103ac1
  Queen 9934c7b69e70a8646bf6b75fda804ef3
  Rook 86ec96c7cf9e9c94d4763e21a3c09b90
  WK 88f5fc9ca08a1b970f0d7e82fa6925fe
  WKBK 087db083ac5a42f5877fe31452431ee3
  WKBQ 63b907e178faccd01f53e5649c713650
  WKWQ a5932f958aaa5f478e9189d5852e0a32
  WQ 7bb6785061a839cc42c3c2785baa346c
  WQBK 0d42ea4af1ebb9d9c1fd89dde946bf90
  WQBQ 39dbde64124e4b78f6247886cedb6379
  White 1ed56db967e8b2482365f6c064064144
  _activeColor 445b499e540a4303831b0166931f68a2
  _attackers f6a0ec5168d0bd061f1e7ebc903f5f17
  _bishops 663edc186d89d4d2be0499ee2e039ff6
  _castleRights 007098f7ab96b934ef9708c62eb45097
  _checkers 2bec81847b7309d4ff24a5ec96db960c
  _defenders c89f714bc5316fdb2721de53e07a57d3
  _enPassantSquare c522fe044bcd73b3480f9069d2b470c6
  _kings 4917f03ade766116e2fbf1b1c891e842
  _knights 13274a525dac4d4cda16a3e103f616be
  _pawns 71b6665db9140e0a03b6975ad31d389b
  _queens 4a46d684bfd5ea4ad430b16e0b96b44e
  _rooks 1ddb89a9e91db5f37f357b50bdc9e384
  activeColor 071921c133c539dfc0de6ff816d9e34b
  attackers a9159f642c76c8edbd688d929e875f86
  bishops ae41dd1d006d29e51abca19da3611ed2
  castleRights f33a95d7097838205292420f28dc0e95
  defenders ae34df689900fa6e4d0e7689e67c24dc
  enPassantSquare df67d607ce3f9b804f018ccc8fe030d0
  halfMoveClock 027d680dbe2d40c32a9f8d351176e310
  history cd2eb0a124afde32f5ecbe6c3c2aaaf6
  kings dcff2b3e6862e447ae2c73afdc17a305
  knights 4d09b81332dfbfa3850f74f44757997e
  materialBalance 95ffff258b0622515319013592ccfc7a
  pawns fdd05f59aa36d16610bec1a82928588e
  plyCount 89e6ae44a85de21278080acc314226ce
  queens 16ccf35b180935eb20ad3912066ccf9f
  rooks 13a450071c19605777022e5d018e5920
  zobristKey a343609122229b3a5de0a209162b4bf2
import  -/  BitBoard 546ecb469d7a09f0dc9092f9430e44fc
  exports: 581f8ad67b3ac061648269de5226c9ef
  bishopAttack 8bbbaf22e6242ed152b48ca7d2115c87
  kingAttack 64918d5f00be6283a13fa2055df2c12b
  knightAttack b2ddd31161b9bc6f3b547c65673f93d0
  pawnAttack 97ddddd307d3bcadba801332ddb7f944
  rookAttack 997cd4fcec55884115a1d642399a1f3a
  squareNameFrom 18ce553b2d72a3598c3e2c67b2621e1f
import  -/  Bitwise dac3e64a54b8be9d7c8e1f130b8e73fa
  exports: 9b4cf91b2dee21d2fcd203a2334d40a1
  collapse 466736918cf20f0ebb026d98a12c7059
  disjoint d4b6a06978fcf65d85a494a1597099df
  joint d98fb2644b317d27b91085307d2a9706
  populated 75e80f725612686eb7f81f1ce5359273
  without 67ce45f5ed5d75206d3b7d6f09efeff7
import  -/  base-4.9.0.0:Data.Bits c954f6297e2203ba924b7d4bb91aa2cf
import  -/  base-4.9.0.0:Data.Char 793b969914b1622fef8ab278ed0a2b7f
import  -/  base-4.9.0.0:Data.Foldable 3cbed01c922be29649c33015287c82ca
import  -/  base-4.9.0.0:Data.Function 2d30bad1e59b32e49b27f71226717080
import  -/  base-4.9.0.0:Data.Functor 67cebb006c069ea73adcd2d468cdb0dc
import  -/  base-4.9.0.0:Data.Maybe 086a84053ef7f7810663b5f03b7ec3f7
import  -/  base-4.9.0.0:Data.OldList 3c899c6d8e6204063769214449ac0954
import  -/  base-4.9.0.0:Data.Tuple 84c2bcc75b7a239341ae2f88cce9d8d7
import  -/  base-4.9.0.0:GHC.Base dd8044a8d640eee51828c17c476a6ba7
import  -/  base-4.9.0.0:GHC.Enum dab7089478c738f0ffbf72212d9113c9
import  -/  base-4.9.0.0:GHC.Err 20faef8829fd13c027d0ee2213637534
import  -/  base-4.9.0.0:GHC.List 47d436dfb7454bb1883fb4d943e3f389
import  -/  base-4.9.0.0:GHC.Num f0aed3315b3ed1b330b71fc4148a5581
import  -/  base-4.9.0.0:GHC.Real 011de9ca3282ad24a84e4e15f974f98e
import  -/  base-4.9.0.0:GHC.Show 0b5845243cb2ec62b57dd6963d276ec6
import  -/  base-4.9.0.0:GHC.Unicode 01f7a6469be023f2c0f9e458d1a0270d
import  -/  base-4.9.0.0:Prelude 2d9cd8b0ec3d728f62b734df888d2e34
import  -/  ghc-prim-0.5.0.0:GHC.Classes 16d48e012d23eaef9bca91ccdd572c02
import  -/  lens-4.14@lens-4.14-LQbbTc84mRL8zB39b41ZKA:Control.Lens b7b80d679f99639b22dc49438349ebe7
import  -/  lens-4.14@lens-4.14-LQbbTc84mRL8zB39b41ZKA:Control.Lens.Getter b4cdad12f267d5ddf6313c85279297ed
import  -/  lens-4.14@lens-4.14-LQbbTc84mRL8zB39b41ZKA:Control.Lens.Setter 5dd87d764c6c78a841d6cc4f4c0b1fef
import  -/  random-1.1@random-1.1-54KmMHXjttlERYcr1mvsAe:System.Random 8483439f8ec14d68196250b2c4a4fa4e
import  -/  split-0.2.3.1@split-0.2.3.1-IJKK4pOCYGKud0jZImZke:Data.List.Split 46e8ab9554123893f27696c65d88e63d
import  -/  split-0.2.3.1@split-0.2.3.1-IJKK4pOCYGKud0jZImZke:Data.List.Split.Internals 21bb7a06dca9e01c6e2173d6643f3bae
import  -/  vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Unboxed 816c8d8d1b2fd9811ceb784be4f89beb
fixities infixr 4 %~~, infixl 9 <!>, infixl 9 <-!->, infixl 9 <~!~>
e78e8457826018b1947ae72a5c486332
  $s!_$slength ::
    Data.Vector.Unboxed.Base.Vector Alias.ZobristKey -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,U,A)>m,
     Inline: [NEVER] -}
e4f3dc6ce8586333c18ed8506aaeda60
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Position.$trModule2
                   Position.$trModule1) -}
7f1d9f2c345ec1f9563ffdb9de17d4c3
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Position"#) -}
e43a75ca9a821aa1008e93ddb42c7dea
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "Sophy-0.1.0.0-KzkJ0b2opaf7oLnrOdwoet"#) -}
fc1e482b8dc36ebeff4de87f8450167f
  $w%~~ ::
    BasicData.PieceType
    -> (Alias.BitBoard -> Alias.BitBoard)
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> BasicData.Color
    -> BasicData.CastleRight
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Prim.Word#
    -> [Alias.ZobristKey]
    -> BasicData.Position
  {- Arity: 22, HasNoCafRefs,
     Strictness: <S,1*U><C(S(S)),1*C1(U(U))><S,U><S,U><L,U><L,U><L,U><L,U><L,U><L,U><S,U><S,U><S,U><S,U><S,U><S,U><S,U><S,U><S,U><S,U><S,U><S,U>,
     Inline: [0],
     Unfolding: (\ (w :: BasicData.PieceType)
                   (w1 :: Alias.BitBoard -> Alias.BitBoard)
                   (ww :: GHC.Prim.Word#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Word#)
                   (ww4 :: GHC.Prim.Word#)
                   (ww5 :: GHC.Prim.Word#)
                   (ww6 :: GHC.Prim.Word#)
                   (ww7 :: GHC.Prim.Word#)
                   (ww8 :: BasicData.Color)
                   (ww9 :: BasicData.CastleRight)
                   (ww10 :: GHC.Prim.Int#)
                   (ww11 :: GHC.Prim.Int#)
                   (ww12 :: GHC.Prim.Int#)
                   (ww13 :: GHC.Prim.Word#)
                   (ww14 :: GHC.Prim.Word#)
                   (ww15 :: GHC.Prim.Word#)
                   (ww16 :: GHC.Prim.Word#)
                   (ww17 :: GHC.Prim.Int#)
                   (ww18 :: GHC.Prim.Word#)
                   (ww19 :: [Alias.ZobristKey]) ->
                 case w of wild {
                   BasicData.Pawn
                   -> case w1 (GHC.Word.W64# ww2) of dt17 { GHC.Word.W64# dt18 ->
                      BasicData.Position
                        ww
                        ww1
                        dt18
                        ww3
                        ww4
                        ww5
                        ww6
                        ww7
                        ww8
                        ww9
                        ww10
                        ww11
                        ww12
                        ww13
                        ww14
                        ww15
                        ww16
                        ww17
                        ww18
                        ww19 }
                   BasicData.Knight
                   -> case w1 (GHC.Word.W64# ww3) of dt17 { GHC.Word.W64# dt18 ->
                      BasicData.Position
                        ww
                        ww1
                        ww2
                        dt18
                        ww4
                        ww5
                        ww6
                        ww7
                        ww8
                        ww9
                        ww10
                        ww11
                        ww12
                        ww13
                        ww14
                        ww15
                        ww16
                        ww17
                        ww18
                        ww19 }
                   BasicData.Bishop
                   -> case w1 (GHC.Word.W64# ww4) of dt17 { GHC.Word.W64# dt18 ->
                      BasicData.Position
                        ww
                        ww1
                        ww2
                        ww3
                        dt18
                        ww5
                        ww6
                        ww7
                        ww8
                        ww9
                        ww10
                        ww11
                        ww12
                        ww13
                        ww14
                        ww15
                        ww16
                        ww17
                        ww18
                        ww19 }
                   BasicData.Rook
                   -> case w1 (GHC.Word.W64# ww5) of dt17 { GHC.Word.W64# dt18 ->
                      BasicData.Position
                        ww
                        ww1
                        ww2
                        ww3
                        ww4
                        dt18
                        ww6
                        ww7
                        ww8
                        ww9
                        ww10
                        ww11
                        ww12
                        ww13
                        ww14
                        ww15
                        ww16
                        ww17
                        ww18
                        ww19 }
                   BasicData.Queen
                   -> case w1 (GHC.Word.W64# ww6) of dt17 { GHC.Word.W64# dt18 ->
                      BasicData.Position
                        ww
                        ww1
                        ww2
                        ww3
                        ww4
                        ww5
                        dt18
                        ww7
                        ww8
                        ww9
                        ww10
                        ww11
                        ww12
                        ww13
                        ww14
                        ww15
                        ww16
                        ww17
                        ww18
                        ww19 }
                   BasicData.King
                   -> case w1 (GHC.Word.W64# ww7) of dt17 { GHC.Word.W64# dt18 ->
                      BasicData.Position
                        ww
                        ww1
                        ww2
                        ww3
                        ww4
                        ww5
                        ww6
                        dt18
                        ww8
                        ww9
                        ww10
                        ww11
                        ww12
                        ww13
                        ww14
                        ww15
                        ww16
                        ww17
                        ww18
                        ww19 } }) -}
411488dafb684ca5c8a061cf1a89b71c
  $warrangeEPSquare ::
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> BasicData.Color
    -> BasicData.CastleRight
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Prim.Word#
    -> [Alias.ZobristKey]
    -> BasicData.Position
  {- Arity: 22,
     Strictness: <S,U><S,U><S,U><S,U><S,U><S,U><S,U><S,U><S,U><S,U><S,U><S,U><S,1*U><S,U><S,U><S,U><S,U><S,U><S,U><S,U><S,U><S,U>,
     Inline: [0] -}
e88d36158ddf16c1bbae181333dfc136
  $warrangeHalfMoveClock ::
    GHC.Prim.Int#
    -> Alias.ToSquare
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> BasicData.Color
    -> BasicData.CastleRight
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Prim.Word#
    -> [Alias.ZobristKey]
    -> BasicData.Position
  {- Arity: 22,
     Strictness: <S,U><L,1*U(U)><S,U><S,U><S,U><S,U><S,U><S,U><S,U><S,U><S,U><S,U><S,U><L,U><S,U><S,U><S,U><S,U><S,U><S,U><S,U><S,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: Alias.ToSquare)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Word#)
                   (ww4 :: GHC.Prim.Word#)
                   (ww5 :: GHC.Prim.Word#)
                   (ww6 :: GHC.Prim.Word#)
                   (ww7 :: GHC.Prim.Word#)
                   (ww8 :: GHC.Prim.Word#)
                   (ww9 :: BasicData.Color)
                   (ww10 :: BasicData.CastleRight)
                   (ww11 :: GHC.Prim.Int#)
                   (ww12 :: GHC.Prim.Int#)
                   (ww13 :: GHC.Prim.Int#)
                   (ww14 :: GHC.Prim.Word#)
                   (ww15 :: GHC.Prim.Word#)
                   (ww16 :: GHC.Prim.Word#)
                   (ww17 :: GHC.Prim.Word#)
                   (ww18 :: GHC.Prim.Int#)
                   (ww19 :: GHC.Prim.Word#)
                   (ww20 :: [Alias.ZobristKey]) ->
                 let {
                   $j :: GHC.Prim.Word# -> BasicData.Position
                     {- Arity: 1, Strictness: <S,U> -}
                   = \ (ipv :: GHC.Prim.Word#)[OneShot] ->
                     case GHC.Prim.and# ipv ww3 of wild {
                       DEFAULT
                       -> BasicData.Position
                            ww1
                            ww2
                            ww3
                            ww4
                            ww5
                            ww6
                            ww7
                            ww8
                            ww9
                            ww10
                            ww11
                            0#
                            ww13
                            ww14
                            ww15
                            ww16
                            ww17
                            ww18
                            ww19
                            ww20
                       0##
                       -> case GHC.Prim.and# ipv ww4 of wild1 {
                            DEFAULT
                            -> case w of wild2 { GHC.Types.I# i# ->
                               case GHC.Prim.tagToEnum#
                                      @ GHC.Types.Bool
                                      (GHC.Prim.>=# i# 64#) of wild3 {
                                 GHC.Types.False
                                 -> case GHC.Prim.and#
                                           (GHC.Prim.uncheckedShiftL# 1## i#)
                                           ww2 of wild4 {
                                      DEFAULT
                                      -> BasicData.Position
                                           ww1
                                           ww2
                                           ww3
                                           ww4
                                           ww5
                                           ww6
                                           ww7
                                           ww8
                                           ww9
                                           ww10
                                           ww11
                                           0#
                                           ww13
                                           ww14
                                           ww15
                                           ww16
                                           ww17
                                           ww18
                                           ww19
                                           ww20
                                      0##
                                      -> BasicData.Position
                                           ww1
                                           ww2
                                           ww3
                                           ww4
                                           ww5
                                           ww6
                                           ww7
                                           ww8
                                           ww9
                                           ww10
                                           ww11
                                           (GHC.Prim.+# ww12 1#)
                                           ww13
                                           ww14
                                           ww15
                                           ww16
                                           ww17
                                           ww18
                                           ww19
                                           ww20 }
                                 GHC.Types.True
                                 -> BasicData.Position
                                      ww1
                                      ww2
                                      ww3
                                      ww4
                                      ww5
                                      ww6
                                      ww7
                                      ww8
                                      ww9
                                      ww10
                                      ww11
                                      (GHC.Prim.+# ww12 1#)
                                      ww13
                                      ww14
                                      ww15
                                      ww16
                                      ww17
                                      ww18
                                      ww19
                                      ww20 } }
                            0##
                            -> case GHC.Prim.and# ipv ww5 of wild2 {
                                 DEFAULT
                                 -> case w of wild3 { GHC.Types.I# i# ->
                                    case GHC.Prim.tagToEnum#
                                           @ GHC.Types.Bool
                                           (GHC.Prim.>=# i# 64#) of wild4 {
                                      GHC.Types.False
                                      -> case GHC.Prim.and#
                                                (GHC.Prim.uncheckedShiftL# 1## i#)
                                                ww2 of wild5 {
                                           DEFAULT
                                           -> BasicData.Position
                                                ww1
                                                ww2
                                                ww3
                                                ww4
                                                ww5
                                                ww6
                                                ww7
                                                ww8
                                                ww9
                                                ww10
                                                ww11
                                                0#
                                                ww13
                                                ww14
                                                ww15
                                                ww16
                                                ww17
                                                ww18
                                                ww19
                                                ww20
                                           0##
                                           -> BasicData.Position
                                                ww1
                                                ww2
                                                ww3
                                                ww4
                                                ww5
                                                ww6
                                                ww7
                                                ww8
                                                ww9
                                                ww10
                                                ww11
                                                (GHC.Prim.+# ww12 1#)
                                                ww13
                                                ww14
                                                ww15
                                                ww16
                                                ww17
                                                ww18
                                                ww19
                                                ww20 }
                                      GHC.Types.True
                                      -> BasicData.Position
                                           ww1
                                           ww2
                                           ww3
                                           ww4
                                           ww5
                                           ww6
                                           ww7
                                           ww8
                                           ww9
                                           ww10
                                           ww11
                                           (GHC.Prim.+# ww12 1#)
                                           ww13
                                           ww14
                                           ww15
                                           ww16
                                           ww17
                                           ww18
                                           ww19
                                           ww20 } }
                                 0##
                                 -> case GHC.Prim.and# ipv ww6 of wild3 {
                                      DEFAULT
                                      -> case w of wild4 { GHC.Types.I# i# ->
                                         case GHC.Prim.tagToEnum#
                                                @ GHC.Types.Bool
                                                (GHC.Prim.>=# i# 64#) of wild5 {
                                           GHC.Types.False
                                           -> case GHC.Prim.and#
                                                     (GHC.Prim.uncheckedShiftL# 1## i#)
                                                     ww2 of wild6 {
                                                DEFAULT
                                                -> BasicData.Position
                                                     ww1
                                                     ww2
                                                     ww3
                                                     ww4
                                                     ww5
                                                     ww6
                                                     ww7
                                                     ww8
                                                     ww9
                                                     ww10
                                                     ww11
                                                     0#
                                                     ww13
                                                     ww14
                                                     ww15
                                                     ww16
                                                     ww17
                                                     ww18
                                                     ww19
                                                     ww20
                                                0##
                                                -> BasicData.Position
                                                     ww1
                                                     ww2
                                                     ww3
                                                     ww4
                                                     ww5
                                                     ww6
                                                     ww7
                                                     ww8
                                                     ww9
                                                     ww10
                                                     ww11
                                                     (GHC.Prim.+# ww12 1#)
                                                     ww13
                                                     ww14
                                                     ww15
                                                     ww16
                                                     ww17
                                                     ww18
                                                     ww19
                                                     ww20 }
                                           GHC.Types.True
                                           -> BasicData.Position
                                                ww1
                                                ww2
                                                ww3
                                                ww4
                                                ww5
                                                ww6
                                                ww7
                                                ww8
                                                ww9
                                                ww10
                                                ww11
                                                (GHC.Prim.+# ww12 1#)
                                                ww13
                                                ww14
                                                ww15
                                                ww16
                                                ww17
                                                ww18
                                                ww19
                                                ww20 } }
                                      0##
                                      -> case GHC.Prim.and# ipv ww7 of wild4 {
                                           DEFAULT
                                           -> case w of wild5 { GHC.Types.I# i# ->
                                              case GHC.Prim.tagToEnum#
                                                     @ GHC.Types.Bool
                                                     (GHC.Prim.>=# i# 64#) of wild6 {
                                                GHC.Types.False
                                                -> case GHC.Prim.and#
                                                          (GHC.Prim.uncheckedShiftL# 1## i#)
                                                          ww2 of wild7 {
                                                     DEFAULT
                                                     -> BasicData.Position
                                                          ww1
                                                          ww2
                                                          ww3
                                                          ww4
                                                          ww5
                                                          ww6
                                                          ww7
                                                          ww8
                                                          ww9
                                                          ww10
                                                          ww11
                                                          0#
                                                          ww13
                                                          ww14
                                                          ww15
                                                          ww16
                                                          ww17
                                                          ww18
                                                          ww19
                                                          ww20
                                                     0##
                                                     -> BasicData.Position
                                                          ww1
                                                          ww2
                                                          ww3
                                                          ww4
                                                          ww5
                                                          ww6
                                                          ww7
                                                          ww8
                                                          ww9
                                                          ww10
                                                          ww11
                                                          (GHC.Prim.+# ww12 1#)
                                                          ww13
                                                          ww14
                                                          ww15
                                                          ww16
                                                          ww17
                                                          ww18
                                                          ww19
                                                          ww20 }
                                                GHC.Types.True
                                                -> BasicData.Position
                                                     ww1
                                                     ww2
                                                     ww3
                                                     ww4
                                                     ww5
                                                     ww6
                                                     ww7
                                                     ww8
                                                     ww9
                                                     ww10
                                                     ww11
                                                     (GHC.Prim.+# ww12 1#)
                                                     ww13
                                                     ww14
                                                     ww15
                                                     ww16
                                                     ww17
                                                     ww18
                                                     ww19
                                                     ww20 } }
                                           0##
                                           -> case GHC.Prim.and# ipv ww8 of wild5 {
                                                DEFAULT
                                                -> case w of wild6 { GHC.Types.I# i# ->
                                                   case GHC.Prim.tagToEnum#
                                                          @ GHC.Types.Bool
                                                          (GHC.Prim.>=# i# 64#) of wild7 {
                                                     GHC.Types.False
                                                     -> case GHC.Prim.and#
                                                               (GHC.Prim.uncheckedShiftL# 1## i#)
                                                               ww2 of wild8 {
                                                          DEFAULT
                                                          -> BasicData.Position
                                                               ww1
                                                               ww2
                                                               ww3
                                                               ww4
                                                               ww5
                                                               ww6
                                                               ww7
                                                               ww8
                                                               ww9
                                                               ww10
                                                               ww11
                                                               0#
                                                               ww13
                                                               ww14
                                                               ww15
                                                               ww16
                                                               ww17
                                                               ww18
                                                               ww19
                                                               ww20
                                                          0##
                                                          -> BasicData.Position
                                                               ww1
                                                               ww2
                                                               ww3
                                                               ww4
                                                               ww5
                                                               ww6
                                                               ww7
                                                               ww8
                                                               ww9
                                                               ww10
                                                               ww11
                                                               (GHC.Prim.+# ww12 1#)
                                                               ww13
                                                               ww14
                                                               ww15
                                                               ww16
                                                               ww17
                                                               ww18
                                                               ww19
                                                               ww20 }
                                                     GHC.Types.True
                                                     -> BasicData.Position
                                                          ww1
                                                          ww2
                                                          ww3
                                                          ww4
                                                          ww5
                                                          ww6
                                                          ww7
                                                          ww8
                                                          ww9
                                                          ww10
                                                          ww11
                                                          (GHC.Prim.+# ww12 1#)
                                                          ww13
                                                          ww14
                                                          ww15
                                                          ww16
                                                          ww17
                                                          ww18
                                                          ww19
                                                          ww20 } }
                                                0##
                                                -> case Position.arrangeHalfMoveClock1
                                                   ret_ty BasicData.Position
                                                   of {} } } } } } }
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 64#) of wild2 {
                   GHC.Types.False -> $j (GHC.Prim.uncheckedShiftL# 1## ww)
                   GHC.Types.True -> $j 0## }) -}
44fe235e046d26e5f69b1b1a08e98904
  $watSquare ::
    GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> BasicData.Color
    -> GHC.Prim.Int#
    -> GHC.Base.Maybe (BasicData.Color, BasicData.PieceType)
  {- Arity: 9, HasNoCafRefs,
     Strictness: <L,U><S,U><L,U><L,U><L,U><L,U><L,U><L,U><S,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Word#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Word#)
                   (ww4 :: GHC.Prim.Word#)
                   (ww5 :: GHC.Prim.Word#)
                   (ww6 :: GHC.Prim.Word#)
                   (ww7 :: BasicData.Color)
                   (ww8 :: GHC.Prim.Int#) ->
                 let {
                   $j :: GHC.Prim.Word#
                         -> GHC.Base.Maybe (BasicData.Color, BasicData.PieceType)
                     {- Arity: 1 -}
                   = \ (ww9 :: GHC.Prim.Word#)[OneShot] ->
                     let {
                       $j1 :: BasicData.PieceType
                              -> GHC.Base.Maybe (BasicData.Color, BasicData.PieceType)
                         {- Arity: 1 -}
                       = \ (x :: BasicData.PieceType)[OneShot] ->
                         GHC.Base.Just
                           @ (BasicData.Color, BasicData.PieceType)
                           (case GHC.Prim.tagToEnum#
                                   @ GHC.Types.Bool
                                   (GHC.Prim.>=# ww8 64#) of wild2 {
                              GHC.Types.False
                              -> case GHC.Prim.and#
                                        ww
                                        (GHC.Prim.uncheckedShiftL# 1## ww8) of wild {
                                   DEFAULT -> ww7
                                   0##
                                   -> case ww7 of wild1 {
                                        BasicData.White -> BasicData.Black
                                        BasicData.Black -> BasicData.White } }
                              GHC.Types.True
                              -> case ww7 of wild {
                                   BasicData.White -> BasicData.Black
                                   BasicData.Black -> BasicData.White } },
                            x)
                     } in
                     case GHC.Prim.and# ww9 ww1 of wild {
                       DEFAULT -> $j1 BasicData.Pawn
                       0##
                       -> case GHC.Prim.and# ww9 ww2 of wild1 {
                            DEFAULT -> $j1 BasicData.Knight
                            0##
                            -> case GHC.Prim.and# ww9 ww3 of wild2 {
                                 DEFAULT -> $j1 BasicData.Bishop
                                 0##
                                 -> case GHC.Prim.and# ww9 ww4 of wild3 {
                                      DEFAULT -> $j1 BasicData.Rook
                                      0##
                                      -> case GHC.Prim.and# ww9 ww5 of wild4 {
                                           DEFAULT -> $j1 BasicData.Queen
                                           0##
                                           -> case GHC.Prim.and# ww9 ww6 of wild5 {
                                                DEFAULT -> $j1 BasicData.King
                                                0##
                                                -> GHC.Base.Nothing
                                                     @ (BasicData.Color,
                                                        BasicData.PieceType) } } } } } }
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww8 64#) of wild2 {
                   GHC.Types.False -> $j (GHC.Prim.uncheckedShiftL# 1## ww8)
                   GHC.Types.True -> $j 0## }) -}
afc45b778d049b024ddb12512de34b7a
  $wcalcDefendMap ::
    GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> BasicData.Color
    -> GHC.Prim.Word#
  {- Arity: 9, HasNoCafRefs,
     Strictness: <S,U><S,U><S,U><S,U><S,U><S,U><S,U><S,U><S,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Word#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Word#)
                   (ww4 :: GHC.Prim.Word#)
                   (ww5 :: GHC.Prim.Word#)
                   (ww6 :: GHC.Prim.Word#)
                   (ww7 :: GHC.Prim.Word#)
                   (ww8 :: BasicData.Color) ->
                 let {
                   x :: GHC.Prim.Word# = GHC.Prim.and# ww1 ww2
                 } in
                 let {
                   $w$j :: GHC.Prim.Word# -> GHC.Prim.Word#
                     {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                   = \ (w :: GHC.Prim.Word#)[OneShot] ->
                     let {
                       ipv :: GHC.Prim.Word#
                       = GHC.Prim.xor#
                           (GHC.Prim.xor# (GHC.Prim.or# ww ww1) (GHC.Prim.and# ww ww7))
                           18446744073709551615##
                     } in
                     let {
                       ipv1 :: GHC.Prim.Word# = GHC.Prim.and# ww1 ww3
                     } in
                     let {
                       ipv2 :: GHC.Prim.Word#
                       = GHC.Prim.and#
                           (GHC.Prim.and# ipv (GHC.Prim.uncheckedShiftL# ipv 9#))
                           18374403900871474942##
                     } in
                     let {
                       ww9 :: GHC.Prim.Word# = GHC.Prim.and# (GHC.Prim.or# ww4 ww6) ww1
                     } in
                     let {
                       ipv3 :: GHC.Prim.Word#
                       = GHC.Prim.or#
                           ww9
                           (GHC.Prim.and#
                              (GHC.Prim.and# (GHC.Prim.uncheckedShiftL# ww9 9#) ipv)
                              18374403900871474942##)
                     } in
                     let {
                       ipv4 :: GHC.Prim.Word#
                       = GHC.Prim.or#
                           ipv3
                           (GHC.Prim.and#
                              (GHC.Prim.and# (GHC.Prim.uncheckedShiftL# ipv3 18#) ipv2)
                              18229723555195321344##)
                     } in
                     let {
                       ipv5 :: GHC.Prim.Word#
                       = GHC.Prim.and#
                           (GHC.Prim.and# ipv (GHC.Prim.uncheckedShiftRL# ipv 7#))
                           18374403900871474942##
                     } in
                     let {
                       ipv6 :: GHC.Prim.Word#
                       = GHC.Prim.or#
                           ww9
                           (GHC.Prim.and#
                              (GHC.Prim.and# (GHC.Prim.uncheckedShiftRL# ww9 7#) ipv)
                              18374403900871474942##)
                     } in
                     let {
                       ipv7 :: GHC.Prim.Word#
                       = GHC.Prim.or#
                           ipv6
                           (GHC.Prim.and#
                              (GHC.Prim.and# (GHC.Prim.uncheckedShiftRL# ipv6 14#) ipv5)
                              71209857637481724##)
                     } in
                     let {
                       ipv8 :: GHC.Prim.Word#
                       = GHC.Prim.and#
                           (GHC.Prim.and# ipv (GHC.Prim.uncheckedShiftRL# ipv 9#))
                           9187201950435737471##
                     } in
                     let {
                       ipv9 :: GHC.Prim.Word#
                       = GHC.Prim.or#
                           ww9
                           (GHC.Prim.and#
                              (GHC.Prim.and# (GHC.Prim.uncheckedShiftRL# ww9 9#) ipv)
                              9187201950435737471##)
                     } in
                     let {
                       ipv10 :: GHC.Prim.Word#
                       = GHC.Prim.or#
                           ipv9
                           (GHC.Prim.and#
                              (GHC.Prim.and# (GHC.Prim.uncheckedShiftRL# ipv9 18#) ipv8)
                              17802464409370431##)
                     } in
                     let {
                       ipv11 :: GHC.Prim.Word#
                       = GHC.Prim.and#
                           (GHC.Prim.and# ipv (GHC.Prim.uncheckedShiftL# ipv 7#))
                           9187201950435737471##
                     } in
                     let {
                       ipv12 :: GHC.Prim.Word#
                       = GHC.Prim.or#
                           ww9
                           (GHC.Prim.and#
                              (GHC.Prim.and# (GHC.Prim.uncheckedShiftL# ww9 7#) ipv)
                              9187201950435737471##)
                     } in
                     let {
                       ipv13 :: GHC.Prim.Word#
                       = GHC.Prim.or#
                           ipv12
                           (GHC.Prim.and#
                              (GHC.Prim.and# (GHC.Prim.uncheckedShiftL# ipv12 14#) ipv11)
                              4557430888798830336##)
                     } in
                     let {
                       ipv14 :: GHC.Prim.Word#
                       = GHC.Prim.and#
                           (GHC.Prim.and# ipv (GHC.Prim.uncheckedShiftL# ipv 1#))
                           18374403900871474942##
                     } in
                     let {
                       ww10 :: GHC.Prim.Word# = GHC.Prim.and# (GHC.Prim.or# ww5 ww6) ww1
                     } in
                     let {
                       ipv15 :: GHC.Prim.Word#
                       = GHC.Prim.or#
                           ww10
                           (GHC.Prim.and#
                              (GHC.Prim.and# (GHC.Prim.uncheckedShiftL# ww10 1#) ipv)
                              18374403900871474942##)
                     } in
                     let {
                       ipv16 :: GHC.Prim.Word#
                       = GHC.Prim.or#
                           ipv15
                           (GHC.Prim.and#
                              (GHC.Prim.and# (GHC.Prim.uncheckedShiftL# ipv15 2#) ipv14)
                              18229723555195321596##)
                     } in
                     let {
                       ipv17 :: GHC.Prim.Word#
                       = GHC.Prim.or#
                           ww10
                           (GHC.Prim.and# (GHC.Prim.uncheckedShiftRL# ww10 8#) ipv)
                     } in
                     let {
                       ipv18 :: GHC.Prim.Word#
                       = GHC.Prim.and# ipv (GHC.Prim.uncheckedShiftRL# ipv 8#)
                     } in
                     let {
                       ipv19 :: GHC.Prim.Word#
                       = GHC.Prim.or#
                           ipv17
                           (GHC.Prim.and# (GHC.Prim.uncheckedShiftRL# ipv17 16#) ipv18)
                     } in
                     let {
                       ipv20 :: GHC.Prim.Word#
                       = GHC.Prim.and#
                           (GHC.Prim.and# ipv (GHC.Prim.uncheckedShiftRL# ipv 1#))
                           9187201950435737471##
                     } in
                     let {
                       ipv21 :: GHC.Prim.Word#
                       = GHC.Prim.or#
                           ww10
                           (GHC.Prim.and#
                              (GHC.Prim.and# (GHC.Prim.uncheckedShiftRL# ww10 1#) ipv)
                              9187201950435737471##)
                     } in
                     let {
                       ipv22 :: GHC.Prim.Word#
                       = GHC.Prim.or#
                           ipv21
                           (GHC.Prim.and#
                              (GHC.Prim.and# (GHC.Prim.uncheckedShiftRL# ipv21 2#) ipv20)
                              4557430888798830399##)
                     } in
                     let {
                       ipv23 :: GHC.Prim.Word#
                       = GHC.Prim.or#
                           ww10
                           (GHC.Prim.and# (GHC.Prim.uncheckedShiftL# ww10 8#) ipv)
                     } in
                     let {
                       ipv24 :: GHC.Prim.Word#
                       = GHC.Prim.and# ipv (GHC.Prim.uncheckedShiftL# ipv 8#)
                     } in
                     let {
                       ipv25 :: GHC.Prim.Word#
                       = GHC.Prim.or#
                           ipv23
                           (GHC.Prim.and# (GHC.Prim.uncheckedShiftL# ipv23 16#) ipv24)
                     } in
                     let {
                       ipv26 :: GHC.Prim.Word# = GHC.Prim.and# ww1 ww7
                     } in
                     GHC.Prim.or#
                       (GHC.Prim.or#
                          (GHC.Prim.or#
                             (GHC.Prim.or#
                                w
                                (GHC.Prim.or#
                                   (GHC.Prim.or#
                                      (GHC.Prim.or#
                                         (GHC.Prim.or#
                                            (GHC.Prim.or#
                                               (GHC.Prim.or#
                                                  (GHC.Prim.or#
                                                     (GHC.Prim.and#
                                                        (GHC.Prim.uncheckedShiftL# ipv1 15#)
                                                        9187201950435737471##)
                                                     (GHC.Prim.and#
                                                        (GHC.Prim.uncheckedShiftL# ipv1 6#)
                                                        4557430888798830399##))
                                                  (GHC.Prim.and#
                                                     (GHC.Prim.uncheckedShiftRL# ipv1 10#)
                                                     4557430888798830399##))
                                               (GHC.Prim.and#
                                                  (GHC.Prim.uncheckedShiftRL# ipv1 17#)
                                                  9187201950435737471##))
                                            (GHC.Prim.and#
                                               (GHC.Prim.uncheckedShiftRL# ipv1 15#)
                                               18374403900871474942##))
                                         (GHC.Prim.and#
                                            (GHC.Prim.uncheckedShiftRL# ipv1 6#)
                                            18229723555195321596##))
                                      (GHC.Prim.and#
                                         (GHC.Prim.uncheckedShiftL# ipv1 10#)
                                         18229723555195321596##))
                                   (GHC.Prim.and#
                                      (GHC.Prim.uncheckedShiftL# ipv1 17#)
                                      18374403900871474942##)))
                             (GHC.Prim.or#
                                (GHC.Prim.or#
                                   (GHC.Prim.or#
                                      (GHC.Prim.and#
                                         (GHC.Prim.uncheckedShiftL#
                                            (GHC.Prim.or#
                                               ipv13
                                               (GHC.Prim.and#
                                                  (GHC.Prim.and#
                                                     (GHC.Prim.uncheckedShiftL# ipv13 28#)
                                                     (GHC.Prim.and#
                                                        (GHC.Prim.and#
                                                           ipv11
                                                           (GHC.Prim.uncheckedShiftL# ipv11 14#))
                                                        4557430888798830336##))
                                                  1085102592570163200##))
                                            7#)
                                         9187201950435737471##)
                                      (GHC.Prim.and#
                                         (GHC.Prim.uncheckedShiftRL#
                                            (GHC.Prim.or#
                                               ipv10
                                               (GHC.Prim.and#
                                                  (GHC.Prim.and#
                                                     (GHC.Prim.uncheckedShiftRL# ipv10 36#)
                                                     (GHC.Prim.and#
                                                        (GHC.Prim.and#
                                                           ipv8
                                                           (GHC.Prim.uncheckedShiftRL# ipv8 18#))
                                                        17802464409370431##))
                                                  64677154575##))
                                            9#)
                                         9187201950435737471##))
                                   (GHC.Prim.and#
                                      (GHC.Prim.uncheckedShiftRL#
                                         (GHC.Prim.or#
                                            ipv7
                                            (GHC.Prim.and#
                                               (GHC.Prim.and#
                                                  (GHC.Prim.uncheckedShiftRL# ipv7 28#)
                                                  (GHC.Prim.and#
                                                     (GHC.Prim.and#
                                                        ipv5
                                                        (GHC.Prim.uncheckedShiftRL# ipv5 14#))
                                                     71209857637481724##))
                                               1034834473200##))
                                         7#)
                                      18374403900871474942##))
                                (GHC.Prim.and#
                                   (GHC.Prim.uncheckedShiftL#
                                      (GHC.Prim.or#
                                         ipv4
                                         (GHC.Prim.and#
                                            (GHC.Prim.and#
                                               (GHC.Prim.uncheckedShiftL# ipv4 36#)
                                               (GHC.Prim.and#
                                                  (GHC.Prim.and#
                                                     ipv2
                                                     (GHC.Prim.uncheckedShiftL# ipv2 18#))
                                                  18229723555195321344##))
                                            17361641481122611200##))
                                      9#)
                                   18374403900871474942##)))
                          (GHC.Prim.or#
                             (GHC.Prim.or#
                                (GHC.Prim.or#
                                   (GHC.Prim.uncheckedShiftL#
                                      (GHC.Prim.or#
                                         ipv25
                                         (GHC.Prim.and#
                                            (GHC.Prim.uncheckedShiftL# ipv25 32#)
                                            (GHC.Prim.and#
                                               ipv24
                                               (GHC.Prim.uncheckedShiftL# ipv24 16#))))
                                      8#)
                                   (GHC.Prim.and#
                                      (GHC.Prim.uncheckedShiftRL#
                                         (GHC.Prim.or#
                                            ipv22
                                            (GHC.Prim.and#
                                               (GHC.Prim.and#
                                                  (GHC.Prim.uncheckedShiftRL# ipv22 4#)
                                                  (GHC.Prim.and#
                                                     (GHC.Prim.and#
                                                        ipv20
                                                        (GHC.Prim.uncheckedShiftRL# ipv20 2#))
                                                     4557430888798830399##))
                                               1085102592571150095##))
                                         1#)
                                      9187201950435737471##))
                                (GHC.Prim.uncheckedShiftRL#
                                   (GHC.Prim.or#
                                      ipv19
                                      (GHC.Prim.and#
                                         (GHC.Prim.uncheckedShiftRL# ipv19 32#)
                                         (GHC.Prim.and#
                                            ipv18
                                            (GHC.Prim.uncheckedShiftRL# ipv18 16#))))
                                   8#))
                             (GHC.Prim.and#
                                (GHC.Prim.uncheckedShiftL#
                                   (GHC.Prim.or#
                                      ipv16
                                      (GHC.Prim.and#
                                         (GHC.Prim.and#
                                            (GHC.Prim.uncheckedShiftL# ipv16 4#)
                                            (GHC.Prim.and#
                                               (GHC.Prim.and#
                                                  ipv14
                                                  (GHC.Prim.uncheckedShiftL# ipv14 2#))
                                               18229723555195321596##))
                                         17361641481138401520##))
                                   1#)
                                18374403900871474942##)))
                       (GHC.Prim.or#
                          (GHC.Prim.or#
                             (GHC.Prim.or#
                                (GHC.Prim.or#
                                   (GHC.Prim.or#
                                      (GHC.Prim.or#
                                         (GHC.Prim.or#
                                            (GHC.Prim.uncheckedShiftL# ipv26 8#)
                                            (GHC.Prim.and#
                                               (GHC.Prim.uncheckedShiftL# ipv26 7#)
                                               9187201950435737471##))
                                         (GHC.Prim.and#
                                            (GHC.Prim.uncheckedShiftRL# ipv26 1#)
                                            9187201950435737471##))
                                      (GHC.Prim.and#
                                         (GHC.Prim.uncheckedShiftRL# ipv26 9#)
                                         9187201950435737471##))
                                   (GHC.Prim.uncheckedShiftRL# ipv26 8#))
                                (GHC.Prim.and#
                                   (GHC.Prim.uncheckedShiftRL# ipv26 7#)
                                   18374403900871474942##))
                             (GHC.Prim.and#
                                (GHC.Prim.uncheckedShiftL# ipv26 1#)
                                18374403900871474942##))
                          (GHC.Prim.and#
                             (GHC.Prim.uncheckedShiftL# ipv26 9#)
                             18374403900871474942##))
                 } in
                 case ww8 of wild {
                   BasicData.White
                   -> $w$j
                        (GHC.Prim.or#
                           (GHC.Prim.and#
                              (GHC.Prim.uncheckedShiftRL# x 9#)
                              9187201950435737471##)
                           (GHC.Prim.and#
                              (GHC.Prim.uncheckedShiftRL# x 7#)
                              18374403900871474942##))
                   BasicData.Black
                   -> $w$j
                        (GHC.Prim.or#
                           (GHC.Prim.and#
                              (GHC.Prim.uncheckedShiftL# x 7#)
                              9187201950435737471##)
                           (GHC.Prim.and#
                              (GHC.Prim.uncheckedShiftL# x 9#)
                              18374403900871474942##)) }) -}
35fad6edc938e4d345f873eb7a84f429
  $wcalcHashKey ::
    GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> BasicData.Color
    -> BasicData.CastleRight
    -> GHC.Prim.Int#
    -> GHC.Prim.Word#
  {- Arity: 11,
     Strictness: <L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><S,U><S,U><S,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Word#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Word#)
                   (ww4 :: GHC.Prim.Word#)
                   (ww5 :: GHC.Prim.Word#)
                   (ww6 :: GHC.Prim.Word#)
                   (ww7 :: GHC.Prim.Word#)
                   (ww8 :: BasicData.Color)
                   (ww9 :: BasicData.CastleRight)
                   (ww10 :: GHC.Prim.Int#) ->
                 case GHC.Base.map
                        @ (BasicData.Color, BasicData.PieceType, Alias.Square)
                        @ GHC.Word.Word64
                        Position.pieceHashKey
                        (Position.pieces
                           (BasicData.Position
                              ww
                              ww1
                              ww2
                              ww3
                              ww4
                              ww5
                              ww6
                              ww7
                              ww8
                              ww9
                              ww10
                              0#
                              0#
                              0##
                              0##
                              0##
                              0##
                              0#
                              0##
                              Position.calcHashKey23)) of wild {
                   [] -> case GHC.List.foldl2 ret_ty GHC.Prim.Word# of {}
                   : x xs
                   -> case x of ww11 { GHC.Word.W64# ww12 ->
                      case Position.$wgo2 xs ww12 of ww13 { DEFAULT ->
                      let {
                        $w$j :: GHC.Prim.Word# -> GHC.Prim.Word#
                          {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                        = \ (w :: GHC.Prim.Word#)[OneShot] ->
                          let {
                            x1 :: GHC.Prim.Int#
                            = GHC.Prim.dataToTag# @ BasicData.CastleRight ww9
                          } in
                          case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.>=# x1 0#) of wild1 {
                            GHC.Types.False
                            -> case Position.calcHashKey22 of wild2 { GHC.Types.I# n# ->
                               case Position.calcHashKey21 n# x1 ret_ty GHC.Prim.Word# of {} }
                            GHC.Types.True
                            -> case Position.calcHashKey22 of wild2 { GHC.Types.I# y ->
                               case GHC.Prim.tagToEnum#
                                      @ GHC.Types.Bool
                                      (GHC.Prim.<# x1 y) of wild3 {
                                 GHC.Types.False
                                 -> case Position.calcHashKey21 y x1 ret_ty GHC.Prim.Word# of {}
                                 GHC.Types.True
                                 -> case Position.calcHashKey18
                                           `cast`
                                         (Trans
                                              (Data.Vector.Unboxed.Base.D:R:VectorWord640[0])
                                              (Data.Vector.Unboxed.Base.N:R:VectorWord64[0])) of wild4 { Data.Vector.Primitive.Vector dt dt1 dt2 ->
                                    case GHC.Prim.indexWord64Array#
                                           dt2
                                           (GHC.Prim.+# dt x1) of wild5 { DEFAULT ->
                                    case ww10 of wild6 {
                                      DEFAULT
                                      -> let {
                                           x2 :: GHC.Prim.Int# = GHC.Prim.remInt# wild6 8#
                                         } in
                                         case GHC.Prim.tagToEnum#
                                                @ GHC.Types.Bool
                                                (GHC.Prim.>=# x2 0#) of wild7 {
                                           GHC.Types.False
                                           -> case Position.calcHashKey17 of wild8 { GHC.Types.I# n# ->
                                              case Position.calcHashKey21 n# x2
                                              ret_ty GHC.Prim.Word#
                                              of {} }
                                           GHC.Types.True
                                           -> case Position.calcHashKey17 of wild8 { GHC.Types.I# y1 ->
                                              case GHC.Prim.tagToEnum#
                                                     @ GHC.Types.Bool
                                                     (GHC.Prim.<# x2 y1) of wild9 {
                                                GHC.Types.False
                                                -> case Position.calcHashKey21 y1 x2
                                                   ret_ty GHC.Prim.Word#
                                                   of {}
                                                GHC.Types.True
                                                -> case Position.calcHashKey1
                                                          `cast`
                                                        (Trans
                                                             (Data.Vector.Unboxed.Base.D:R:VectorWord640[0])
                                                             (Data.Vector.Unboxed.Base.N:R:VectorWord64[0])) of wild10 { Data.Vector.Primitive.Vector dt4 dt5 dt6 ->
                                                   case GHC.Prim.indexWord64Array#
                                                          dt6
                                                          (GHC.Prim.+#
                                                             dt4
                                                             x2) of wild11 { DEFAULT ->
                                                   GHC.Prim.xor#
                                                     (GHC.Prim.xor# (GHC.Prim.xor# ww13 w) wild5)
                                                     wild11 } } } } }
                                      0# -> GHC.Prim.xor# (GHC.Prim.xor# ww13 w) wild5 } } } } } }
                      } in
                      case ww8 of wild1 {
                        BasicData.White -> $w$j 0##
                        BasicData.Black
                        -> case Position.colorHashKey of wild2 { GHC.Word.W64# y# ->
                           $w$j y# } } } } }) -}
e90731227edc411e7750b766a0d0ce63
  $wcalcMaterial :: BasicData.Position -> GHC.Prim.Int#
  {- Arity: 1,
     Strictness: <L,U(U,U,U,U,U,U,U,U,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Inline: [0] -}
87aaf577e489d2b7dfb021bb5a424c0a
  $wcanDraw ::
    GHC.Prim.Int#
    -> GHC.Prim.Word# -> [Alias.ZobristKey] -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <S,U><L,U><S,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: [Alias.ZobristKey]) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 100#) of wild {
                   GHC.Types.False
                   -> letrec {
                        $wgo5 :: [GHC.Word.Word64] -> GHC.Prim.Int# -> GHC.Prim.Int#
                          {- Arity: 2, Strictness: <S,1*U><L,U>, Inline: [0] -}
                        = \ (w :: [GHC.Word.Word64]) (ww3 :: GHC.Prim.Int#) ->
                          case w of wild1 {
                            [] -> ww3
                            : y ys
                            -> case y of wild2 { GHC.Word.W64# x ->
                               case GHC.Prim.tagToEnum#
                                      @ GHC.Types.Bool
                                      (GHC.Prim.eqWord# x ww1) of wild3 {
                                 GHC.Types.False -> $wgo5 ys ww3
                                 GHC.Types.True -> $wgo5 ys (GHC.Prim.+# ww3 1#) } } }
                      } in
                      case $wgo5 ww2 0# of ww3 { DEFAULT ->
                      GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.>=# ww3 2#) }
                   GHC.Types.True -> GHC.Types.True }) -}
cb101347441a0bad16f47d3657db6567
  $wcastle ::
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> BasicData.Color
    -> BasicData.CastleRight
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Prim.Word#
    -> [Alias.ZobristKey]
    -> BasicData.Position
  {- Arity: 22,
     Strictness: <S,U><S,U><S,U><S,U><S,U><S,U><S,U><S,U><S,U><S,U><S,U><S,U><S,U><S,U><S,U><S,U><S,U><S,U><S,U><S,U><S,U><S,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Word#)
                   (ww4 :: GHC.Prim.Word#)
                   (ww5 :: GHC.Prim.Word#)
                   (ww6 :: GHC.Prim.Word#)
                   (ww7 :: GHC.Prim.Word#)
                   (ww8 :: GHC.Prim.Word#)
                   (ww9 :: GHC.Prim.Word#)
                   (ww10 :: BasicData.Color)
                   (ww11 :: BasicData.CastleRight)
                   (ww12 :: GHC.Prim.Int#)
                   (ww13 :: GHC.Prim.Int#)
                   (ww14 :: GHC.Prim.Int#)
                   (ww15 :: GHC.Prim.Word#)
                   (ww16 :: GHC.Prim.Word#)
                   (ww17 :: GHC.Prim.Word#)
                   (ww18 :: GHC.Prim.Word#)
                   (ww19 :: GHC.Prim.Int#)
                   (ww20 :: GHC.Prim.Word#)
                   (ww21 :: [Alias.ZobristKey]) ->
                 let {
                   $j :: GHC.Prim.Word# -> BasicData.Position
                     {- Arity: 1, Strictness: <S,U> -}
                   = \ (ipv :: GHC.Prim.Word#)[OneShot] ->
                     let {
                       $w$j :: GHC.Prim.Word#
                               -> GHC.Prim.Int# -> GHC.Prim.Int# -> BasicData.Position
                         {- Arity: 3, Strictness: <S,U><S,U><S,U>, Inline: [0] -}
                       = \ (ww22 :: GHC.Prim.Word#)[OneShot]
                           (ww23 :: GHC.Prim.Int#)[OneShot]
                           (ww24 :: GHC.Prim.Int#)[OneShot] ->
                         let {
                           $j1 :: GHC.Prim.Word# -> BasicData.Position
                             {- Arity: 1, Strictness: <S,U> -}
                           = \ (x# :: GHC.Prim.Word#)[OneShot] ->
                             case Position.$wpieceHashKey
                                    ww10
                                    BasicData.King
                                    ww of ww25 { DEFAULT ->
                             case Position.$wpieceHashKey
                                    ww10
                                    BasicData.King
                                    ww1 of ww26 { DEFAULT ->
                             case Position.$wpieceHashKey
                                    ww10
                                    BasicData.Rook
                                    ww23 of ww27 { DEFAULT ->
                             case Position.$wpieceHashKey
                                    ww10
                                    BasicData.Rook
                                    ww24 of ww28 { DEFAULT ->
                             BasicData.Position
                               (GHC.Prim.xor# x# (GHC.Prim.xor# ww22 ww2))
                               ww3
                               ww4
                               ww5
                               ww6
                               (GHC.Prim.xor# ww22 ww7)
                               ww8
                               (GHC.Prim.xor# x# ww9)
                               ww10
                               ww11
                               ww12
                               ww13
                               ww14
                               ww15
                               ww16
                               ww17
                               ww18
                               (GHC.Prim.negateInt# ww19)
                               (GHC.Prim.xor#
                                  (GHC.Prim.xor#
                                     (GHC.Prim.xor# (GHC.Prim.xor# ww25 ww26) ww27)
                                     ww28)
                                  ww20)
                               ww21 } } } }
                         } in
                         case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.>=# ww 64#) of wild2 {
                           GHC.Types.False
                           -> $j1 (GHC.Prim.or# (GHC.Prim.uncheckedShiftL# 1## ww) ipv)
                           GHC.Types.True -> $j1 ipv }
                     } in
                     case GHC.Prim.and# ipv 1085102592571150095## of wild {
                       DEFAULT
                       -> $w$j
                            (GHC.Prim.or#
                               (GHC.Prim.uncheckedShiftRL# ipv 1#)
                               (GHC.Prim.uncheckedShiftL# ipv 1#))
                            (GHC.Prim.-# ww1 1#)
                            (GHC.Prim.+# ww1 1#)
                       0##
                       -> $w$j
                            (GHC.Prim.or#
                               (GHC.Prim.uncheckedShiftL# ipv 2#)
                               (GHC.Prim.uncheckedShiftRL# ipv 1#))
                            (GHC.Prim.+# ww1 2#)
                            (GHC.Prim.-# ww1 1#) }
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww1 64#) of wild2 {
                   GHC.Types.False -> $j (GHC.Prim.uncheckedShiftL# 1## ww1)
                   GHC.Types.True -> $j 0## }) -}
3bcd42ba925cab42daa6b05f8d45ee62
  $wcastleHashKey :: BasicData.CastleRight -> GHC.Prim.Word#
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ (w :: BasicData.CastleRight) ->
                 let {
                   x :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ BasicData.CastleRight w
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# x 0#) of wild1 {
                   GHC.Types.False
                   -> case Position.calcHashKey22 of wild2 { GHC.Types.I# n# ->
                      case Position.calcHashKey21 n# x ret_ty GHC.Prim.Word# of {} }
                   GHC.Types.True
                   -> case Position.calcHashKey22 of wild2 { GHC.Types.I# y ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<# x y) of wild3 {
                        GHC.Types.False
                        -> case Position.calcHashKey21 y x ret_ty GHC.Prim.Word# of {}
                        GHC.Types.True
                        -> case Position.calcHashKey18
                                  `cast`
                                (Trans
                                     (Data.Vector.Unboxed.Base.D:R:VectorWord640[0])
                                     (Data.Vector.Unboxed.Base.N:R:VectorWord64[0])) of wild { Data.Vector.Primitive.Vector dt dt1 dt2 ->
                           GHC.Prim.indexWord64Array# dt2 (GHC.Prim.+# dt x) } } } }) -}
99274a410a6111732ab48ce4f9001866
  $wdisableCastling ::
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> BasicData.Color
    -> BasicData.CastleRight
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Prim.Word#
    -> [Alias.ZobristKey]
    -> BasicData.Position
  {- Arity: 22,
     Strictness: <S,U><S,U><S,U><S,U><S,U><S,U><S,U><S,U><S,U><S,U><S,U><S,U><S,U><S,U><S,U><S,U><S,U><S,U><S,U><S,U><S,U><S,U>,
     Inline: [0] -}
537b5b6b94205789592ed209e7e377cc
  $wepHashKey :: GHC.Prim.Int# -> GHC.Prim.Word#
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) ->
                 let {
                   x :: GHC.Prim.Int# = GHC.Prim.remInt# ww 8#
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# x 0#) of wild1 {
                   GHC.Types.False
                   -> case Position.calcHashKey17 of wild2 { GHC.Types.I# n# ->
                      case Position.calcHashKey21 n# x ret_ty GHC.Prim.Word# of {} }
                   GHC.Types.True
                   -> case Position.calcHashKey17 of wild2 { GHC.Types.I# y ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<# x y) of wild3 {
                        GHC.Types.False
                        -> case Position.calcHashKey21 y x ret_ty GHC.Prim.Word# of {}
                        GHC.Types.True
                        -> case Position.calcHashKey1
                                  `cast`
                                (Trans
                                     (Data.Vector.Unboxed.Base.D:R:VectorWord640[0])
                                     (Data.Vector.Unboxed.Base.N:R:VectorWord64[0])) of wild { Data.Vector.Primitive.Vector dt dt1 dt2 ->
                           GHC.Prim.indexWord64Array# dt2 (GHC.Prim.+# dt x) } } } }) -}
ddf8baba2311c134dfb1e9b5e99b8d9e
  $wfindCheckers ::
    GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> BasicData.Color
    -> GHC.Prim.Word#
  {- Arity: 9,
     Strictness: <S,U><S,U><S,U><S,U><S,U><S,U><S,U><S,U><S,U>,
     Inline: [0] -}
07f47e478bc934d229c0567a0fee168c
  $wfindPinners ::
    GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> (# Alias.BitBoard, Alias.BitBoard #)
  {- Arity: 6, Strictness: <L,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
16af944a2d73037d5d16010a4ffdf9a1
  $wgo ::
    System.Random.StdGen
    -> GHC.Prim.Int# -> (# GHC.Word.Word64, [GHC.Word.Word64] #)
  {- Arity: 2, Strictness: <L,U><S,1*U>, Inline: [0] -}
1c9f143ccd6d05425873204bf1495df3
  $wgo1 ::
    System.Random.StdGen
    -> GHC.Prim.Int# -> (# GHC.Word.Word64, [GHC.Word.Word64] #)
  {- Arity: 2, Strictness: <L,U><S,1*U>, Inline: [0] -}
68aa70edfba42d4190150bd06ce53388
  $wgo2 :: [Alias.ZobristKey] -> GHC.Prim.Word# -> GHC.Prim.Word#
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>, Inline: [0] -}
17290efaadfb97a5b03dc35fb4128cdb
  $wgo3 ::
    System.Random.StdGen
    -> GHC.Prim.Int# -> (# GHC.Word.Word64, [GHC.Word.Word64] #)
  {- Arity: 2, Strictness: <L,U><S,1*U>, Inline: [0] -}
14c25835630a37f0d20bcf5e46f77e54
  $winsufficientMaterial ::
    GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs, Strictness: <S,U><S,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Word#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Word#) ->
                 let {
                   x# :: GHC.Prim.Word# = GHC.Prim.or# ww ww1
                 } in
                 case GHC.Prim.word2Int# (GHC.Prim.popCnt64# x#) of wild {
                   DEFAULT
                   -> let {
                        $j :: GHC.Prim.Void# -> GHC.Types.Bool
                          {- Arity: 1, Strictness: <L,A> -}
                        = \ (w :: GHC.Prim.Void#)[OneShot] ->
                          let {
                            $j1 :: GHC.Prim.Void# -> GHC.Types.Bool
                              {- Arity: 1, Strictness: <L,A> -}
                            = \ (w1 :: GHC.Prim.Void#)[OneShot] ->
                              let {
                                $j2 :: GHC.Prim.Void# -> GHC.Types.Bool
                                  {- Arity: 1, Strictness: <L,A> -}
                                = \ (w2 :: GHC.Prim.Void#)[OneShot] ->
                                  case wild of wild1 {
                                    DEFAULT -> GHC.Types.False
                                    4#
                                    -> case GHC.Prim.word2Int#
                                              (GHC.Prim.popCnt64# (GHC.Prim.and# ww ww3)) of wild2 {
                                         DEFAULT -> GHC.Types.False
                                         1#
                                         -> case GHC.Prim.word2Int#
                                                   (GHC.Prim.popCnt64#
                                                      (GHC.Prim.and# ww1 ww3)) of wild3 {
                                              DEFAULT -> GHC.Types.False
                                              1#
                                              -> case GHC.Prim.word2Int#
                                                        (GHC.Prim.popCnt64#
                                                           (GHC.Prim.and#
                                                              ww3
                                                              6148914691236517205##)) of wild4 {
                                                   DEFAULT -> GHC.Types.True
                                                   1# -> GHC.Types.False } } } }
                              } in
                              case wild of wild1 {
                                DEFAULT -> $j2 GHC.Prim.void#
                                4#
                                -> case GHC.Prim.word2Int#
                                          (GHC.Prim.popCnt64# (GHC.Prim.and# ww1 ww2)) of wild2 {
                                     DEFAULT -> $j2 GHC.Prim.void# 2# -> GHC.Types.True } }
                          } in
                          case wild of wild1 {
                            DEFAULT -> $j1 GHC.Prim.void#
                            4#
                            -> case GHC.Prim.word2Int#
                                      (GHC.Prim.popCnt64# (GHC.Prim.and# ww ww2)) of wild2 {
                                 DEFAULT -> $j1 GHC.Prim.void# 2# -> GHC.Types.True } }
                      } in
                      case wild of wild1 {
                        DEFAULT -> $j GHC.Prim.void#
                        3#
                        -> case GHC.Prim.and# x# (GHC.Prim.or# ww2 ww3) of wild2 {
                             DEFAULT -> GHC.Types.True 0## -> $j GHC.Prim.void# } }
                   2# -> GHC.Types.True }) -}
284ff941ce574bb271b6685dc4df236b
  $wmove ::
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> BasicData.Color
    -> BasicData.CastleRight
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Prim.Word#
    -> [Alias.ZobristKey]
    -> BasicData.Position
  {- Arity: 22,
     Strictness: <S,U><S,U><L,U><L,U><S,U><L,U><L,U><L,U><L,U><L,U><S,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
b996e18ce78acf2bd1bf75dc3718b1b2
  $woverAttacker ::
    (Alias.BitBoard -> Alias.BitBoard)
    -> BasicData.PieceType
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> BasicData.Color
    -> BasicData.CastleRight
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Prim.Word#
    -> [Alias.ZobristKey]
    -> BasicData.Position
  {- Arity: 22, HasNoCafRefs,
     Strictness: <C(S(S)),C(U(U))><S,1*U><L,U><S,U><L,U><L,U><L,U><L,U><L,U><L,U><S,U><S,U><S,U><S,U><S,U><S,U><S,U><S,U><S,U><S,U><S,U><S,U>,
     Inline: [0],
     Unfolding: (\ (w :: Alias.BitBoard -> Alias.BitBoard)
                   (w1 :: BasicData.PieceType)
                   (ww :: GHC.Prim.Word#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Word#)
                   (ww4 :: GHC.Prim.Word#)
                   (ww5 :: GHC.Prim.Word#)
                   (ww6 :: GHC.Prim.Word#)
                   (ww7 :: GHC.Prim.Word#)
                   (ww8 :: BasicData.Color)
                   (ww9 :: BasicData.CastleRight)
                   (ww10 :: GHC.Prim.Int#)
                   (ww11 :: GHC.Prim.Int#)
                   (ww12 :: GHC.Prim.Int#)
                   (ww13 :: GHC.Prim.Word#)
                   (ww14 :: GHC.Prim.Word#)
                   (ww15 :: GHC.Prim.Word#)
                   (ww16 :: GHC.Prim.Word#)
                   (ww17 :: GHC.Prim.Int#)
                   (ww18 :: GHC.Prim.Word#)
                   (ww19 :: [Alias.ZobristKey]) ->
                 case w1 of wild {
                   BasicData.Pawn
                   -> case w (GHC.Word.W64# ww2) of dt17 { GHC.Word.W64# dt18 ->
                      case w (GHC.Word.W64# ww) of dt1 { GHC.Word.W64# dt2 ->
                      BasicData.Position
                        dt2
                        ww1
                        dt18
                        ww3
                        ww4
                        ww5
                        ww6
                        ww7
                        ww8
                        ww9
                        ww10
                        ww11
                        ww12
                        ww13
                        ww14
                        ww15
                        ww16
                        ww17
                        ww18
                        ww19 } }
                   BasicData.Knight
                   -> case w (GHC.Word.W64# ww3) of dt17 { GHC.Word.W64# dt18 ->
                      case w (GHC.Word.W64# ww) of dt1 { GHC.Word.W64# dt2 ->
                      BasicData.Position
                        dt2
                        ww1
                        ww2
                        dt18
                        ww4
                        ww5
                        ww6
                        ww7
                        ww8
                        ww9
                        ww10
                        ww11
                        ww12
                        ww13
                        ww14
                        ww15
                        ww16
                        ww17
                        ww18
                        ww19 } }
                   BasicData.Bishop
                   -> case w (GHC.Word.W64# ww4) of dt17 { GHC.Word.W64# dt18 ->
                      case w (GHC.Word.W64# ww) of dt1 { GHC.Word.W64# dt2 ->
                      BasicData.Position
                        dt2
                        ww1
                        ww2
                        ww3
                        dt18
                        ww5
                        ww6
                        ww7
                        ww8
                        ww9
                        ww10
                        ww11
                        ww12
                        ww13
                        ww14
                        ww15
                        ww16
                        ww17
                        ww18
                        ww19 } }
                   BasicData.Rook
                   -> case w (GHC.Word.W64# ww5) of dt17 { GHC.Word.W64# dt18 ->
                      case w (GHC.Word.W64# ww) of dt1 { GHC.Word.W64# dt2 ->
                      BasicData.Position
                        dt2
                        ww1
                        ww2
                        ww3
                        ww4
                        dt18
                        ww6
                        ww7
                        ww8
                        ww9
                        ww10
                        ww11
                        ww12
                        ww13
                        ww14
                        ww15
                        ww16
                        ww17
                        ww18
                        ww19 } }
                   BasicData.Queen
                   -> case w (GHC.Word.W64# ww6) of dt17 { GHC.Word.W64# dt18 ->
                      case w (GHC.Word.W64# ww) of dt1 { GHC.Word.W64# dt2 ->
                      BasicData.Position
                        dt2
                        ww1
                        ww2
                        ww3
                        ww4
                        ww5
                        dt18
                        ww7
                        ww8
                        ww9
                        ww10
                        ww11
                        ww12
                        ww13
                        ww14
                        ww15
                        ww16
                        ww17
                        ww18
                        ww19 } }
                   BasicData.King
                   -> case w (GHC.Word.W64# ww7) of dt17 { GHC.Word.W64# dt18 ->
                      case w (GHC.Word.W64# ww) of dt1 { GHC.Word.W64# dt2 ->
                      BasicData.Position
                        dt2
                        ww1
                        ww2
                        ww3
                        ww4
                        ww5
                        ww6
                        dt18
                        ww8
                        ww9
                        ww10
                        ww11
                        ww12
                        ww13
                        ww14
                        ww15
                        ww16
                        ww17
                        ww18
                        ww19 } } }) -}
29d661e70d41548dc1dc6cca3a42b1ed
  $woverDefender ::
    (Alias.BitBoard -> Alias.BitBoard)
    -> BasicData.PieceType
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> BasicData.Color
    -> BasicData.CastleRight
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Prim.Word#
    -> [Alias.ZobristKey]
    -> BasicData.Position
  {- Arity: 22, HasNoCafRefs,
     Strictness: <C(S(S)),C(U(U))><S,1*U><S,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><S,U><S,U><S,U><S,U><S,U><S,U><S,U><S,U><S,U><S,U><S,U><S,U>,
     Inline: [0],
     Unfolding: (\ (w :: Alias.BitBoard -> Alias.BitBoard)
                   (w1 :: BasicData.PieceType)
                   (ww :: GHC.Prim.Word#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Word#)
                   (ww4 :: GHC.Prim.Word#)
                   (ww5 :: GHC.Prim.Word#)
                   (ww6 :: GHC.Prim.Word#)
                   (ww7 :: GHC.Prim.Word#)
                   (ww8 :: BasicData.Color)
                   (ww9 :: BasicData.CastleRight)
                   (ww10 :: GHC.Prim.Int#)
                   (ww11 :: GHC.Prim.Int#)
                   (ww12 :: GHC.Prim.Int#)
                   (ww13 :: GHC.Prim.Word#)
                   (ww14 :: GHC.Prim.Word#)
                   (ww15 :: GHC.Prim.Word#)
                   (ww16 :: GHC.Prim.Word#)
                   (ww17 :: GHC.Prim.Int#)
                   (ww18 :: GHC.Prim.Word#)
                   (ww19 :: [Alias.ZobristKey]) ->
                 case w1 of wild {
                   BasicData.Pawn
                   -> case w (GHC.Word.W64# ww2) of dt17 { GHC.Word.W64# dt18 ->
                      case w (GHC.Word.W64# ww1) of dt1 { GHC.Word.W64# dt2 ->
                      BasicData.Position
                        ww
                        dt2
                        dt18
                        ww3
                        ww4
                        ww5
                        ww6
                        ww7
                        ww8
                        ww9
                        ww10
                        ww11
                        ww12
                        ww13
                        ww14
                        ww15
                        ww16
                        ww17
                        ww18
                        ww19 } }
                   BasicData.Knight
                   -> case w (GHC.Word.W64# ww3) of dt17 { GHC.Word.W64# dt18 ->
                      case w (GHC.Word.W64# ww1) of dt1 { GHC.Word.W64# dt2 ->
                      BasicData.Position
                        ww
                        dt2
                        ww2
                        dt18
                        ww4
                        ww5
                        ww6
                        ww7
                        ww8
                        ww9
                        ww10
                        ww11
                        ww12
                        ww13
                        ww14
                        ww15
                        ww16
                        ww17
                        ww18
                        ww19 } }
                   BasicData.Bishop
                   -> case w (GHC.Word.W64# ww4) of dt17 { GHC.Word.W64# dt18 ->
                      case w (GHC.Word.W64# ww1) of dt1 { GHC.Word.W64# dt2 ->
                      BasicData.Position
                        ww
                        dt2
                        ww2
                        ww3
                        dt18
                        ww5
                        ww6
                        ww7
                        ww8
                        ww9
                        ww10
                        ww11
                        ww12
                        ww13
                        ww14
                        ww15
                        ww16
                        ww17
                        ww18
                        ww19 } }
                   BasicData.Rook
                   -> case w (GHC.Word.W64# ww5) of dt17 { GHC.Word.W64# dt18 ->
                      case w (GHC.Word.W64# ww1) of dt1 { GHC.Word.W64# dt2 ->
                      BasicData.Position
                        ww
                        dt2
                        ww2
                        ww3
                        ww4
                        dt18
                        ww6
                        ww7
                        ww8
                        ww9
                        ww10
                        ww11
                        ww12
                        ww13
                        ww14
                        ww15
                        ww16
                        ww17
                        ww18
                        ww19 } }
                   BasicData.Queen
                   -> case w (GHC.Word.W64# ww6) of dt17 { GHC.Word.W64# dt18 ->
                      case w (GHC.Word.W64# ww1) of dt1 { GHC.Word.W64# dt2 ->
                      BasicData.Position
                        ww
                        dt2
                        ww2
                        ww3
                        ww4
                        ww5
                        dt18
                        ww7
                        ww8
                        ww9
                        ww10
                        ww11
                        ww12
                        ww13
                        ww14
                        ww15
                        ww16
                        ww17
                        ww18
                        ww19 } }
                   BasicData.King
                   -> case w (GHC.Word.W64# ww7) of dt17 { GHC.Word.W64# dt18 ->
                      case w (GHC.Word.W64# ww1) of dt1 { GHC.Word.W64# dt2 ->
                      BasicData.Position
                        ww
                        dt2
                        ww2
                        ww3
                        ww4
                        ww5
                        ww6
                        dt18
                        ww8
                        ww9
                        ww10
                        ww11
                        ww12
                        ww13
                        ww14
                        ww15
                        ww16
                        ww17
                        ww18
                        ww19 } } }) -}
7e6653703bab47bd97477af497bcb604
  $wpieceAt ::
    GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Base.Maybe BasicData.PieceType
  {- Arity: 7, HasNoCafRefs,
     Strictness: <S,U><L,U><L,U><L,U><L,U><L,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Word#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Word#)
                   (ww4 :: GHC.Prim.Word#)
                   (ww5 :: GHC.Prim.Word#)
                   (ww6 :: GHC.Prim.Word#) ->
                 case GHC.Prim.and# ww6 ww of wild {
                   DEFAULT -> Position.pieceAt6
                   0##
                   -> case GHC.Prim.and# ww6 ww1 of wild1 {
                        DEFAULT -> Position.pieceAt5
                        0##
                        -> case GHC.Prim.and# ww6 ww2 of wild2 {
                             DEFAULT -> Position.pieceAt4
                             0##
                             -> case GHC.Prim.and# ww6 ww3 of wild3 {
                                  DEFAULT -> Position.pieceAt3
                                  0##
                                  -> case GHC.Prim.and# ww6 ww4 of wild4 {
                                       DEFAULT -> Position.pieceAt2
                                       0##
                                       -> case GHC.Prim.and# ww6 ww5 of wild5 {
                                            DEFAULT -> Position.pieceAt1
                                            0##
                                            -> GHC.Base.Nothing
                                                 @ BasicData.PieceType } } } } } }) -}
4e914ff12b95f5a51ff54e6fa948ae46
  $wpieceHashKey ::
    BasicData.Color
    -> BasicData.PieceType -> GHC.Prim.Int# -> GHC.Prim.Word#
  {- Arity: 3, Strictness: <S,1*U><S,1*U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: BasicData.Color)
                   (ww1 :: BasicData.PieceType)
                   (ww2 :: GHC.Prim.Int#) ->
                 let {
                   $w$j :: GHC.Prim.Int# -> GHC.Prim.Word#
                     {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                   = \ (w :: GHC.Prim.Int#)[OneShot] ->
                     let {
                       $w$j1 :: GHC.Prim.Int# -> GHC.Prim.Word#
                         {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                       = \ (w1 :: GHC.Prim.Int#)[OneShot] ->
                         let {
                           x :: GHC.Prim.Int#
                           = GHC.Prim.+#
                               (GHC.Prim.+# w (GHC.Prim.*# w1 2#))
                               (GHC.Prim.*# ww2 6#)
                         } in
                         case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.>=# x 0#) of wild1 {
                           GHC.Types.False
                           -> case Position.pieceHashKey4 of wild2 { GHC.Types.I# n# ->
                              case Position.calcHashKey21 n# x ret_ty GHC.Prim.Word# of {} }
                           GHC.Types.True
                           -> case Position.pieceHashKey4 of wild2 { GHC.Types.I# y ->
                              case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.<# x y) of wild3 {
                                GHC.Types.False
                                -> case Position.calcHashKey21 y x ret_ty GHC.Prim.Word# of {}
                                GHC.Types.True
                                -> case Position.pieceHashKey1
                                          `cast`
                                        (Trans
                                             (Data.Vector.Unboxed.Base.D:R:VectorWord640[0])
                                             (Data.Vector.Unboxed.Base.N:R:VectorWord64[0])) of wild { Data.Vector.Primitive.Vector dt dt1 dt2 ->
                                   GHC.Prim.indexWord64Array# dt2 (GHC.Prim.+# dt x) } } } }
                     } in
                     case ww1 of wild {
                       BasicData.Pawn -> $w$j1 0#
                       BasicData.Knight -> $w$j1 1#
                       BasicData.Bishop -> $w$j1 2#
                       BasicData.Rook -> $w$j1 3#
                       BasicData.Queen -> $w$j1 4#
                       BasicData.King -> $w$j1 5# }
                 } in
                 case ww of wild {
                   BasicData.White -> $w$j 0# BasicData.Black -> $w$j 1# }) -}
d67670631883f194b4839140271cdcf4
  $wpromotion ::
    BasicData.PieceType
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> BasicData.Color
    -> BasicData.CastleRight
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Prim.Word#
    -> [Alias.ZobristKey]
    -> BasicData.Position
  {- Arity: 23,
     Strictness: <S,U><S,U><S,U><L,U><L,U><S,U><L,U><L,U><L,U><L,U><L,U><S,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
442ecbb015008847a436861f8ee1c9a7
  (%~~) ::
    BasicData.PieceType
    -> (Alias.BitBoard -> Alias.BitBoard)
    -> BasicData.Position
    -> BasicData.Position
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,1*U><C(S(S)),1*C1(U(U))><S(SSLLLLLLSSSSSSSSSSSS),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: BasicData.PieceType)
                   (w1 :: Alias.BitBoard -> Alias.BitBoard)
                   (w2 :: BasicData.Position) ->
                 case w2 of ww { BasicData.Position ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ww20 ->
                 Position.$w%~~
                   w
                   w1
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   ww15
                   ww16
                   ww17
                   ww18
                   ww19
                   ww20 }) -}
7322da29329a18c4544e3809c0df8bd0
  (<!>) ::
    BasicData.Position -> BasicData.PieceType -> Alias.BitBoard
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S,1*U(A,A,U,U,U,U,U,U,A,A,A,A,A,A,A,A,A,A,A,A)><S,1*U>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: BasicData.Position) (w1 :: BasicData.PieceType) ->
                 case w of ww { BasicData.Position ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ww20 ->
                 case w1 of wild {
                   BasicData.Pawn -> GHC.Word.W64# ww3
                   BasicData.Knight -> GHC.Word.W64# ww4
                   BasicData.Bishop -> GHC.Word.W64# ww5
                   BasicData.Rook -> GHC.Word.W64# ww6
                   BasicData.Queen -> GHC.Word.W64# ww7
                   BasicData.King -> GHC.Word.W64# ww8 } }) -}
91491b08e99be8d04a2f0ed9cebe626a
  (<-!->) ::
    BasicData.Position -> BasicData.PieceType -> Alias.BitBoard
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLLLLLLLLLLLLLLLLLL),1*U(U,A,U,U,U,U,U,U,A,A,A,A,A,A,A,A,A,A,A,A)><S,1*U>m,
     Unfolding: InlineRule (2, True, False)
                (\ (p :: BasicData.Position) (piece :: BasicData.PieceType) ->
                 case p of wild { BasicData.Position dt dt1 dt2 dt3 dt4 dt5 dt6 dt7 ds ds1 dt8 dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16 ds2 ->
                 case Position.<!> wild piece of wild1 { GHC.Word.W64# y# ->
                 GHC.Word.W64# (GHC.Prim.and# dt y#) } }) -}
151cb5323a11ee050e50b6a3807af24b
  (<~!~>) ::
    BasicData.Position -> BasicData.PieceType -> Alias.BitBoard
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LSLLLLLLLLLLLLLLLLLL),1*U(A,U,U,U,U,U,U,U,A,A,A,A,A,A,A,A,A,A,A,A)><S,1*U>m,
     Unfolding: InlineRule (2, True, False)
                (\ (p :: BasicData.Position) (piece :: BasicData.PieceType) ->
                 case p of wild { BasicData.Position dt dt1 dt2 dt3 dt4 dt5 dt6 dt7 ds ds1 dt8 dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16 ds2 ->
                 case Position.<!> wild piece of wild1 { GHC.Word.W64# y# ->
                 GHC.Word.W64# (GHC.Prim.and# dt1 y#) } }) -}
a76b95a035e004b94c58c40ae50f333f
  activeCastleRight :: BasicData.Position -> BasicData.CastleRight
  {- Arity: 1,
     Strictness: <S(LLLLLLLLSSLLLLLLLLLL),1*U(A,A,A,A,A,A,A,A,U,U,A,A,A,A,A,A,A,A,A,A)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: BasicData.Position) ->
                 case w of ww { BasicData.Position ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ww20 ->
                 case ww9 of wild {
                   BasicData.White
                   -> let {
                        ww21 :: GHC.Prim.Int#
                        = GHC.Prim.andI#
                            (GHC.Prim.dataToTag# @ BasicData.CastleRight ww10)
                            -4#
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww21 0#) of wild1 {
                        GHC.Types.False -> BasicData.$fEnumCastleRight1 ww21
                        GHC.Types.True
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<=# ww21 15#) of wild2 {
                             GHC.Types.False -> BasicData.$fEnumCastleRight1 ww21
                             GHC.Types.True
                             -> GHC.Prim.tagToEnum# @ BasicData.CastleRight ww21 } }
                   BasicData.Black
                   -> let {
                        ww21 :: GHC.Prim.Int#
                        = GHC.Prim.andI#
                            (GHC.Prim.dataToTag# @ BasicData.CastleRight ww10)
                            -13#
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww21 0#) of wild1 {
                        GHC.Types.False -> BasicData.$fEnumCastleRight1 ww21
                        GHC.Types.True
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<=# ww21 15#) of wild2 {
                             GHC.Types.False -> BasicData.$fEnumCastleRight1 ww21
                             GHC.Types.True
                             -> GHC.Prim.tagToEnum# @ BasicData.CastleRight ww21 } } } }) -}
6932affccfe74d72864ed6bf8ab84614
  arrangeEPSquare ::
    Alias.FromSquare
    -> Alias.ToSquare -> BasicData.Position -> BasicData.Position
  {- Arity: 3,
     Strictness: <S(S),U(U)><S(S),U(U)><S(SSSSSSSSSSSSSSSSSSSS),1*U(U,U,U,U,U,U,U,U,U,U,1*U,U,U,U,U,U,U,U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Alias.FromSquare)
                   (w1 :: Alias.ToSquare)
                   (w2 :: BasicData.Position) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { GHC.Types.I# ww3 ->
                 case w2 of ww4 { BasicData.Position ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ww20 ww21 ww22 ww23 ww24 ->
                 Position.$warrangeEPSquare
                   ww1
                   ww3
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   ww15
                   ww16
                   ww17
                   ww18
                   ww19
                   ww20
                   ww21
                   ww22
                   ww23
                   ww24 } } }) -}
3e842a92dd87f453ae0ae602422c4029
  arrangeHalfMoveClock ::
    Alias.FromSquare
    -> Alias.ToSquare -> BasicData.Position -> BasicData.Position
  {- Arity: 3,
     Strictness: <S(S),1*U(U)><L,1*U(U)><S(SSSSSSSSSSSLSSSSSSSS),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Alias.FromSquare)
                   (w1 :: Alias.ToSquare)
                   (w2 :: BasicData.Position) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { BasicData.Position ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ww20 ww21 ww22 ->
                 Position.$warrangeHalfMoveClock
                   ww1
                   w1
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   ww15
                   ww16
                   ww17
                   ww18
                   ww19
                   ww20
                   ww21
                   ww22 } }) -}
a658a054f1a9f9c0b4650795e45149d2
  arrangeHalfMoveClock1 :: BasicData.PieceType
  {- Strictness: x -}
1b19ed4ba4a19500c2ecd0edec7e03dc
  atSquare ::
    BasicData.Position
    -> Alias.Square
    -> GHC.Base.Maybe (BasicData.Color, BasicData.PieceType)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLSLLLLLLLLLLLLLLLLL),U(U,A,U,U,U,U,U,U,U,A,A,A,A,A,A,A,A,A,A,A)><S(S),U(U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: BasicData.Position) (w1 :: Alias.Square) ->
                 case w of ww { BasicData.Position ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ww20 ->
                 case w1 of ww21 { GHC.Types.I# ww22 ->
                 Position.$watSquare ww1 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww22 } }) -}
ec8d51fc67489cc884b706738dd5f5bb
  backward :: BasicData.Position -> Alias.BitBoard -> Alias.BitBoard
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLLLLLLLSLLLLLLLLLLL),1*U(A,A,A,A,A,A,A,A,U,A,A,A,A,A,A,A,A,A,A,A)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: BasicData.Position) (eta :: Alias.BitBoard) ->
                 case x of wild { BasicData.Position dt dt1 dt2 dt3 dt4 dt5 dt6 dt7 ds1 ds2 dt8 dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16 ds3 ->
                 case ds1 of wild1 {
                   BasicData.White
                   -> case eta of wild2 { GHC.Word.W64# x# ->
                      GHC.Word.W64# (GHC.Prim.uncheckedShiftRL# x# 8#) }
                   BasicData.Black
                   -> case eta of wild2 { GHC.Word.W64# x# ->
                      GHC.Word.W64# (GHC.Prim.uncheckedShiftL# x# 8#) } } }) -}
f2287ef777c814cde8e8ff0f5cb44aa4
  backward2 :: BasicData.Position -> Alias.BitBoard -> Alias.BitBoard
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLLLLLLLSLLLLLLLLLLL),1*U(A,A,A,A,A,A,A,A,U,A,A,A,A,A,A,A,A,A,A,A)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: BasicData.Position) (eta :: Alias.BitBoard) ->
                 case x of wild { BasicData.Position dt dt1 dt2 dt3 dt4 dt5 dt6 dt7 ds1 ds2 dt8 dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16 ds3 ->
                 case ds1 of wild1 {
                   BasicData.White
                   -> case eta of wild2 { GHC.Word.W64# x# ->
                      GHC.Word.W64# (GHC.Prim.uncheckedShiftRL# x# 16#) }
                   BasicData.Black
                   -> case eta of wild2 { GHC.Word.W64# x# ->
                      GHC.Word.W64# (GHC.Prim.uncheckedShiftL# x# 16#) } } }) -}
fbe22dcaaa5a1629370cb28aeabf18a8
  calcDefendMap :: BasicData.Position -> Alias.AttackMap
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SSSSSSSSSLLLLLLLLLLL),1*U(U,U,U,U,U,U,U,U,U,A,A,A,A,A,A,A,A,A,A,A)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: BasicData.Position) ->
                 case w of ww { BasicData.Position ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ww20 ->
                 case Position.$wcalcDefendMap
                        ww1
                        ww2
                        ww3
                        ww4
                        ww5
                        ww6
                        ww7
                        ww8
                        ww9 of ww21 { DEFAULT ->
                 GHC.Word.W64# ww21 } }) -}
587b13a99669afd8fd8fa93209bd0292
  calcHashKey :: BasicData.Position -> Alias.ZobristKey
  {- Arity: 1,
     Strictness: <S(LLLLLLLLSSSLLLLLLLLL),1*U(U,U,U,U,U,U,U,U,U,U,1*U,A,A,A,A,A,A,A,A,A)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: BasicData.Position) ->
                 case w of ww { BasicData.Position ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ww20 ->
                 case Position.$wcalcHashKey
                        ww1
                        ww2
                        ww3
                        ww4
                        ww5
                        ww6
                        ww7
                        ww8
                        ww9
                        ww10
                        ww11 of ww21 { DEFAULT ->
                 GHC.Word.W64# ww21 } }) -}
228af4cb338f99271a2da2997b48837e
  calcHashKey1 :: Data.Vector.Unboxed.Base.Vector Alias.ZobristKey
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ (Data.Vector.Unboxed.Base.Vector Alias.ZobristKey)
                        Position.calcHashKey2 of ds1 { (#,#) ipv1 ipv2 ->
                 ipv2 }) -}
27eb458abc82063e9aa990b497729223
  calcHashKey10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   ".\\Data\\Vector\\Primitive\\Mutable.hs"#) -}
b3bdd9391af1a309bd7c05cf34d8ade9
  calcHashKey11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Data.Vector.Primitive.Mutable"#) -}
69291538ffee61c89fec17fb1c53935f
  calcHashKey12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6"#) -}
025d9ce487a7bb7fa083a31b737097ea
  calcHashKey13 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "error"#) -}
a9c1aea678374424b5053e4749680597
  calcHashKey14 ::
    GHC.Prim.Int#
    -> GHC.ST.ST
         GHC.Prim.RealWorld
         (Data.Vector.Primitive.Mutable.MVector
            (Control.Monad.Primitive.PrimState (GHC.ST.ST GHC.Prim.RealWorld))
            GHC.Word.Word64)
  {- Arity: 1, Strictness: <L,U>x -}
10001fd802554067288d16e77c5bd221
  calcHashKey15 ::
    GHC.Prim.Int#
    -> GHC.ST.ST
         GHC.Prim.RealWorld
         (Data.Vector.Primitive.Mutable.MVector
            (Control.Monad.Primitive.PrimState (GHC.ST.ST GHC.Prim.RealWorld))
            GHC.Word.Word64)
  {- Arity: 1, Strictness: <L,U>x -}
523423ce05db1357c40ff0f2e1529335
  calcHashKey16 :: System.Random.StdGen
  {- Unfolding: (case GHC.Int.$w$cdivMod1
                        432432#
                        2147483562# of ww4 { (#,#) ww5 ww6 ->
                 case ww6 of wild { GHC.Int.I32# x# ->
                 case ww5 of ww2 { GHC.Int.I32# ww3 ->
                 case GHC.Classes.modInt# ww3 2147483398# of wild1 { DEFAULT ->
                 System.Random.StdGen
                   (GHC.Prim.narrow32Int# (GHC.Prim.+# x# 1#))
                   (GHC.Prim.narrow32Int#
                      (GHC.Prim.+# (GHC.Prim.narrow32Int# wild1) 1#)) } } } }) -}
44e5c1995e5ea1441bd5ae4a8199d99a
  calcHashKey17 :: GHC.Types.Int
  {- Unfolding: (Position.$s!_$slength Position.calcHashKey1) -}
753cc858017c87c289afc45ae5f185b0
  calcHashKey18 :: Data.Vector.Unboxed.Base.Vector Alias.ZobristKey
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ (Data.Vector.Unboxed.Base.Vector Alias.ZobristKey)
                        Position.calcHashKey19 of ds1 { (#,#) ipv1 ipv2 ->
                 ipv2 }) -}
3233f62612b06e4a7670424c7014f8e1
  calcHashKey19 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Vector.Unboxed.Base.Vector Alias.ZobristKey #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Classes.divInt#
                        9223372036854775807#
                        8# of ww4 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.># 0# ww4) of wild1 {
                   GHC.Types.False
                   -> case GHC.Prim.newByteArray#
                             @ (Control.Monad.Primitive.PrimState
                                  (GHC.ST.ST GHC.Prim.RealWorld))
                             0#
                             s1
                               `cast`
                             (GHC.Prim.State#
                                (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                          <GHC.Prim.RealWorld>_N)))_R of ds1 { (#,#) ipv ipv1 ->
                      case Position.$wgo1
                             Position.calcHashKey20
                             16# of ww { (#,#) ww1 ww2 ->
                      case Position.calcHashKey_$sfoldlM_loop2
                             ipv
                               `cast`
                             (GHC.Prim.State#
                                (Control.Monad.Primitive.D:R:PrimStateST[0]
                                     <GHC.Prim.RealWorld>_N))_R
                             ww1
                             ww2
                             0#
                             0#
                             ipv1
                             @~ (Trans
                                     (Sym (Data.Vector.Unboxed.Base.N:R:MVectorsWord64[0]
                                               <Control.Monad.Primitive.PrimState
                                                  (GHC.ST.ST GHC.Prim.RealWorld)>_N))
                                     (Trans
                                          (Sym (Data.Vector.Unboxed.Base.D:R:MVectorsWord640[0]
                                                    <Control.Monad.Primitive.PrimState
                                                       (GHC.ST.ST GHC.Prim.RealWorld)>_N))
                                          (Sub (Sym (Data.Vector.Unboxed.Base.D:R:MutableVector[0])) <Control.Monad.Primitive.PrimState
                                                                                                        (GHC.ST.ST
                                                                                                           GHC.Prim.RealWorld)>_N <GHC.Word.Word64>_N)))
                             0# of ds2 { (#,#) ipv6 ipv7 ->
                      case ipv7 of wild5 { (,) v' n ->
                      case v'
                             `cast`
                           (Trans
                                (Sub (Data.Vector.Unboxed.Base.D:R:MutableVector[0]) <Control.Monad.Primitive.PrimState
                                                                                        (GHC.ST.ST
                                                                                           GHC.Prim.RealWorld)>_N <GHC.Word.Word64>_N)
                                (Trans
                                     (Data.Vector.Unboxed.Base.D:R:MVectorsWord640[0]
                                          <Control.Monad.Primitive.PrimState
                                             (GHC.ST.ST GHC.Prim.RealWorld)>_N)
                                     (Data.Vector.Unboxed.Base.N:R:MVectorsWord64[0]
                                          <Control.Monad.Primitive.PrimState
                                             (GHC.ST.ST
                                                GHC.Prim.RealWorld)>_N))) of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                      case n of dt3 { GHC.Types.I# dt4 ->
                      case GHC.Prim.unsafeFreezeByteArray#
                             @ (Control.Monad.Primitive.PrimState
                                  (GHC.ST.ST GHC.Prim.RealWorld))
                             dt2
                             ipv6
                               `cast`
                             (GHC.Prim.State#
                                (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                          <GHC.Prim.RealWorld>_N)))_R of ds4 { (#,#) ipv2 ipv3 ->
                      (# ipv2
                           `cast`
                         (GHC.Prim.State#
                            (Control.Monad.Primitive.D:R:PrimStateST[0]
                                 <GHC.Prim.RealWorld>_N))_R,
                         (Data.Vector.Primitive.Vector @ GHC.Word.Word64 dt dt4 ipv3)
                           `cast`
                         (Trans
                              (Sym (Data.Vector.Unboxed.Base.N:R:VectorWord64[0]))
                              (Sym (Data.Vector.Unboxed.Base.D:R:VectorWord640[0]))) #) } } } } } } }
                   GHC.Types.True
                   -> case GHC.Err.error
                             @ 'GHC.Types.PtrRepLifted
                             @ (GHC.ST.ST
                                  GHC.Prim.RealWorld
                                  (Data.Vector.Primitive.Mutable.MVector
                                     (Control.Monad.Primitive.PrimState
                                        (GHC.ST.ST GHC.Prim.RealWorld))
                                     GHC.Word.Word64))
                             Position.calcHashKey5
                               `cast`
                             (Sym (GHC.Classes.N:IP[0]
                                       <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                             Position.calcHashKey3
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                Data.Vector.Unboxed.Base.Vector Alias.ZobristKey #)
                      of {} } }) -}
43fa53ad332d110806ba7dc7be9efde0
  calcHashKey2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Vector.Unboxed.Base.Vector Alias.ZobristKey #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Classes.divInt#
                        9223372036854775807#
                        8# of ww4 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.># 0# ww4) of wild1 {
                   GHC.Types.False
                   -> case GHC.Prim.newByteArray#
                             @ (Control.Monad.Primitive.PrimState
                                  (GHC.ST.ST GHC.Prim.RealWorld))
                             0#
                             s1
                               `cast`
                             (GHC.Prim.State#
                                (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                          <GHC.Prim.RealWorld>_N)))_R of ds1 { (#,#) ipv ipv1 ->
                      case Position.$wgo
                             Position.calcHashKey16
                             8# of ww { (#,#) ww1 ww2 ->
                      case Position.calcHashKey_$sfoldlM_loop
                             ipv
                               `cast`
                             (GHC.Prim.State#
                                (Control.Monad.Primitive.D:R:PrimStateST[0]
                                     <GHC.Prim.RealWorld>_N))_R
                             ww1
                             ww2
                             0#
                             0#
                             ipv1
                             @~ (Trans
                                     (Sym (Data.Vector.Unboxed.Base.N:R:MVectorsWord64[0]
                                               <Control.Monad.Primitive.PrimState
                                                  (GHC.ST.ST GHC.Prim.RealWorld)>_N))
                                     (Trans
                                          (Sym (Data.Vector.Unboxed.Base.D:R:MVectorsWord640[0]
                                                    <Control.Monad.Primitive.PrimState
                                                       (GHC.ST.ST GHC.Prim.RealWorld)>_N))
                                          (Sub (Sym (Data.Vector.Unboxed.Base.D:R:MutableVector[0])) <Control.Monad.Primitive.PrimState
                                                                                                        (GHC.ST.ST
                                                                                                           GHC.Prim.RealWorld)>_N <GHC.Word.Word64>_N)))
                             0# of ds2 { (#,#) ipv6 ipv7 ->
                      case ipv7 of wild5 { (,) v' n ->
                      case v'
                             `cast`
                           (Trans
                                (Sub (Data.Vector.Unboxed.Base.D:R:MutableVector[0]) <Control.Monad.Primitive.PrimState
                                                                                        (GHC.ST.ST
                                                                                           GHC.Prim.RealWorld)>_N <GHC.Word.Word64>_N)
                                (Trans
                                     (Data.Vector.Unboxed.Base.D:R:MVectorsWord640[0]
                                          <Control.Monad.Primitive.PrimState
                                             (GHC.ST.ST GHC.Prim.RealWorld)>_N)
                                     (Data.Vector.Unboxed.Base.N:R:MVectorsWord64[0]
                                          <Control.Monad.Primitive.PrimState
                                             (GHC.ST.ST
                                                GHC.Prim.RealWorld)>_N))) of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                      case n of dt3 { GHC.Types.I# dt4 ->
                      case GHC.Prim.unsafeFreezeByteArray#
                             @ (Control.Monad.Primitive.PrimState
                                  (GHC.ST.ST GHC.Prim.RealWorld))
                             dt2
                             ipv6
                               `cast`
                             (GHC.Prim.State#
                                (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                          <GHC.Prim.RealWorld>_N)))_R of ds4 { (#,#) ipv2 ipv3 ->
                      (# ipv2
                           `cast`
                         (GHC.Prim.State#
                            (Control.Monad.Primitive.D:R:PrimStateST[0]
                                 <GHC.Prim.RealWorld>_N))_R,
                         (Data.Vector.Primitive.Vector @ GHC.Word.Word64 dt dt4 ipv3)
                           `cast`
                         (Trans
                              (Sym (Data.Vector.Unboxed.Base.N:R:VectorWord64[0]))
                              (Sym (Data.Vector.Unboxed.Base.D:R:VectorWord640[0]))) #) } } } } } } }
                   GHC.Types.True
                   -> case GHC.Err.error
                             @ 'GHC.Types.PtrRepLifted
                             @ (GHC.ST.ST
                                  GHC.Prim.RealWorld
                                  (Data.Vector.Primitive.Mutable.MVector
                                     (Control.Monad.Primitive.PrimState
                                        (GHC.ST.ST GHC.Prim.RealWorld))
                                     GHC.Word.Word64))
                             Position.calcHashKey5
                               `cast`
                             (Sym (GHC.Classes.N:IP[0]
                                       <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                             Position.calcHashKey3
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                Data.Vector.Unboxed.Base.Vector Alias.ZobristKey #)
                      of {} } }) -}
b50dd4166827963cb7b5c34f36d36f92
  calcHashKey20 :: System.Random.StdGen
  {- Unfolding: (case GHC.Int.$w$cdivMod1
                        654312345#
                        2147483562# of ww4 { (#,#) ww5 ww6 ->
                 case ww6 of wild { GHC.Int.I32# x# ->
                 case ww5 of ww2 { GHC.Int.I32# ww3 ->
                 case GHC.Classes.modInt# ww3 2147483398# of wild1 { DEFAULT ->
                 System.Random.StdGen
                   (GHC.Prim.narrow32Int# (GHC.Prim.+# x# 1#))
                   (GHC.Prim.narrow32Int#
                      (GHC.Prim.+# (GHC.Prim.narrow32Int# wild1) 1#)) } } } }) -}
84a3706284ebcef2448a1709b6942dc0
  calcHashKey21 :: GHC.Prim.Int# -> GHC.Prim.Int# -> Alias.ZobristKey
  {- Arity: 2, Strictness: <L,U><L,U>x -}
7c48eff539ff11c6f7bebdc15c8ad3bf
  calcHashKey22 :: GHC.Types.Int
  {- Unfolding: (Position.$s!_$slength Position.calcHashKey18) -}
c50044b621a9e5ad302386c0abb37ea6
  calcHashKey23 :: [Alias.ZobristKey]
  {- Strictness: x -}
c4539fd7085f96542773ee527e0a335e
  calcHashKey3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackAppendCString#
                   "Primitive.basicUnsafeNew: length to large: "#
                   Position.calcHashKey4) -}
3290411f39d2fc9dcfcc07015ebff9d9
  calcHashKey4 :: [GHC.Types.Char]
  {- Unfolding: (case GHC.Show.$wshowSignedInt
                        0#
                        0#
                        (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                 GHC.Types.: @ GHC.Types.Char ww5 ww6 }) -}
a899bcaf58a92784e3a16f5e55353ef4
  calcHashKey5 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Position.calcHashKey13
                   Position.calcHashKey6
                   GHC.Stack.Types.EmptyCallStack) -}
3e404e3f9df5aa0aa0e7f8351f87f8f4
  calcHashKey6 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   Position.calcHashKey12
                   Position.calcHashKey11
                   Position.calcHashKey10
                   Position.calcHashKey9
                   Position.calcHashKey8
                   Position.calcHashKey9
                   Position.calcHashKey7) -}
4bbc05e7e46b41ecfaa5960eb24dad6f
  calcHashKey7 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 79#) -}
db4bd28ecf9ed4fd213d193150c60963
  calcHashKey8 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 16#) -}
a1d835b51ab827ceed9aaab828c18575
  calcHashKey9 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 97#) -}
71017886657dfcbbcb09964ec5d72138
  calcHashKey_$sfoldlM_loop ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> GHC.Word.Word64
    -> [GHC.Word.Word64]
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.MutableByteArray#
         (Control.Monad.Primitive.PrimState (GHC.ST.ST GHC.Prim.RealWorld))
    -> Data.Vector.Primitive.Mutable.MVector
         (Control.Monad.Primitive.PrimState (GHC.ST.ST GHC.Prim.RealWorld))
         GHC.Word.Word64
       ~R# Data.Vector.Generic.Base.Mutable
             Data.Vector.Unboxed.Base.Vector
             (Control.Monad.Primitive.PrimState (GHC.ST.ST GHC.Prim.RealWorld))
             GHC.Word.Word64 =>
       GHC.Prim.Int#
       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
             (Data.Vector.Generic.Base.Mutable
                Data.Vector.Unboxed.Base.Vector
                (Control.Monad.Primitive.PrimState (GHC.ST.ST GHC.Prim.RealWorld))
                Alias.ZobristKey,
              GHC.Types.Int) #)
  {- Arity: 8, Strictness: <S,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U>,
     Unfolding: (\ (sc :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot]
                   (sc1 :: GHC.Word.Word64)
                   (sc2 :: [GHC.Word.Word64])
                   (sc3 :: GHC.Prim.Int#)
                   (sc4 :: GHC.Prim.Int#)
                   (sc5 :: GHC.Prim.MutableByteArray#
                             (Control.Monad.Primitive.PrimState (GHC.ST.ST GHC.Prim.RealWorld)))
                   (sg0 :: Data.Vector.Primitive.Mutable.MVector
                             (Control.Monad.Primitive.PrimState (GHC.ST.ST GHC.Prim.RealWorld))
                             GHC.Word.Word64
                           ~R# Data.Vector.Generic.Base.Mutable
                                 Data.Vector.Unboxed.Base.Vector
                                 (Control.Monad.Primitive.PrimState (GHC.ST.ST GHC.Prim.RealWorld))
                                 GHC.Word.Word64)
                   (sc6 :: GHC.Prim.Int#) ->
                 let {
                   y :: GHC.Prim.Int# = GHC.Prim.+# sc6 1#
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# sc4 y) of wild9 {
                   GHC.Types.False
                   -> case sc1 of wild2 { GHC.Word.W64# x# ->
                      case GHC.Prim.writeWord64Array#
                             @ (Control.Monad.Primitive.PrimState
                                  (GHC.ST.ST GHC.Prim.RealWorld))
                             sc5
                             (GHC.Prim.+# sc3 sc6)
                             x#
                             sc
                               `cast`
                             (GHC.Prim.State#
                                (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                          <GHC.Prim.RealWorld>_N)))_R of s'# { DEFAULT ->
                      Position.calcHashKey_$sfoldlM_loop1
                        s'#
                          `cast`
                        (GHC.Prim.State#
                           (Control.Monad.Primitive.D:R:PrimStateST[0]
                                <GHC.Prim.RealWorld>_N))_R
                        sc2
                        sc3
                        sc4
                        sc5
                        @~ (Trans
                                (Sym (Data.Vector.Unboxed.Base.N:R:MVectorsWord64[0]
                                          <Control.Monad.Primitive.PrimState
                                             (GHC.ST.ST GHC.Prim.RealWorld)>_N))
                                (Trans
                                     (Sym (Data.Vector.Unboxed.Base.D:R:MVectorsWord640[0]
                                               <Control.Monad.Primitive.PrimState
                                                  (GHC.ST.ST GHC.Prim.RealWorld)>_N))
                                     (Sub (Sym (Data.Vector.Unboxed.Base.D:R:MutableVector[0])) <Control.Monad.Primitive.PrimState
                                                                                                   (GHC.ST.ST
                                                                                                      GHC.Prim.RealWorld)>_N <GHC.Word.Word64>_N)))
                        y } }
                   GHC.Types.True
                   -> let {
                        $j :: GHC.Prim.Int#
                              -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                    (Data.Vector.Generic.Base.Mutable
                                       Data.Vector.Unboxed.Base.Vector
                                       (Control.Monad.Primitive.PrimState
                                          (GHC.ST.ST GHC.Prim.RealWorld))
                                       Alias.ZobristKey,
                                     GHC.Types.Int) #)
                          {- Arity: 1, Strictness: <S,U> -}
                        = \ (x :: GHC.Prim.Int#)[OneShot] ->
                          case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.<# x 0#) of wild {
                            GHC.Types.False
                            -> case GHC.Classes.divInt#
                                      9223372036854775807#
                                      8# of ww4 { DEFAULT ->
                               case GHC.Prim.tagToEnum#
                                      @ GHC.Types.Bool
                                      (GHC.Prim.># x ww4) of wild1 {
                                 GHC.Types.False
                                 -> case GHC.Prim.newByteArray#
                                           @ (Control.Monad.Primitive.PrimState
                                                (GHC.ST.ST GHC.Prim.RealWorld))
                                           (GHC.Prim.*# x 8#)
                                           sc
                                             `cast`
                                           (GHC.Prim.State#
                                              (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                        <GHC.Prim.RealWorld>_N)))_R of ds1 { (#,#) ipv ipv1 ->
                                    case GHC.Prim.copyMutableByteArray#
                                           @ (Control.Monad.Primitive.PrimState
                                                (GHC.ST.ST GHC.Prim.RealWorld))
                                           sc5
                                           (GHC.Prim.*# sc3 8#)
                                           ipv1
                                           0#
                                           (GHC.Prim.*# sc4 8#)
                                           ipv of s'# { DEFAULT ->
                                    case sc1 of wild2 { GHC.Word.W64# x# ->
                                    case GHC.Prim.writeWord64Array#
                                           @ (Control.Monad.Primitive.PrimState
                                                (GHC.ST.ST GHC.Prim.RealWorld))
                                           ipv1
                                           sc6
                                           x#
                                           s'# of s'#1 { DEFAULT ->
                                    Position.calcHashKey_$sfoldlM_loop1
                                      s'#1
                                        `cast`
                                      (GHC.Prim.State#
                                         (Control.Monad.Primitive.D:R:PrimStateST[0]
                                              <GHC.Prim.RealWorld>_N))_R
                                      sc2
                                      0#
                                      x
                                      ipv1
                                      @~ (Trans
                                              (Sym (Data.Vector.Unboxed.Base.N:R:MVectorsWord64[0]
                                                        <Control.Monad.Primitive.PrimState
                                                           (GHC.ST.ST GHC.Prim.RealWorld)>_N))
                                              (Trans
                                                   (Sym (Data.Vector.Unboxed.Base.D:R:MVectorsWord640[0]
                                                             <Control.Monad.Primitive.PrimState
                                                                (GHC.ST.ST GHC.Prim.RealWorld)>_N))
                                                   (Sub (Sym (Data.Vector.Unboxed.Base.D:R:MutableVector[0])) <Control.Monad.Primitive.PrimState
                                                                                                                 (GHC.ST.ST
                                                                                                                    GHC.Prim.RealWorld)>_N <GHC.Word.Word64>_N)))
                                      y } } } }
                                 GHC.Types.True
                                 -> case Position.calcHashKey15 x
                                    ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                              (Data.Vector.Generic.Base.Mutable
                                                 Data.Vector.Unboxed.Base.Vector
                                                 (Control.Monad.Primitive.PrimState
                                                    (GHC.ST.ST GHC.Prim.RealWorld))
                                                 Alias.ZobristKey,
                                               GHC.Types.Int) #)
                                    of {} } }
                            GHC.Types.True
                            -> case Position.calcHashKey14 x
                               ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                         (Data.Vector.Generic.Base.Mutable
                                            Data.Vector.Unboxed.Base.Vector
                                            (Control.Monad.Primitive.PrimState
                                               (GHC.ST.ST GHC.Prim.RealWorld))
                                            Alias.ZobristKey,
                                          GHC.Types.Int) #)
                               of {} }
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# sc4 1#) of wild11 {
                        GHC.Types.False
                        -> let {
                             y2 :: GHC.Prim.Int# = GHC.Prim.-# y sc4
                           } in
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<=# sc4 y2) of wild13 {
                             GHC.Types.False -> $j (GHC.Prim.+# sc4 sc4)
                             GHC.Types.True -> $j (GHC.Prim.+# sc4 y2) }
                        GHC.Types.True
                        -> let {
                             y2 :: GHC.Prim.Int# = GHC.Prim.-# y sc4
                           } in
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<=# 1# y2) of wild13 {
                             GHC.Types.False -> $j (GHC.Prim.+# sc4 1#)
                             GHC.Types.True -> $j (GHC.Prim.+# sc4 y2) } } }) -}
2394ccfaaa9473237587d779cf0b3b74
  calcHashKey_$sfoldlM_loop1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> [GHC.Word.Word64]
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.MutableByteArray#
         (Control.Monad.Primitive.PrimState (GHC.ST.ST GHC.Prim.RealWorld))
    -> Data.Vector.Primitive.Mutable.MVector
         (Control.Monad.Primitive.PrimState (GHC.ST.ST GHC.Prim.RealWorld))
         GHC.Word.Word64
       ~R# Data.Vector.Generic.Base.Mutable
             Data.Vector.Unboxed.Base.Vector
             (Control.Monad.Primitive.PrimState (GHC.ST.ST GHC.Prim.RealWorld))
             GHC.Word.Word64 =>
       GHC.Prim.Int#
       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
             (Data.Vector.Generic.Base.Mutable
                Data.Vector.Unboxed.Base.Vector
                (Control.Monad.Primitive.PrimState (GHC.ST.ST GHC.Prim.RealWorld))
                Alias.ZobristKey,
              GHC.Types.Int) #)
  {- Arity: 7, Strictness: <S,U><S,1*U><L,U><L,U><L,U><L,U><L,U> -}
daf24ffc1925cf61646a6f8e745452ef
  calcHashKey_$sfoldlM_loop2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> GHC.Word.Word64
    -> [GHC.Word.Word64]
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.MutableByteArray#
         (Control.Monad.Primitive.PrimState (GHC.ST.ST GHC.Prim.RealWorld))
    -> Data.Vector.Primitive.Mutable.MVector
         (Control.Monad.Primitive.PrimState (GHC.ST.ST GHC.Prim.RealWorld))
         GHC.Word.Word64
       ~R# Data.Vector.Generic.Base.Mutable
             Data.Vector.Unboxed.Base.Vector
             (Control.Monad.Primitive.PrimState (GHC.ST.ST GHC.Prim.RealWorld))
             GHC.Word.Word64 =>
       GHC.Prim.Int#
       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
             (Data.Vector.Generic.Base.Mutable
                Data.Vector.Unboxed.Base.Vector
                (Control.Monad.Primitive.PrimState (GHC.ST.ST GHC.Prim.RealWorld))
                Alias.ZobristKey,
              GHC.Types.Int) #)
  {- Arity: 8, Strictness: <S,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U>,
     Unfolding: (\ (sc :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot]
                   (sc1 :: GHC.Word.Word64)
                   (sc2 :: [GHC.Word.Word64])
                   (sc3 :: GHC.Prim.Int#)
                   (sc4 :: GHC.Prim.Int#)
                   (sc5 :: GHC.Prim.MutableByteArray#
                             (Control.Monad.Primitive.PrimState (GHC.ST.ST GHC.Prim.RealWorld)))
                   (sg0 :: Data.Vector.Primitive.Mutable.MVector
                             (Control.Monad.Primitive.PrimState (GHC.ST.ST GHC.Prim.RealWorld))
                             GHC.Word.Word64
                           ~R# Data.Vector.Generic.Base.Mutable
                                 Data.Vector.Unboxed.Base.Vector
                                 (Control.Monad.Primitive.PrimState (GHC.ST.ST GHC.Prim.RealWorld))
                                 GHC.Word.Word64)
                   (sc6 :: GHC.Prim.Int#) ->
                 let {
                   y :: GHC.Prim.Int# = GHC.Prim.+# sc6 1#
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# sc4 y) of wild9 {
                   GHC.Types.False
                   -> case sc1 of wild2 { GHC.Word.W64# x# ->
                      case GHC.Prim.writeWord64Array#
                             @ (Control.Monad.Primitive.PrimState
                                  (GHC.ST.ST GHC.Prim.RealWorld))
                             sc5
                             (GHC.Prim.+# sc3 sc6)
                             x#
                             sc
                               `cast`
                             (GHC.Prim.State#
                                (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                          <GHC.Prim.RealWorld>_N)))_R of s'# { DEFAULT ->
                      Position.calcHashKey_$sfoldlM_loop3
                        s'#
                          `cast`
                        (GHC.Prim.State#
                           (Control.Monad.Primitive.D:R:PrimStateST[0]
                                <GHC.Prim.RealWorld>_N))_R
                        sc2
                        sc3
                        sc4
                        sc5
                        @~ (Trans
                                (Sym (Data.Vector.Unboxed.Base.N:R:MVectorsWord64[0]
                                          <Control.Monad.Primitive.PrimState
                                             (GHC.ST.ST GHC.Prim.RealWorld)>_N))
                                (Trans
                                     (Sym (Data.Vector.Unboxed.Base.D:R:MVectorsWord640[0]
                                               <Control.Monad.Primitive.PrimState
                                                  (GHC.ST.ST GHC.Prim.RealWorld)>_N))
                                     (Sub (Sym (Data.Vector.Unboxed.Base.D:R:MutableVector[0])) <Control.Monad.Primitive.PrimState
                                                                                                   (GHC.ST.ST
                                                                                                      GHC.Prim.RealWorld)>_N <GHC.Word.Word64>_N)))
                        y } }
                   GHC.Types.True
                   -> let {
                        $j :: GHC.Prim.Int#
                              -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                    (Data.Vector.Generic.Base.Mutable
                                       Data.Vector.Unboxed.Base.Vector
                                       (Control.Monad.Primitive.PrimState
                                          (GHC.ST.ST GHC.Prim.RealWorld))
                                       Alias.ZobristKey,
                                     GHC.Types.Int) #)
                          {- Arity: 1, Strictness: <S,U> -}
                        = \ (x :: GHC.Prim.Int#)[OneShot] ->
                          case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.<# x 0#) of wild {
                            GHC.Types.False
                            -> case GHC.Classes.divInt#
                                      9223372036854775807#
                                      8# of ww4 { DEFAULT ->
                               case GHC.Prim.tagToEnum#
                                      @ GHC.Types.Bool
                                      (GHC.Prim.># x ww4) of wild1 {
                                 GHC.Types.False
                                 -> case GHC.Prim.newByteArray#
                                           @ (Control.Monad.Primitive.PrimState
                                                (GHC.ST.ST GHC.Prim.RealWorld))
                                           (GHC.Prim.*# x 8#)
                                           sc
                                             `cast`
                                           (GHC.Prim.State#
                                              (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                        <GHC.Prim.RealWorld>_N)))_R of ds1 { (#,#) ipv ipv1 ->
                                    case GHC.Prim.copyMutableByteArray#
                                           @ (Control.Monad.Primitive.PrimState
                                                (GHC.ST.ST GHC.Prim.RealWorld))
                                           sc5
                                           (GHC.Prim.*# sc3 8#)
                                           ipv1
                                           0#
                                           (GHC.Prim.*# sc4 8#)
                                           ipv of s'# { DEFAULT ->
                                    case sc1 of wild2 { GHC.Word.W64# x# ->
                                    case GHC.Prim.writeWord64Array#
                                           @ (Control.Monad.Primitive.PrimState
                                                (GHC.ST.ST GHC.Prim.RealWorld))
                                           ipv1
                                           sc6
                                           x#
                                           s'# of s'#1 { DEFAULT ->
                                    Position.calcHashKey_$sfoldlM_loop3
                                      s'#1
                                        `cast`
                                      (GHC.Prim.State#
                                         (Control.Monad.Primitive.D:R:PrimStateST[0]
                                              <GHC.Prim.RealWorld>_N))_R
                                      sc2
                                      0#
                                      x
                                      ipv1
                                      @~ (Trans
                                              (Sym (Data.Vector.Unboxed.Base.N:R:MVectorsWord64[0]
                                                        <Control.Monad.Primitive.PrimState
                                                           (GHC.ST.ST GHC.Prim.RealWorld)>_N))
                                              (Trans
                                                   (Sym (Data.Vector.Unboxed.Base.D:R:MVectorsWord640[0]
                                                             <Control.Monad.Primitive.PrimState
                                                                (GHC.ST.ST GHC.Prim.RealWorld)>_N))
                                                   (Sub (Sym (Data.Vector.Unboxed.Base.D:R:MutableVector[0])) <Control.Monad.Primitive.PrimState
                                                                                                                 (GHC.ST.ST
                                                                                                                    GHC.Prim.RealWorld)>_N <GHC.Word.Word64>_N)))
                                      y } } } }
                                 GHC.Types.True
                                 -> case Position.calcHashKey15 x
                                    ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                              (Data.Vector.Generic.Base.Mutable
                                                 Data.Vector.Unboxed.Base.Vector
                                                 (Control.Monad.Primitive.PrimState
                                                    (GHC.ST.ST GHC.Prim.RealWorld))
                                                 Alias.ZobristKey,
                                               GHC.Types.Int) #)
                                    of {} } }
                            GHC.Types.True
                            -> case Position.calcHashKey14 x
                               ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                         (Data.Vector.Generic.Base.Mutable
                                            Data.Vector.Unboxed.Base.Vector
                                            (Control.Monad.Primitive.PrimState
                                               (GHC.ST.ST GHC.Prim.RealWorld))
                                            Alias.ZobristKey,
                                          GHC.Types.Int) #)
                               of {} }
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# sc4 1#) of wild11 {
                        GHC.Types.False
                        -> let {
                             y2 :: GHC.Prim.Int# = GHC.Prim.-# y sc4
                           } in
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<=# sc4 y2) of wild13 {
                             GHC.Types.False -> $j (GHC.Prim.+# sc4 sc4)
                             GHC.Types.True -> $j (GHC.Prim.+# sc4 y2) }
                        GHC.Types.True
                        -> let {
                             y2 :: GHC.Prim.Int# = GHC.Prim.-# y sc4
                           } in
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<=# 1# y2) of wild13 {
                             GHC.Types.False -> $j (GHC.Prim.+# sc4 1#)
                             GHC.Types.True -> $j (GHC.Prim.+# sc4 y2) } } }) -}
4a1c130f56cc7e4ed4cc4cb32b5ff2d5
  calcHashKey_$sfoldlM_loop3 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> [GHC.Word.Word64]
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.MutableByteArray#
         (Control.Monad.Primitive.PrimState (GHC.ST.ST GHC.Prim.RealWorld))
    -> Data.Vector.Primitive.Mutable.MVector
         (Control.Monad.Primitive.PrimState (GHC.ST.ST GHC.Prim.RealWorld))
         GHC.Word.Word64
       ~R# Data.Vector.Generic.Base.Mutable
             Data.Vector.Unboxed.Base.Vector
             (Control.Monad.Primitive.PrimState (GHC.ST.ST GHC.Prim.RealWorld))
             GHC.Word.Word64 =>
       GHC.Prim.Int#
       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
             (Data.Vector.Generic.Base.Mutable
                Data.Vector.Unboxed.Base.Vector
                (Control.Monad.Primitive.PrimState (GHC.ST.ST GHC.Prim.RealWorld))
                Alias.ZobristKey,
              GHC.Types.Int) #)
  {- Arity: 7, Strictness: <S,U><S,1*U><L,U><L,U><L,U><L,U><L,U> -}
2202c4d994a6e332c4c70b9831519b65
  calcMaterial :: BasicData.Position -> Alias.PieceValue
  {- Arity: 1,
     Strictness: <L,U(U,U,U,U,U,U,U,U,A,A,A,A,A,A,A,A,A,A,A,A)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: BasicData.Position) ->
                 case Position.$wcalcMaterial w of ww { DEFAULT ->
                 GHC.Types.I# ww }) -}
da5efa381dde6b56483d4a46821ad5a6
  canDraw :: BasicData.Position -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLSLLLLLLLS),1*U(A,A,A,A,A,A,A,A,A,A,A,U,A,A,A,A,A,A,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: BasicData.Position) ->
                 case w of ww { BasicData.Position ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ww20 ->
                 Position.$wcanDraw ww12 ww19 ww20 }) -}
9388be0fc3449fe69d8a31dd80c97e32
  castle ::
    Alias.FromSquare
    -> Alias.ToSquare -> BasicData.Position -> BasicData.Position
  {- Arity: 3,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(SSSSSSSSSSSSSSSSSSSS),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Alias.FromSquare)
                   (w1 :: Alias.ToSquare)
                   (w2 :: BasicData.Position) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { GHC.Types.I# ww3 ->
                 case w2 of ww4 { BasicData.Position ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ww20 ww21 ww22 ww23 ww24 ->
                 Position.$wcastle
                   ww1
                   ww3
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   ww15
                   ww16
                   ww17
                   ww18
                   ww19
                   ww20
                   ww21
                   ww22
                   ww23
                   ww24 } } }) -}
d2015b29d22a8baf64efd9f66d79261a
  castleHashKey :: BasicData.CastleRight -> Alias.ZobristKey
  {- Arity: 1, Strictness: <S,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: BasicData.CastleRight) ->
                 case Position.$wcastleHashKey w of ww { DEFAULT ->
                 GHC.Word.W64# ww }) -}
049c8fc3bd795988a958690c956e7789
  castleRightWithout ::
    BasicData.CastleRight
    -> BasicData.CastleRight -> BasicData.CastleRight
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (x :: BasicData.CastleRight)
                   (y :: BasicData.CastleRight) ->
                 let {
                   ww :: GHC.Prim.Int#
                   = GHC.Prim.andI#
                       (GHC.Prim.dataToTag# @ BasicData.CastleRight x)
                       (GHC.Prim.notI# (GHC.Prim.dataToTag# @ BasicData.CastleRight y))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 0#) of wild {
                   GHC.Types.False -> BasicData.$fEnumCastleRight1 ww
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# ww 15#) of wild1 {
                        GHC.Types.False -> BasicData.$fEnumCastleRight1 ww
                        GHC.Types.True
                        -> GHC.Prim.tagToEnum# @ BasicData.CastleRight ww } }) -}
8977e1441dc0dc713050cdf1f7bddf9e
  changeColor :: BasicData.Position -> BasicData.Position
  {- Arity: 1,
     Strictness: <S(SSSSSSSSSSSSSSSSSSSS),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: BasicData.Position) ->
                 case x of wild { BasicData.Position dt dt1 dt2 dt3 dt4 dt5 dt6 dt7 ds ds1 dt8 dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16 ds2 ->
                 case case ds of wild1 {
                        BasicData.White -> BasicData.Black
                        BasicData.Black -> BasicData.White } of dt17 { DEFAULT ->
                 case Position.colorHashKey of wild1 { GHC.Word.W64# x# ->
                 BasicData.Position
                   dt1
                   dt
                   dt2
                   dt3
                   dt4
                   dt5
                   dt6
                   dt7
                   dt17
                   ds1
                   dt8
                   dt9
                   dt10
                   dt11
                   dt12
                   dt13
                   dt14
                   dt15
                   (GHC.Prim.xor# x# dt16)
                   ds2 } } }) -}
7a4dcfc91976ddaace5fe72f0c165289
  colorHashKey :: Alias.ZobristKey
  {- Unfolding: (case System.Random.$wrandomIvalInteger
                        @ System.Random.StdGen
                        @ GHC.Word.Word64
                        System.Random.$fRandomGenStdGen
                        GHC.Word.$fNumWord64
                        System.Random.getStdRandom4
                        System.Random.$fRandomCSize3
                        Position.colorHashKey1 of ww { (#,#) ww1 ww2 ->
                 ww1 }) -}
4af31dee868768ebdd0f252102e2c0cf
  colorHashKey1 :: System.Random.StdGen
  {- Unfolding: (case GHC.Int.$w$cdivMod1
                        825591188#
                        2147483562# of ww4 { (#,#) ww5 ww6 ->
                 case ww6 of wild { GHC.Int.I32# x# ->
                 case ww5 of ww2 { GHC.Int.I32# ww3 ->
                 case GHC.Classes.modInt# ww3 2147483398# of wild1 { DEFAULT ->
                 System.Random.StdGen
                   (GHC.Prim.narrow32Int# (GHC.Prim.+# x# 1#))
                   (GHC.Prim.narrow32Int#
                      (GHC.Prim.+# (GHC.Prim.narrow32Int# wild1) 1#)) } } } }) -}
38623f5dad674c336fdd6e11c9f06543
  combineCastleRight ::
    BasicData.CastleRight
    -> BasicData.CastleRight -> BasicData.CastleRight
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (x :: BasicData.CastleRight)
                   (y :: BasicData.CastleRight) ->
                 let {
                   ww :: GHC.Prim.Int#
                   = GHC.Prim.orI#
                       (GHC.Prim.dataToTag# @ BasicData.CastleRight x)
                       (GHC.Prim.dataToTag# @ BasicData.CastleRight y)
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 0#) of wild {
                   GHC.Types.False -> BasicData.$fEnumCastleRight1 ww
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# ww 15#) of wild1 {
                        GHC.Types.False -> BasicData.$fEnumCastleRight1 ww
                        GHC.Types.True
                        -> GHC.Prim.tagToEnum# @ BasicData.CastleRight ww } }) -}
9ffdaefdd68e08d84a3a092c2eef1966
  disableCastling ::
    Alias.FromSquare
    -> Alias.ToSquare -> BasicData.Position -> BasicData.Position
  {- Arity: 3,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(SSSSSSSSSSSSSSSSSSSS),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Alias.FromSquare)
                   (w1 :: Alias.ToSquare)
                   (w2 :: BasicData.Position) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { GHC.Types.I# ww3 ->
                 case w2 of ww4 { BasicData.Position ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ww20 ww21 ww22 ww23 ww24 ->
                 Position.$wdisableCastling
                   ww1
                   ww3
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   ww15
                   ww16
                   ww17
                   ww18
                   ww19
                   ww20
                   ww21
                   ww22
                   ww23
                   ww24 } } }) -}
5ef7b332ecb506f098a5f42369c363df
  disableEPSquare :: BasicData.Position -> BasicData.Position
  {- Arity: 1,
     Strictness: <S(SSSSSSSSSSSSSSSSSSSS),1*U(U,U,U,U,U,U,U,U,U,U,1*U,U,U,U,U,U,U,U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: BasicData.Position) ->
                 case w of ww { BasicData.Position ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ww20 ->
                 case ww11 of wild {
                   DEFAULT
                   -> let {
                        x :: GHC.Prim.Int# = GHC.Prim.remInt# wild 8#
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 0#) of wild1 {
                        GHC.Types.False
                        -> case Position.calcHashKey17 of wild2 { GHC.Types.I# n# ->
                           case Position.calcHashKey21 n# x ret_ty BasicData.Position of {} }
                        GHC.Types.True
                        -> case Position.calcHashKey17 of wild2 { GHC.Types.I# y ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<# x y) of wild3 {
                             GHC.Types.False
                             -> case Position.calcHashKey21 y x ret_ty BasicData.Position of {}
                             GHC.Types.True
                             -> case Position.calcHashKey1
                                       `cast`
                                     (Trans
                                          (Data.Vector.Unboxed.Base.D:R:VectorWord640[0])
                                          (Data.Vector.Unboxed.Base.N:R:VectorWord64[0])) of wild4 { Data.Vector.Primitive.Vector dt dt1 dt2 ->
                                case GHC.Prim.indexWord64Array#
                                       dt2
                                       (GHC.Prim.+# dt x) of wild5 { DEFAULT ->
                                BasicData.Position
                                  ww1
                                  ww2
                                  ww3
                                  ww4
                                  ww5
                                  ww6
                                  ww7
                                  ww8
                                  ww9
                                  ww10
                                  0#
                                  ww12
                                  ww13
                                  ww14
                                  ww15
                                  ww16
                                  ww17
                                  ww18
                                  (GHC.Prim.xor# wild5 ww19)
                                  ww20 } } } } }
                   0#
                   -> BasicData.Position
                        ww1
                        ww2
                        ww3
                        ww4
                        ww5
                        ww6
                        ww7
                        ww8
                        ww9
                        ww10
                        0#
                        ww12
                        ww13
                        ww14
                        ww15
                        ww16
                        ww17
                        ww18
                        ww19
                        ww20 } }) -}
0e02363d82d7e3992651959af5d53e3c
  emptySquares :: BasicData.Position -> Alias.BitBoard
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SSLLLLLLLLLLLLLLLLLL),1*U(U,U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: BasicData.Position) ->
                 case x of wild { BasicData.Position dt dt1 dt2 dt3 dt4 dt5 dt6 dt7 x9 x10 dt8 dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16 x20 ->
                 GHC.Word.W64#
                   (GHC.Prim.xor# (GHC.Prim.or# dt dt1) 18446744073709551615##) }) -}
fdfdb5b6578c41b0193655e8d3db0b3a
  enPassant ::
    Alias.FromSquare
    -> Alias.ToSquare -> BasicData.Position -> BasicData.Position
  {- Arity: 3,
     Strictness: <S(S),1*U(U)><S(S),U(U)><S(SSSSSSSSSSSSSSSSSSSS),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Alias.FromSquare)
                   (w1 :: Alias.ToSquare)
                   (w2 :: BasicData.Position) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { GHC.Types.I# ww3 ->
                 case w2 of ww4 { BasicData.Position ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ww20 ww21 ww22 ww23 ww24 ->
                 let {
                   $j :: GHC.Prim.Word# -> BasicData.Position {- Arity: 1 -}
                   = \ (ww25 :: GHC.Prim.Word#)[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Word# -> BasicData.Position
                         {- Arity: 1, Strictness: <S,U> -}
                       = \ (x# :: GHC.Prim.Word#)[OneShot] ->
                         let {
                           $j2 :: GHC.Prim.Word# -> BasicData.Position
                             {- Arity: 1, Strictness: <S,U> -}
                           = \ (x#1 :: GHC.Prim.Word#)[OneShot] ->
                             let {
                               $w$j :: GHC.Prim.Int# -> GHC.Prim.Word#
                                 {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                               = \ (w3 :: GHC.Prim.Int#)[OneShot] ->
                                 let {
                                   x :: GHC.Prim.Int# = GHC.Prim.+# w3 (GHC.Prim.*# ww1 6#)
                                 } in
                                 case GHC.Prim.tagToEnum#
                                        @ GHC.Types.Bool
                                        (GHC.Prim.>=# x 0#) of wild1 {
                                   GHC.Types.False
                                   -> case Position.pieceHashKey4 of wild2 { GHC.Types.I# n# ->
                                      case Position.calcHashKey21 n# x ret_ty GHC.Prim.Word# of {} }
                                   GHC.Types.True
                                   -> case Position.pieceHashKey4 of wild2 { GHC.Types.I# y ->
                                      case GHC.Prim.tagToEnum#
                                             @ GHC.Types.Bool
                                             (GHC.Prim.<# x y) of wild3 {
                                        GHC.Types.False
                                        -> case Position.calcHashKey21 y x
                                           ret_ty GHC.Prim.Word#
                                           of {}
                                        GHC.Types.True
                                        -> case Position.pieceHashKey1
                                                  `cast`
                                                (Trans
                                                     (Data.Vector.Unboxed.Base.D:R:VectorWord640[0])
                                                     (Data.Vector.Unboxed.Base.N:R:VectorWord64[0])) of wild { Data.Vector.Primitive.Vector dt dt1 dt2 ->
                                           GHC.Prim.indexWord64Array# dt2 (GHC.Prim.+# dt x) } } } }
                             } in
                             let {
                               $j3 :: GHC.Prim.Word# -> BasicData.Position {- Arity: 1 -}
                               = \ (ww26 :: GHC.Prim.Word#)[OneShot] ->
                                 let {
                                   $w$j1 :: GHC.Prim.Int# -> GHC.Prim.Word#
                                     {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                                   = \ (w3 :: GHC.Prim.Int#)[OneShot] ->
                                     let {
                                       x :: GHC.Prim.Int# = GHC.Prim.+# w3 (GHC.Prim.*# ww3 6#)
                                     } in
                                     case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.>=# x 0#) of wild1 {
                                       GHC.Types.False
                                       -> case Position.pieceHashKey4 of wild2 { GHC.Types.I# n# ->
                                          case Position.calcHashKey21 n# x
                                          ret_ty GHC.Prim.Word#
                                          of {} }
                                       GHC.Types.True
                                       -> case Position.pieceHashKey4 of wild2 { GHC.Types.I# y ->
                                          case GHC.Prim.tagToEnum#
                                                 @ GHC.Types.Bool
                                                 (GHC.Prim.<# x y) of wild3 {
                                            GHC.Types.False
                                            -> case Position.calcHashKey21 y x
                                               ret_ty GHC.Prim.Word#
                                               of {}
                                            GHC.Types.True
                                            -> case Position.pieceHashKey1
                                                      `cast`
                                                    (Trans
                                                         (Data.Vector.Unboxed.Base.D:R:VectorWord640[0])
                                                         (Data.Vector.Unboxed.Base.N:R:VectorWord64[0])) of wild { Data.Vector.Primitive.Vector dt dt1 dt2 ->
                                               GHC.Prim.indexWord64Array#
                                                 dt2
                                                 (GHC.Prim.+# dt x) } } } }
                                 } in
                                 let {
                                   $j4 :: GHC.Prim.Word# -> BasicData.Position {- Arity: 1 -}
                                   = \ (ww27 :: GHC.Prim.Word#)[OneShot] ->
                                     let {
                                       $j5 :: GHC.Prim.Int# -> BasicData.Position {- Arity: 1 -}
                                       = \ (ww28 :: GHC.Prim.Int#)[OneShot] ->
                                         case ww13 of wild {
                                           BasicData.White
                                           -> let {
                                                x :: GHC.Prim.Int#
                                                = GHC.Prim.+# 1# (GHC.Prim.*# ww28 6#)
                                              } in
                                              case GHC.Prim.tagToEnum#
                                                     @ GHC.Types.Bool
                                                     (GHC.Prim.>=# x 0#) of wild1 {
                                                GHC.Types.False
                                                -> case Position.pieceHashKey4 of wild2 { GHC.Types.I# n# ->
                                                   case Position.calcHashKey21 n# x
                                                   ret_ty BasicData.Position
                                                   of {} }
                                                GHC.Types.True
                                                -> case Position.pieceHashKey4 of wild2 { GHC.Types.I# y ->
                                                   case GHC.Prim.tagToEnum#
                                                          @ GHC.Types.Bool
                                                          (GHC.Prim.<# x y) of wild3 {
                                                     GHC.Types.False
                                                     -> case Position.calcHashKey21 y x
                                                        ret_ty BasicData.Position
                                                        of {}
                                                     GHC.Types.True
                                                     -> case Position.pieceHashKey1
                                                               `cast`
                                                             (Trans
                                                                  (Data.Vector.Unboxed.Base.D:R:VectorWord640[0])
                                                                  (Data.Vector.Unboxed.Base.N:R:VectorWord64[0])) of wild4 { Data.Vector.Primitive.Vector dt dt1 dt2 ->
                                                        case GHC.Prim.indexWord64Array#
                                                               dt2
                                                               (GHC.Prim.+#
                                                                  dt
                                                                  x) of ww29 { DEFAULT ->
                                                        BasicData.Position
                                                          (GHC.Prim.xor# x#1 ww5)
                                                          (GHC.Prim.xor# x# ww6)
                                                          (GHC.Prim.xor# x#1 (GHC.Prim.xor# x# ww7))
                                                          ww8
                                                          ww9
                                                          ww10
                                                          ww11
                                                          ww12
                                                          BasicData.White
                                                          ww14
                                                          ww15
                                                          ww16
                                                          ww17
                                                          ww18
                                                          ww19
                                                          ww20
                                                          ww21
                                                          (GHC.Prim.negateInt#
                                                             (GHC.Prim.+# ww22 100#))
                                                          (GHC.Prim.xor#
                                                             (GHC.Prim.xor#
                                                                (GHC.Prim.xor# ww26 ww27)
                                                                ww29)
                                                             ww23)
                                                          ww24 } } } } }
                                           BasicData.Black
                                           -> let {
                                                x :: GHC.Prim.Int# = GHC.Prim.*# ww28 6#
                                              } in
                                              case GHC.Prim.tagToEnum#
                                                     @ GHC.Types.Bool
                                                     (GHC.Prim.>=# x 0#) of wild1 {
                                                GHC.Types.False
                                                -> case Position.pieceHashKey4 of wild2 { GHC.Types.I# n# ->
                                                   case Position.calcHashKey21 n# x
                                                   ret_ty BasicData.Position
                                                   of {} }
                                                GHC.Types.True
                                                -> case Position.pieceHashKey4 of wild2 { GHC.Types.I# y ->
                                                   case GHC.Prim.tagToEnum#
                                                          @ GHC.Types.Bool
                                                          (GHC.Prim.<# x y) of wild3 {
                                                     GHC.Types.False
                                                     -> case Position.calcHashKey21 y x
                                                        ret_ty BasicData.Position
                                                        of {}
                                                     GHC.Types.True
                                                     -> case Position.pieceHashKey1
                                                               `cast`
                                                             (Trans
                                                                  (Data.Vector.Unboxed.Base.D:R:VectorWord640[0])
                                                                  (Data.Vector.Unboxed.Base.N:R:VectorWord64[0])) of wild4 { Data.Vector.Primitive.Vector dt dt1 dt2 ->
                                                        case GHC.Prim.indexWord64Array#
                                                               dt2
                                                               (GHC.Prim.+#
                                                                  dt
                                                                  x) of ww29 { DEFAULT ->
                                                        BasicData.Position
                                                          (GHC.Prim.xor# x#1 ww5)
                                                          (GHC.Prim.xor# x# ww6)
                                                          (GHC.Prim.xor# x#1 (GHC.Prim.xor# x# ww7))
                                                          ww8
                                                          ww9
                                                          ww10
                                                          ww11
                                                          ww12
                                                          BasicData.Black
                                                          ww14
                                                          ww15
                                                          ww16
                                                          ww17
                                                          ww18
                                                          ww19
                                                          ww20
                                                          ww21
                                                          (GHC.Prim.negateInt#
                                                             (GHC.Prim.+# ww22 100#))
                                                          (GHC.Prim.xor#
                                                             (GHC.Prim.xor#
                                                                (GHC.Prim.xor# ww26 ww27)
                                                                ww29)
                                                             ww23)
                                                          ww24 } } } } } }
                                     } in
                                     case ww13 of wild {
                                       BasicData.White -> $j5 (GHC.Prim.-# ww3 8#)
                                       BasicData.Black -> $j5 (GHC.Prim.+# ww3 8#) }
                                 } in
                                 case ww13 of wild {
                                   BasicData.White -> case $w$j1 0# of ww27 { DEFAULT -> $j4 ww27 }
                                   BasicData.Black
                                   -> case $w$j1 1# of ww27 { DEFAULT -> $j4 ww27 } }
                             } in
                             case ww13 of wild {
                               BasicData.White -> case $w$j 0# of ww26 { DEFAULT -> $j3 ww26 }
                               BasicData.Black -> case $w$j 1# of ww26 { DEFAULT -> $j3 ww26 } }
                         } in
                         case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.>=# ww1 64#) of wild2 {
                           GHC.Types.False
                           -> $j2 (GHC.Prim.or# (GHC.Prim.uncheckedShiftL# 1## ww1) ww25)
                           GHC.Types.True -> $j2 ww25 }
                     } in
                     case ww13 of wild {
                       BasicData.White -> $j1 (GHC.Prim.uncheckedShiftRL# ww25 8#)
                       BasicData.Black -> $j1 (GHC.Prim.uncheckedShiftL# ww25 8#) }
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww3 64#) of wild2 {
                   GHC.Types.False -> $j (GHC.Prim.uncheckedShiftL# 1## ww3)
                   GHC.Types.True -> $j 0## } } } }) -}
026a605469abbc99ee2852bf6f49cd6b
  endGame :: BasicData.Position -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLSLLLLLLLLLLLLLLLLL),1*U(U,A,U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: BasicData.Position) ->
                 case x of wild { BasicData.Position dt dt1 dt2 dt3 dt4 dt5 dt6 dt7 ds1 ds2 dt8 dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16 ds3 ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.<=#
                      (GHC.Prim.word2Int#
                         (GHC.Prim.popCnt64#
                            (GHC.Prim.and# dt (GHC.Prim.xor# dt2 18446744073709551615##))))
                      3#) }) -}
8230d333bd0b988ead08a64b2bfd618e
  epHashKey :: Alias.Square -> Alias.ZobristKey
  {- Arity: 1, Strictness: <S(S),1*U(U)>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Alias.Square) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case Position.$wepHashKey ww1 of ww2 { DEFAULT ->
                 GHC.Word.W64# ww2 } }) -}
6fd767fe79a5c1cc26c7ac42735a43e6
  findCheckers :: BasicData.Position -> Alias.BitBoard
  {- Arity: 1,
     Strictness: <S(SSSSSSSSSLLLLLLLLLLL),1*U(U,U,U,U,U,U,U,U,U,A,A,A,A,A,A,A,A,A,A,A)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: BasicData.Position) ->
                 case w of ww { BasicData.Position ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ww20 ->
                 case Position.$wfindCheckers
                        ww1
                        ww2
                        ww3
                        ww4
                        ww5
                        ww6
                        ww7
                        ww8
                        ww9 of ww21 { DEFAULT ->
                 GHC.Word.W64# ww21 } }) -}
2779b2099578848b244f92367ff9fb49
  findPinners ::
    BasicData.Position -> (Alias.BitBoard, Alias.BitBoard)
  {- Arity: 1,
     Strictness: <S,1*U(U,U,A,A,U,U,U,U,A,A,A,A,A,A,A,A,A,A,A,A)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: BasicData.Position) ->
                 case w of ww { BasicData.Position ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ww20 ->
                 case Position.$wfindPinners
                        ww1
                        ww2
                        ww5
                        ww6
                        ww7
                        ww8 of ww21 { (#,#) ww22 ww23 ->
                 (ww22, ww23) } }) -}
0413f4f7145baa3c7675acf21ccbaa13
  forward :: BasicData.Position -> Alias.BitBoard -> Alias.BitBoard
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLLLLLLLSLLLLLLLLLLL),1*U(A,A,A,A,A,A,A,A,U,A,A,A,A,A,A,A,A,A,A,A)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: BasicData.Position) (eta :: Alias.BitBoard) ->
                 case x of wild { BasicData.Position dt dt1 dt2 dt3 dt4 dt5 dt6 dt7 ds1 ds2 dt8 dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16 ds3 ->
                 case ds1 of wild1 {
                   BasicData.White
                   -> case eta of wild2 { GHC.Word.W64# x# ->
                      GHC.Word.W64# (GHC.Prim.uncheckedShiftL# x# 8#) }
                   BasicData.Black
                   -> case eta of wild2 { GHC.Word.W64# x# ->
                      GHC.Word.W64# (GHC.Prim.uncheckedShiftRL# x# 8#) } } }) -}
bf65c8b4b1298b1649f7efb8e93c097d
  forward2 :: BasicData.Position -> Alias.BitBoard -> Alias.BitBoard
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLLLLLLLSLLLLLLLLLLL),1*U(A,A,A,A,A,A,A,A,U,A,A,A,A,A,A,A,A,A,A,A)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: BasicData.Position) (eta :: Alias.BitBoard) ->
                 case x of wild { BasicData.Position dt dt1 dt2 dt3 dt4 dt5 dt6 dt7 ds1 ds2 dt8 dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16 ds3 ->
                 case ds1 of wild1 {
                   BasicData.White
                   -> case eta of wild2 { GHC.Word.W64# x# ->
                      GHC.Word.W64# (GHC.Prim.uncheckedShiftL# x# 16#) }
                   BasicData.Black
                   -> case eta of wild2 { GHC.Word.W64# x# ->
                      GHC.Word.W64# (GHC.Prim.uncheckedShiftRL# x# 16#) } } }) -}
014c582f5694e79f270ee0e75b6c4459
  includeKingsideCastle :: BasicData.CastleRight -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: BasicData.CastleRight) ->
                 case x of x1 { DEFAULT ->
                 case GHC.Prim.andI#
                        (GHC.Prim.dataToTag# @ BasicData.CastleRight x1)
                        10# of wild {
                   DEFAULT -> GHC.Types.True 0# -> GHC.Types.False } }) -}
7bb704c8b1b8839066b925fed9c6e2e1
  includeQueensideCastle :: BasicData.CastleRight -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: BasicData.CastleRight) ->
                 case x of x1 { DEFAULT ->
                 case GHC.Prim.andI#
                        (GHC.Prim.dataToTag# @ BasicData.CastleRight x1)
                        5# of wild {
                   DEFAULT -> GHC.Types.True 0# -> GHC.Types.False } }) -}
5b492342d61079d5d8b17f5bbd1bc84a
  insufficientMaterial :: BasicData.Position -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SSLLLLLLLLLLLLLLLLLL),1*U(U,U,A,U,U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: BasicData.Position) ->
                 case w of ww { BasicData.Position ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ww20 ->
                 Position.$winsufficientMaterial ww1 ww2 ww4 ww5 }) -}
be3e5f346008a44f6965206327605b31
  isBlack :: BasicData.Position -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLSLLLLLLLLLLL),1*U(A,A,A,A,A,A,A,A,U,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: BasicData.Position) ->
                 case x of wild { BasicData.Position dt dt1 dt2 dt3 dt4 dt5 dt6 dt7 ds1 ds2 dt8 dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16 ds3 ->
                 case ds1 of wild1 {
                   BasicData.White -> GHC.Types.False
                   BasicData.Black -> GHC.Types.True } }) -}
357d679bd808447c281e9dbf715919ae
  isEmpty :: BasicData.Position -> Alias.BitBoard -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SSLLLLLLLLLLLLLLLLLL),1*U(U,U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S(S),1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: BasicData.Position) (y :: Alias.BitBoard) ->
                 case x of wild { BasicData.Position dt dt1 dt2 dt3 dt4 dt5 dt6 dt7 x9 x10 dt8 dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16 x20 ->
                 case y of b { GHC.Word.W64# ipv ->
                 case GHC.Prim.and# (GHC.Prim.or# dt dt1) ipv of wild1 {
                   DEFAULT -> GHC.Types.False 0## -> GHC.Types.True } } }) -}
f23bea5a9021001de293e8b6302cc85c
  isInCheck :: BasicData.Position -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLSLLLLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,1*U,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: BasicData.Position) ->
                 case x of wild { BasicData.Position dt dt1 dt2 dt3 dt4 dt5 dt6 dt7 ds1 ds2 dt8 dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16 ds3 ->
                 case dt11 of wild1 {
                   DEFAULT -> GHC.Types.True 0## -> GHC.Types.False } }) -}
64b30b09b91e5367c5a2b66e6831efbd
  isOccupied ::
    BasicData.Position -> Alias.BitBoard -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SSLLLLLLLLLLLLLLLLLL),1*U(U,U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S(S),1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: BasicData.Position) (y :: Alias.BitBoard) ->
                 case x of wild { BasicData.Position dt dt1 dt2 dt3 dt4 dt5 dt6 dt7 x9 x10 dt8 dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16 x20 ->
                 case y of b { GHC.Word.W64# ipv ->
                 case GHC.Prim.and# (GHC.Prim.or# dt dt1) ipv of wild1 {
                   DEFAULT -> GHC.Types.True 0## -> GHC.Types.False } } }) -}
105d25cf601ec514e78d347a5c5a0d36
  isWhite :: BasicData.Position -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLSLLLLLLLLLLL),1*U(A,A,A,A,A,A,A,A,U,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: BasicData.Position) ->
                 case x of wild { BasicData.Position dt dt1 dt2 dt3 dt4 dt5 dt6 dt7 ds1 ds2 dt8 dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16 ds3 ->
                 case ds1 of wild1 {
                   BasicData.White -> GHC.Types.True
                   BasicData.Black -> GHC.Types.False } }) -}
181bf7d143ed301c6c23ac5f987ad2a5
  material :: BasicData.PieceType -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: BasicData.PieceType) ->
                 case ds of wild {
                   BasicData.Pawn -> BasicConstant.pawnMaterial
                   BasicData.Knight -> BasicConstant.knightMaterial
                   BasicData.Bishop -> BasicConstant.bishopMaterial
                   BasicData.Rook -> BasicConstant.rookMaterial
                   BasicData.Queen -> BasicConstant.queenMaterial
                   BasicData.King -> BasicConstant.kingMaterial }) -}
0f20741a1c3d160565db539e6920fb6c
  minorPieces :: BasicData.Position -> Alias.BitBoard
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSSLLLLLLLLLLLLLLL),1*U(A,A,A,U,U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: BasicData.Position) ->
                 case x of wild { BasicData.Position dt dt1 dt2 dt3 dt4 dt5 dt6 dt7 x9 x10 dt8 dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16 x20 ->
                 GHC.Word.W64# (GHC.Prim.or# dt3 dt4) }) -}
9b790811e74e341032255dd981fb6c0d
  move ::
    Alias.FromSquare
    -> Alias.ToSquare -> BasicData.Position -> BasicData.Position
  {- Arity: 3,
     Strictness: <S(S),U(U)><S(S),U(U)><S(LLSLLLLLSLLLLLLLLLLL),U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Alias.FromSquare)
                   (w1 :: Alias.ToSquare)
                   (w2 :: BasicData.Position) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { GHC.Types.I# ww3 ->
                 case w2 of ww4 { BasicData.Position ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ww20 ww21 ww22 ww23 ww24 ->
                 Position.$wmove
                   ww1
                   ww3
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   ww15
                   ww16
                   ww17
                   ww18
                   ww19
                   ww20
                   ww21
                   ww22
                   ww23
                   ww24 } } }) -}
eb22049dbafacf872fcec58cd372f33f
  occupancy :: BasicData.Position -> Alias.BitBoard
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SSLLLLLLLLLLLLLLLLLL),1*U(U,U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (p :: BasicData.Position) ->
                 case p of wild { BasicData.Position dt dt1 dt2 dt3 dt4 dt5 dt6 dt7 x9 x10 dt8 dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16 x20 ->
                 GHC.Word.W64# (GHC.Prim.or# dt dt1) }) -}
db360e9035ecd51b3b7c88585c0dd71e
  opposite :: BasicData.Color -> BasicData.Color
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: BasicData.Color) ->
                 case ds of wild {
                   BasicData.White -> BasicData.Black
                   BasicData.Black -> BasicData.White }) -}
8244dc02c50ffb671d439fe03085d1c2
  overAttacker ::
    (Alias.BitBoard -> Alias.BitBoard)
    -> BasicData.PieceType -> BasicData.Position -> BasicData.Position
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S(S)),C(U(U))><S,1*U><S(LSLLLLLLSSSSSSSSSSSS),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Alias.BitBoard -> Alias.BitBoard)
                   (w1 :: BasicData.PieceType)
                   (w2 :: BasicData.Position) ->
                 case w2 of ww { BasicData.Position ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ww20 ->
                 Position.$woverAttacker
                   w
                   w1
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   ww15
                   ww16
                   ww17
                   ww18
                   ww19
                   ww20 }) -}
3214a28494861cdaf6e2b36bbde8480b
  overDefender ::
    (Alias.BitBoard -> Alias.BitBoard)
    -> BasicData.PieceType -> BasicData.Position -> BasicData.Position
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S(S)),C(U(U))><S,1*U><S(SLLLLLLLSSSSSSSSSSSS),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Alias.BitBoard -> Alias.BitBoard)
                   (w1 :: BasicData.PieceType)
                   (w2 :: BasicData.Position) ->
                 case w2 of ww { BasicData.Position ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ww20 ->
                 Position.$woverDefender
                   w
                   w1
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   ww15
                   ww16
                   ww17
                   ww18
                   ww19
                   ww20 }) -}
39c7e67f43c7d0a5daef4df60d2f093b
  pieceAt ::
    BasicData.Position
    -> Alias.BitBoard -> GHC.Base.Maybe BasicData.PieceType
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLSLLLLLLLLLLLLLLLLL),1*U(A,A,U,U,U,U,U,U,A,A,A,A,A,A,A,A,A,A,A,A)><S(S),1*U(U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: BasicData.Position) (w1 :: Alias.BitBoard) ->
                 case w of ww { BasicData.Position ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ww20 ->
                 case w1 of ww21 { GHC.Word.W64# ww22 ->
                 Position.$wpieceAt ww3 ww4 ww5 ww6 ww7 ww8 ww22 } }) -}
cb6f237a2b3867ccb6e588b522f6af3f
  pieceAt1 :: GHC.Base.Maybe BasicData.PieceType
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just @ BasicData.PieceType BasicData.King) -}
4c18182f5b9b3f70160e34c73fa4ffcd
  pieceAt2 :: GHC.Base.Maybe BasicData.PieceType
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just @ BasicData.PieceType BasicData.Queen) -}
38e218207bdc5b70b2d2724316c0a2cf
  pieceAt3 :: GHC.Base.Maybe BasicData.PieceType
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just @ BasicData.PieceType BasicData.Rook) -}
95b6dc0006ccf55c7c5bf1e1f5fc0c5a
  pieceAt4 :: GHC.Base.Maybe BasicData.PieceType
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ BasicData.PieceType
                   BasicData.Bishop) -}
7117e008a4e33470e5f2336b24c0ea7f
  pieceAt5 :: GHC.Base.Maybe BasicData.PieceType
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ BasicData.PieceType
                   BasicData.Knight) -}
bf31654647a8e2bd6a03f075d59628fe
  pieceAt6 :: GHC.Base.Maybe BasicData.PieceType
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just @ BasicData.PieceType BasicData.Pawn) -}
3730815457b8f28c630d23e5a4d1ddd1
  pieceChar :: BasicData.PieceType -> GHC.Types.Char
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: BasicData.PieceType) ->
                 case ds of wild {
                   BasicData.Pawn -> Position.pieceChar6
                   BasicData.Knight -> Position.pieceChar5
                   BasicData.Bishop -> Position.pieceChar4
                   BasicData.Rook -> Position.pieceChar3
                   BasicData.Queen -> Position.pieceChar2
                   BasicData.King -> Position.pieceChar1 }) -}
069ea2f3ed967b65daf14af95fe2f1fc
  pieceChar1 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# 'k'#) -}
08f90807768354eb6569559efd3dd254
  pieceChar2 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# 'q'#) -}
0679974b77b71901b0aa473f630ad820
  pieceChar3 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# 'r'#) -}
494e0fa4cf5afd89d5ff924c37a151c7
  pieceChar4 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# 'b'#) -}
06c992e6b56324f18848aee66308985e
  pieceChar5 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# 'n'#) -}
1225a65c091b59023e7095e89572774c
  pieceChar6 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# 'p'#) -}
c2c491c58fa5f54392b9aa6a85ebd370
  pieceHashKey ::
    (BasicData.Color, BasicData.PieceType, Alias.Square)
    -> Alias.ZobristKey
  {- Arity: 1, Strictness: <S(SSS(S)),1*U(1*U,1*U,1*U(U))>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: (BasicData.Color, BasicData.PieceType, Alias.Square)) ->
                 case w of ww { (,,) ww1 ww2 ww3 ->
                 case ww3 of ww4 { GHC.Types.I# ww5 ->
                 case Position.$wpieceHashKey ww1 ww2 ww5 of ww6 { DEFAULT ->
                 GHC.Word.W64# ww6 } } }) -}
694751d62b93630e3c35db44dcbddf5b
  pieceHashKey1 :: Data.Vector.Unboxed.Base.Vector Alias.ZobristKey
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ (Data.Vector.Unboxed.Base.Vector Alias.ZobristKey)
                        Position.pieceHashKey2 of ds1 { (#,#) ipv1 ipv2 ->
                 ipv2 }) -}
aa2bef8d46b535e6df8e5bd3d897ddec
  pieceHashKey2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Vector.Unboxed.Base.Vector Alias.ZobristKey #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Classes.divInt#
                        9223372036854775807#
                        8# of ww4 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.># 0# ww4) of wild1 {
                   GHC.Types.False
                   -> case GHC.Prim.newByteArray#
                             @ (Control.Monad.Primitive.PrimState
                                  (GHC.ST.ST GHC.Prim.RealWorld))
                             0#
                             s1
                               `cast`
                             (GHC.Prim.State#
                                (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                          <GHC.Prim.RealWorld>_N)))_R of ds1 { (#,#) ipv ipv1 ->
                      case Position.$wgo3
                             Position.pieceHashKey3
                             768# of ww { (#,#) ww1 ww2 ->
                      case Position.pieceHashKey_$sfoldlM_loop
                             ipv
                               `cast`
                             (GHC.Prim.State#
                                (Control.Monad.Primitive.D:R:PrimStateST[0]
                                     <GHC.Prim.RealWorld>_N))_R
                             ww1
                             ww2
                             0#
                             0#
                             ipv1
                             @~ (Trans
                                     (Sym (Data.Vector.Unboxed.Base.N:R:MVectorsWord64[0]
                                               <Control.Monad.Primitive.PrimState
                                                  (GHC.ST.ST GHC.Prim.RealWorld)>_N))
                                     (Trans
                                          (Sym (Data.Vector.Unboxed.Base.D:R:MVectorsWord640[0]
                                                    <Control.Monad.Primitive.PrimState
                                                       (GHC.ST.ST GHC.Prim.RealWorld)>_N))
                                          (Sub (Sym (Data.Vector.Unboxed.Base.D:R:MutableVector[0])) <Control.Monad.Primitive.PrimState
                                                                                                        (GHC.ST.ST
                                                                                                           GHC.Prim.RealWorld)>_N <GHC.Word.Word64>_N)))
                             0# of ds2 { (#,#) ipv6 ipv7 ->
                      case ipv7 of wild5 { (,) v' n ->
                      case v'
                             `cast`
                           (Trans
                                (Sub (Data.Vector.Unboxed.Base.D:R:MutableVector[0]) <Control.Monad.Primitive.PrimState
                                                                                        (GHC.ST.ST
                                                                                           GHC.Prim.RealWorld)>_N <GHC.Word.Word64>_N)
                                (Trans
                                     (Data.Vector.Unboxed.Base.D:R:MVectorsWord640[0]
                                          <Control.Monad.Primitive.PrimState
                                             (GHC.ST.ST GHC.Prim.RealWorld)>_N)
                                     (Data.Vector.Unboxed.Base.N:R:MVectorsWord64[0]
                                          <Control.Monad.Primitive.PrimState
                                             (GHC.ST.ST
                                                GHC.Prim.RealWorld)>_N))) of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                      case n of dt3 { GHC.Types.I# dt4 ->
                      case GHC.Prim.unsafeFreezeByteArray#
                             @ (Control.Monad.Primitive.PrimState
                                  (GHC.ST.ST GHC.Prim.RealWorld))
                             dt2
                             ipv6
                               `cast`
                             (GHC.Prim.State#
                                (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                          <GHC.Prim.RealWorld>_N)))_R of ds4 { (#,#) ipv2 ipv3 ->
                      (# ipv2
                           `cast`
                         (GHC.Prim.State#
                            (Control.Monad.Primitive.D:R:PrimStateST[0]
                                 <GHC.Prim.RealWorld>_N))_R,
                         (Data.Vector.Primitive.Vector @ GHC.Word.Word64 dt dt4 ipv3)
                           `cast`
                         (Trans
                              (Sym (Data.Vector.Unboxed.Base.N:R:VectorWord64[0]))
                              (Sym (Data.Vector.Unboxed.Base.D:R:VectorWord640[0]))) #) } } } } } } }
                   GHC.Types.True
                   -> case GHC.Err.error
                             @ 'GHC.Types.PtrRepLifted
                             @ (GHC.ST.ST
                                  GHC.Prim.RealWorld
                                  (Data.Vector.Primitive.Mutable.MVector
                                     (Control.Monad.Primitive.PrimState
                                        (GHC.ST.ST GHC.Prim.RealWorld))
                                     GHC.Word.Word64))
                             Position.calcHashKey5
                               `cast`
                             (Sym (GHC.Classes.N:IP[0]
                                       <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                             Position.calcHashKey3
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                Data.Vector.Unboxed.Base.Vector Alias.ZobristKey #)
                      of {} } }) -}
81ecd63594a6f1c76f8778e90ced5492
  pieceHashKey3 :: System.Random.StdGen
  {- Unfolding: (case GHC.Int.$w$cdivMod1
                        123643125#
                        2147483562# of ww4 { (#,#) ww5 ww6 ->
                 case ww6 of wild { GHC.Int.I32# x# ->
                 case ww5 of ww2 { GHC.Int.I32# ww3 ->
                 case GHC.Classes.modInt# ww3 2147483398# of wild1 { DEFAULT ->
                 System.Random.StdGen
                   (GHC.Prim.narrow32Int# (GHC.Prim.+# x# 1#))
                   (GHC.Prim.narrow32Int#
                      (GHC.Prim.+# (GHC.Prim.narrow32Int# wild1) 1#)) } } } }) -}
bf73f5d4ae00fcff93d4f9419664dcd4
  pieceHashKey4 :: GHC.Types.Int
  {- Unfolding: (Position.$s!_$slength Position.pieceHashKey1) -}
5c0a8863d1ffb0fac4ccadecfa862eaf
  pieceHashKey_$sfoldlM_loop ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> GHC.Word.Word64
    -> [GHC.Word.Word64]
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.MutableByteArray#
         (Control.Monad.Primitive.PrimState (GHC.ST.ST GHC.Prim.RealWorld))
    -> Data.Vector.Primitive.Mutable.MVector
         (Control.Monad.Primitive.PrimState (GHC.ST.ST GHC.Prim.RealWorld))
         GHC.Word.Word64
       ~R# Data.Vector.Generic.Base.Mutable
             Data.Vector.Unboxed.Base.Vector
             (Control.Monad.Primitive.PrimState (GHC.ST.ST GHC.Prim.RealWorld))
             GHC.Word.Word64 =>
       GHC.Prim.Int#
       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
             (Data.Vector.Generic.Base.Mutable
                Data.Vector.Unboxed.Base.Vector
                (Control.Monad.Primitive.PrimState (GHC.ST.ST GHC.Prim.RealWorld))
                Alias.ZobristKey,
              GHC.Types.Int) #)
  {- Arity: 8, Strictness: <S,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U>,
     Unfolding: (\ (sc :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot]
                   (sc1 :: GHC.Word.Word64)
                   (sc2 :: [GHC.Word.Word64])
                   (sc3 :: GHC.Prim.Int#)
                   (sc4 :: GHC.Prim.Int#)
                   (sc5 :: GHC.Prim.MutableByteArray#
                             (Control.Monad.Primitive.PrimState (GHC.ST.ST GHC.Prim.RealWorld)))
                   (sg0 :: Data.Vector.Primitive.Mutable.MVector
                             (Control.Monad.Primitive.PrimState (GHC.ST.ST GHC.Prim.RealWorld))
                             GHC.Word.Word64
                           ~R# Data.Vector.Generic.Base.Mutable
                                 Data.Vector.Unboxed.Base.Vector
                                 (Control.Monad.Primitive.PrimState (GHC.ST.ST GHC.Prim.RealWorld))
                                 GHC.Word.Word64)
                   (sc6 :: GHC.Prim.Int#) ->
                 let {
                   y :: GHC.Prim.Int# = GHC.Prim.+# sc6 1#
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# sc4 y) of wild9 {
                   GHC.Types.False
                   -> case sc1 of wild2 { GHC.Word.W64# x# ->
                      case GHC.Prim.writeWord64Array#
                             @ (Control.Monad.Primitive.PrimState
                                  (GHC.ST.ST GHC.Prim.RealWorld))
                             sc5
                             (GHC.Prim.+# sc3 sc6)
                             x#
                             sc
                               `cast`
                             (GHC.Prim.State#
                                (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                          <GHC.Prim.RealWorld>_N)))_R of s'# { DEFAULT ->
                      Position.pieceHashKey_$sfoldlM_loop1
                        s'#
                          `cast`
                        (GHC.Prim.State#
                           (Control.Monad.Primitive.D:R:PrimStateST[0]
                                <GHC.Prim.RealWorld>_N))_R
                        sc2
                        sc3
                        sc4
                        sc5
                        @~ (Trans
                                (Sym (Data.Vector.Unboxed.Base.N:R:MVectorsWord64[0]
                                          <Control.Monad.Primitive.PrimState
                                             (GHC.ST.ST GHC.Prim.RealWorld)>_N))
                                (Trans
                                     (Sym (Data.Vector.Unboxed.Base.D:R:MVectorsWord640[0]
                                               <Control.Monad.Primitive.PrimState
                                                  (GHC.ST.ST GHC.Prim.RealWorld)>_N))
                                     (Sub (Sym (Data.Vector.Unboxed.Base.D:R:MutableVector[0])) <Control.Monad.Primitive.PrimState
                                                                                                   (GHC.ST.ST
                                                                                                      GHC.Prim.RealWorld)>_N <GHC.Word.Word64>_N)))
                        y } }
                   GHC.Types.True
                   -> let {
                        $j :: GHC.Prim.Int#
                              -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                    (Data.Vector.Generic.Base.Mutable
                                       Data.Vector.Unboxed.Base.Vector
                                       (Control.Monad.Primitive.PrimState
                                          (GHC.ST.ST GHC.Prim.RealWorld))
                                       Alias.ZobristKey,
                                     GHC.Types.Int) #)
                          {- Arity: 1, Strictness: <S,U> -}
                        = \ (x :: GHC.Prim.Int#)[OneShot] ->
                          case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.<# x 0#) of wild {
                            GHC.Types.False
                            -> case GHC.Classes.divInt#
                                      9223372036854775807#
                                      8# of ww4 { DEFAULT ->
                               case GHC.Prim.tagToEnum#
                                      @ GHC.Types.Bool
                                      (GHC.Prim.># x ww4) of wild1 {
                                 GHC.Types.False
                                 -> case GHC.Prim.newByteArray#
                                           @ (Control.Monad.Primitive.PrimState
                                                (GHC.ST.ST GHC.Prim.RealWorld))
                                           (GHC.Prim.*# x 8#)
                                           sc
                                             `cast`
                                           (GHC.Prim.State#
                                              (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                        <GHC.Prim.RealWorld>_N)))_R of ds1 { (#,#) ipv ipv1 ->
                                    case GHC.Prim.copyMutableByteArray#
                                           @ (Control.Monad.Primitive.PrimState
                                                (GHC.ST.ST GHC.Prim.RealWorld))
                                           sc5
                                           (GHC.Prim.*# sc3 8#)
                                           ipv1
                                           0#
                                           (GHC.Prim.*# sc4 8#)
                                           ipv of s'# { DEFAULT ->
                                    case sc1 of wild2 { GHC.Word.W64# x# ->
                                    case GHC.Prim.writeWord64Array#
                                           @ (Control.Monad.Primitive.PrimState
                                                (GHC.ST.ST GHC.Prim.RealWorld))
                                           ipv1
                                           sc6
                                           x#
                                           s'# of s'#1 { DEFAULT ->
                                    Position.pieceHashKey_$sfoldlM_loop1
                                      s'#1
                                        `cast`
                                      (GHC.Prim.State#
                                         (Control.Monad.Primitive.D:R:PrimStateST[0]
                                              <GHC.Prim.RealWorld>_N))_R
                                      sc2
                                      0#
                                      x
                                      ipv1
                                      @~ (Trans
                                              (Sym (Data.Vector.Unboxed.Base.N:R:MVectorsWord64[0]
                                                        <Control.Monad.Primitive.PrimState
                                                           (GHC.ST.ST GHC.Prim.RealWorld)>_N))
                                              (Trans
                                                   (Sym (Data.Vector.Unboxed.Base.D:R:MVectorsWord640[0]
                                                             <Control.Monad.Primitive.PrimState
                                                                (GHC.ST.ST GHC.Prim.RealWorld)>_N))
                                                   (Sub (Sym (Data.Vector.Unboxed.Base.D:R:MutableVector[0])) <Control.Monad.Primitive.PrimState
                                                                                                                 (GHC.ST.ST
                                                                                                                    GHC.Prim.RealWorld)>_N <GHC.Word.Word64>_N)))
                                      y } } } }
                                 GHC.Types.True
                                 -> case Position.calcHashKey15 x
                                    ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                              (Data.Vector.Generic.Base.Mutable
                                                 Data.Vector.Unboxed.Base.Vector
                                                 (Control.Monad.Primitive.PrimState
                                                    (GHC.ST.ST GHC.Prim.RealWorld))
                                                 Alias.ZobristKey,
                                               GHC.Types.Int) #)
                                    of {} } }
                            GHC.Types.True
                            -> case Position.calcHashKey14 x
                               ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                         (Data.Vector.Generic.Base.Mutable
                                            Data.Vector.Unboxed.Base.Vector
                                            (Control.Monad.Primitive.PrimState
                                               (GHC.ST.ST GHC.Prim.RealWorld))
                                            Alias.ZobristKey,
                                          GHC.Types.Int) #)
                               of {} }
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# sc4 1#) of wild11 {
                        GHC.Types.False
                        -> let {
                             y2 :: GHC.Prim.Int# = GHC.Prim.-# y sc4
                           } in
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<=# sc4 y2) of wild13 {
                             GHC.Types.False -> $j (GHC.Prim.+# sc4 sc4)
                             GHC.Types.True -> $j (GHC.Prim.+# sc4 y2) }
                        GHC.Types.True
                        -> let {
                             y2 :: GHC.Prim.Int# = GHC.Prim.-# y sc4
                           } in
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<=# 1# y2) of wild13 {
                             GHC.Types.False -> $j (GHC.Prim.+# sc4 1#)
                             GHC.Types.True -> $j (GHC.Prim.+# sc4 y2) } } }) -}
5abc914116b80bc081535a8d78a92085
  pieceHashKey_$sfoldlM_loop1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> [GHC.Word.Word64]
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.MutableByteArray#
         (Control.Monad.Primitive.PrimState (GHC.ST.ST GHC.Prim.RealWorld))
    -> Data.Vector.Primitive.Mutable.MVector
         (Control.Monad.Primitive.PrimState (GHC.ST.ST GHC.Prim.RealWorld))
         GHC.Word.Word64
       ~R# Data.Vector.Generic.Base.Mutable
             Data.Vector.Unboxed.Base.Vector
             (Control.Monad.Primitive.PrimState (GHC.ST.ST GHC.Prim.RealWorld))
             GHC.Word.Word64 =>
       GHC.Prim.Int#
       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
             (Data.Vector.Generic.Base.Mutable
                Data.Vector.Unboxed.Base.Vector
                (Control.Monad.Primitive.PrimState (GHC.ST.ST GHC.Prim.RealWorld))
                Alias.ZobristKey,
              GHC.Types.Int) #)
  {- Arity: 7, Strictness: <S,U><S,1*U><L,U><L,U><L,U><L,U><L,U> -}
4a169b36a90a7b2f5b52a649b9bf25d8
  pieces ::
    BasicData.Position
    -> [(BasicData.Color, BasicData.PieceType, Alias.Square)]
  {- Arity: 1,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,A,A,A,A,A,A,A,A,A,A,A)> -}
d5efc6080669d6183f6400033ac12a22
  promotion ::
    BasicData.PieceType
    -> Alias.FromSquare
    -> Alias.ToSquare
    -> BasicData.Position
    -> BasicData.Position
  {- Arity: 4,
     Strictness: <S,U><S(S),1*U(U)><S(S),U(U)><S(LLSLLLLLSLLLLLLLLLLL),U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: BasicData.PieceType)
                   (w1 :: Alias.FromSquare)
                   (w2 :: Alias.ToSquare)
                   (w3 :: BasicData.Position) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { GHC.Types.I# ww3 ->
                 case w3 of ww4 { BasicData.Position ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ww20 ww21 ww22 ww23 ww24 ->
                 Position.$wpromotion
                   w
                   ww1
                   ww3
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   ww15
                   ww16
                   ww17
                   ww18
                   ww19
                   ww20
                   ww21
                   ww22
                   ww23
                   ww24 } } }) -}
a6c0a3c076c8b731e1ef5a1924c94c9a
  showPos :: BasicData.Position -> GHC.Base.String
  {- Arity: 1,
     Strictness: <L,U(U,A,U,U,U,U,U,U,U,U,1*U,U,U,A,A,A,A,A,A,A)> -}
c20508c10003f85ad8a18a07025a55f1
  swapOccupancy :: BasicData.Position -> BasicData.Position
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SSSSSSSSSSSSSSSSSSSS),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (p :: BasicData.Position) ->
                 case p of wild { BasicData.Position dt dt1 dt2 dt3 dt4 dt5 dt6 dt7 ds ds1 dt8 dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16 ds2 ->
                 BasicData.Position
                   dt1
                   dt
                   dt2
                   dt3
                   dt4
                   dt5
                   dt6
                   dt7
                   ds
                   ds1
                   dt8
                   dt9
                   dt10
                   dt11
                   dt12
                   dt13
                   dt14
                   dt15
                   dt16
                   ds2 }) -}
"SPEC/Position length @ Vector @ ZobristKey" [ALWAYS] forall ($dVector :: Data.Vector.Generic.Base.Vector
                                                                            Data.Vector.Unboxed.Base.Vector
                                                                            Alias.ZobristKey)
  Data.Vector.Generic.length @ Data.Vector.Unboxed.Base.Vector
                             @ GHC.Word.Word64
                             $dVector
  = Position.$s!_$slength
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

