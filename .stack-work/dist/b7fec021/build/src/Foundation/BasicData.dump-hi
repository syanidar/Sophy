
==================== FINAL INTERFACE ====================
2016-12-17 14:56:58.1076576 UTC

interface Sophy-0.1.0.0-KzkJ0b2opaf7oLnrOdwoet:BasicData 8001
  interface hash: 6434445e9092b7071f5889b9eea59409
  ABI hash: 2a7d7454833f4f04d9c30a40b6d5a151
  export-list hash: 05582099e9a48170ebc021a187a7905d
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 19a3fe6efd0acfaeb0ef5c0e6e3acb76
  sig of: Nothing
  used TH splices: True
  where
exports:
  BasicData.activeColor
  BasicData.attackers
  BasicData.bishops
  BasicData.castleRights
  BasicData.checkers
  BasicData.defendMap
  BasicData.defenders
  BasicData.enPassantSquare
  BasicData.halfMoveClock
  BasicData.history
  BasicData.kings
  BasicData.knights
  BasicData.materialBalance
  BasicData.pawns
  BasicData.pinnedByBishops
  BasicData.pinnedByRooks
  BasicData.plyCount
  BasicData.queens
  BasicData.rooks
  BasicData.zobristKey
  BasicData.CastleRight{BasicData.BK BasicData.BKBQ BasicData.BQ BasicData.None BasicData.WK BasicData.WKBK BasicData.WKBKBQ BasicData.WKBQ BasicData.WKWQ BasicData.WKWQBKBQ BasicData.WKWQBQ BasicData.WQ BasicData.WQBK BasicData.WQBKBQ BasicData.WQBQ BasicData.WQWQBK}
  BasicData.Color{BasicData.Black BasicData.White}
  BasicData.Direction{BasicData.East BasicData.North BasicData.NorthEast BasicData.NorthWest BasicData.South BasicData.SouthEast BasicData.SouthWest BasicData.West}
  BasicData.MoveType{BasicData.Castling BasicData.EnPassant BasicData.Normal BasicData.Promotion}
  BasicData.PieceType{BasicData.Bishop BasicData.King BasicData.Knight BasicData.Pawn BasicData.Queen BasicData.Rook}
  BasicData.Position{BasicData.Position _activeColor _attackers _bishops _castleRights _checkers _defendMap _defenders _enPassantSquare _halfMoveClock _history _kings _knights _materialBalance _pawns _pinnedByBishops _pinnedByRooks _plyCount _queens _rooks _zobristKey}
  BasicData.ScoreType{BasicData.Exact BasicData.LowerBound BasicData.UpperBound}
module dependencies: Alias Bitwise
package dependencies: StateVar-1.1.0.4@StateVar-1.1.0.4-CJpWsiXJdd89SnV9dZtTwc
                      adjunctions-4.3@adjunctions-4.3-3ol9sWZt3In19pwXwPv3Xc
                      array-0.5.1.1@array-0.5.1.1 base-4.9.0.0
                      base-orphans-0.5.4@base-orphans-0.5.4-5IQvrjd7gNP548VkOOyIq6
                      bifunctors-5.4.1@bifunctors-5.4.1-8Xk5Wsnk1fr6rBLkW9MO8p
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      comonad-5@comonad-5-2RMxpSOQ5MCHLHIelJrHD4
                      containers-0.5.7.1@containers-0.5.7.1
                      contravariant-1.4@contravariant-1.4-KSQE31a7FruKHDlp90hIUT
                      deepseq-1.4.2.0@deepseq-1.4.2.0
                      distributive-0.5.0.2@distributive-0.5.0.2-Cdz2vLOk85j1doGXLcictT
                      exceptions-0.8.3@exceptions-0.8.3-7py7fmRxowDFpHmiHGKrTb
                      free-4.12.4@free-4.12.4-Etm59Dm8iExFxAy1L49Ovd
                      ghc-boot-th-8.0.1@ghc-boot-th-8.0.1 ghc-prim-0.5.0.0
                      hashable-1.2.4.0@hashable-1.2.4.0-EMu4H7FB10MAl6hwKw992G
                      integer-gmp-1.0.0.1
                      kan-extensions-5.0.1@kan-extensions-5.0.1-Asa0tkk9PuPLZ2eXuJ10Gr
                      lens-4.14@lens-4.14-LQbbTc84mRL8zB39b41ZKA
                      mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM
                      prelude-extras-0.4.0.3@prelude-extras-0.4.0.3-FAyB4iuuM7cHXdrLMZtdXq
                      pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.1.0@primitive-0.6.1.0-Ip44DqhfCp21tTUYbecwa
                      profunctors-5.2@profunctors-5.2-2ZZOz6u59T2H8y7z3NgZkY
                      reflection-2.1.2@reflection-2.1.2-J1ZzlxijzaHGRixYxgxlf9
                      semigroupoids-5.1@semigroupoids-5.1-1Gay4xNO77GHd4DGCzVuax
                      stm-2.4.4.1@stm-2.4.4.1-4z2NRWnB0NIIUvSJsHW0kF
                      tagged-0.8.5@tagged-0.8.5-CtgV6EcN0do8F92i1S6iYx
                      template-haskell-2.11.0.0
                      text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s
                      transformers-0.5.2.0@transformers-0.5.2.0
                      transformers-compat-0.5.1.4@transformers-compat-0.5.1.4-81lZyuOJOvsD0zyCv2TKld
                      unordered-containers-0.2.7.1@unordered-containers-0.2.7.1-Eo9jd5DMz45DhBLCG8skzW
                      vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         hashable-1.2.4.0@hashable-1.2.4.0-EMu4H7FB10MAl6hwKw992G:Data.Hashable.Generic
         reflection-2.1.2@reflection-2.1.2-J1ZzlxijzaHGRixYxgxlf9:Data.Reflection
         stm-2.4.4.1@stm-2.4.4.1-4z2NRWnB0NIIUvSJsHW0kF:Control.Monad.STM
         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text
         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text.Lazy
         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text.Show
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Fusion.Bundle
         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Unboxed
family instance modules: adjunctions-4.3@adjunctions-4.3-3ol9sWZt3In19pwXwPv3Xc:Data.Functor.Rep
                         base-4.9.0.0:Control.Applicative base-4.9.0.0:Data.Complex
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Compose
                         base-4.9.0.0:Data.Functor.Const base-4.9.0.0:Data.Functor.Identity
                         base-4.9.0.0:Data.Functor.Product base-4.9.0.0:Data.Functor.Sum
                         base-4.9.0.0:Data.List.NonEmpty base-4.9.0.0:Data.Monoid
                         base-4.9.0.0:Data.Semigroup base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:Data.Version base-4.9.0.0:Data.Void
                         base-4.9.0.0:GHC.Exts base-4.9.0.0:GHC.Generics
                         base-4.9.0.0:GHC.IO.Exception base-4.9.0.0:GHC.TypeLits
                         bifunctors-5.4.1@bifunctors-5.4.1-8Xk5Wsnk1fr6rBLkW9MO8p:Data.Bifunctor.Biff
                         bifunctors-5.4.1@bifunctors-5.4.1-8Xk5Wsnk1fr6rBLkW9MO8p:Data.Bifunctor.Clown
                         bifunctors-5.4.1@bifunctors-5.4.1-8Xk5Wsnk1fr6rBLkW9MO8p:Data.Bifunctor.Flip
                         bifunctors-5.4.1@bifunctors-5.4.1-8Xk5Wsnk1fr6rBLkW9MO8p:Data.Bifunctor.Join
                         bifunctors-5.4.1@bifunctors-5.4.1-8Xk5Wsnk1fr6rBLkW9MO8p:Data.Bifunctor.Joker
                         bifunctors-5.4.1@bifunctors-5.4.1-8Xk5Wsnk1fr6rBLkW9MO8p:Data.Bifunctor.Product
                         bifunctors-5.4.1@bifunctors-5.4.1-8Xk5Wsnk1fr6rBLkW9MO8p:Data.Bifunctor.Sum
                         bifunctors-5.4.1@bifunctors-5.4.1-8Xk5Wsnk1fr6rBLkW9MO8p:Data.Bifunctor.Tannen
                         bifunctors-5.4.1@bifunctors-5.4.1-8Xk5Wsnk1fr6rBLkW9MO8p:Data.Bifunctor.Wrapped
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         ghc-boot-th-8.0.1@ghc-boot-th-8.0.1:GHC.LanguageExtensions.Type
                         kan-extensions-5.0.1@kan-extensions-5.0.1-Asa0tkk9PuPLZ2eXuJ10Gr:Data.Functor.Day
                         kan-extensions-5.0.1@kan-extensions-5.0.1-Asa0tkk9PuPLZ2eXuJ10Gr:Data.Functor.Yoneda
                         lens-4.14@lens-4.14-LQbbTc84mRL8zB39b41ZKA:Control.Lens.At
                         lens-4.14@lens-4.14-LQbbTc84mRL8zB39b41ZKA:Control.Lens.Internal.Indexed
                         lens-4.14@lens-4.14-LQbbTc84mRL8zB39b41ZKA:Control.Lens.Reified
                         lens-4.14@lens-4.14-LQbbTc84mRL8zB39b41ZKA:Control.Lens.Tuple
                         lens-4.14@lens-4.14-LQbbTc84mRL8zB39b41ZKA:Control.Lens.Wrapped
                         lens-4.14@lens-4.14-LQbbTc84mRL8zB39b41ZKA:Control.Lens.Zoom
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.1.0@primitive-0.6.1.0-Ip44DqhfCp21tTUYbecwa:Control.Monad.Primitive
                         profunctors-5.2@profunctors-5.2-2ZZOz6u59T2H8y7z3NgZkY:Data.Profunctor.Rep
                         tagged-0.8.5@tagged-0.8.5-CtgV6EcN0do8F92i1S6iYx:Data.Tagged
                         template-haskell-2.11.0.0:Language.Haskell.TH.Syntax
                         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text
                         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text.Lazy
                         unordered-containers-0.2.7.1@unordered-containers-0.2.7.1-Eo9jd5DMz45DhBLCG8skzW:Data.HashMap.Base
                         unordered-containers-0.2.7.1@unordered-containers-0.2.7.1-Eo9jd5DMz45DhBLCG8skzW:Data.HashSet
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Primitive
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Storable
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Unboxed
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Unboxed.Base
import  -/  Alias ba36719cc8f68ab87c0ee8446a683f1b
  exports: 03b73823d7379fa3fc65780b7c8ac5e2
  BitBoard 461830e1b89cbd9e95b01ba7aa2fcc74
  Square 47e0dc39b5f004e762e108114ef07a8d
  ZobristKey ab98ea94473ec2650a6572a2f90c85e1
import  -/  Bitwise dac3e64a54b8be9d7c8e1f130b8e73fa
  exports: 9b4cf91b2dee21d2fcd203a2334d40a1
  joint d98fb2644b317d27b91085307d2a9706
import  -/  base-4.9.0.0:Data.Word cf9c7419e077bbdd2be059981bfe778f
import  -/  base-4.9.0.0:GHC.Base dd8044a8d640eee51828c17c476a6ba7
import  -/  base-4.9.0.0:GHC.Enum dab7089478c738f0ffbf72212d9113c9
import  -/  base-4.9.0.0:GHC.Err 20faef8829fd13c027d0ee2213637534
import  -/  base-4.9.0.0:GHC.Num f0aed3315b3ed1b330b71fc4148a5581
import  -/  base-4.9.0.0:GHC.Read 4c41c56299e3935fa784002a9231b325
import  -/  base-4.9.0.0:GHC.Show 0b5845243cb2ec62b57dd6963d276ec6
import  -/  base-4.9.0.0:Prelude 2d9cd8b0ec3d728f62b734df888d2e34
import  -/  ghc-prim-0.5.0.0:GHC.Classes 16d48e012d23eaef9bca91ccdd572c02
import  -/  ghc-prim-0.5.0.0:GHC.Types 7378e41b7749213c8c88ceb6b0665d4c
import  -/  lens-4.14@lens-4.14-LQbbTc84mRL8zB39b41ZKA:Control.Lens b7b80d679f99639b22dc49438349ebe7
import  -/  lens-4.14@lens-4.14-LQbbTc84mRL8zB39b41ZKA:Control.Lens.TH 36e9d75427edb0642c4f058cda24cd53
import  -/  lens-4.14@lens-4.14-LQbbTc84mRL8zB39b41ZKA:Control.Lens.Type 270ffd0ddba3f1e8d7fe322624ac30d8
eb148c194a6596da1eda8b5ef23786a4
  $fEnumCastleRight :: GHC.Enum.Enum BasicData.CastleRight
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BasicData.CastleRight
                  BasicData.$fEnumCastleRight_$csucc
                  BasicData.$fEnumCastleRight_$cpred
                  BasicData.$fEnumCastleRight_$ctoEnum
                  BasicData.$fEnumCastleRight_$cfromEnum
                  BasicData.$fEnumCastleRight_$cenumFrom
                  BasicData.$fEnumCastleRight_$cenumFromThen
                  BasicData.$fEnumCastleRight_$cenumFromTo
                  BasicData.$fEnumCastleRight_$cenumFromThenTo -}
eb148c194a6596da1eda8b5ef23786a4
  $fEnumCastleRight1 :: GHC.Prim.Int# -> BasicData.CastleRight
  {- Arity: 1, Strictness: <L,U>x -}
eb148c194a6596da1eda8b5ef23786a4
  $fEnumCastleRight2 :: BasicData.CastleRight
  {- Strictness: x -}
eb148c194a6596da1eda8b5ef23786a4
  $fEnumCastleRight3 :: BasicData.CastleRight
  {- Strictness: x -}
eb148c194a6596da1eda8b5ef23786a4
  $fEnumCastleRight_$cenumFrom ::
    BasicData.CastleRight -> [BasicData.CastleRight]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (a :: BasicData.CastleRight) ->
                 let {
                   x0 :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ BasicData.CastleRight a
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.># x0 15#) of wild {
                   GHC.Types.False -> BasicData.$fEnumCastleRight_go x0
                   GHC.Types.True -> GHC.Types.[] @ BasicData.CastleRight }) -}
eb148c194a6596da1eda8b5ef23786a4
  $fEnumCastleRight_$cenumFromThen ::
    BasicData.CastleRight
    -> BasicData.CastleRight -> [BasicData.CastleRight]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: BasicData.CastleRight)
                   (b :: BasicData.CastleRight) ->
                 let {
                   a# :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ BasicData.CastleRight a
                 } in
                 let {
                   b# :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ BasicData.CastleRight b
                 } in
                 let {
                   $j :: GHC.Prim.Int# -> [BasicData.CastleRight]
                     {- Arity: 1, Strictness: <S,U> -}
                   = \ (y :: GHC.Prim.Int#)[OneShot] ->
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.>=# b# a#) of wild {
                       GHC.Types.False
                       -> GHC.Enum.efdtIntDnFB
                            @ [BasicData.CastleRight]
                            BasicData.$fEnumCastleRight_c1
                            (GHC.Types.[] @ BasicData.CastleRight)
                            a#
                            b#
                            y
                       GHC.Types.True
                       -> GHC.Enum.efdtIntUpFB
                            @ [BasicData.CastleRight]
                            BasicData.$fEnumCastleRight_c1
                            (GHC.Types.[] @ BasicData.CastleRight)
                            a#
                            b#
                            y }
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.># a# b#) of wild {
                   GHC.Types.False -> $j 15# GHC.Types.True -> $j 0# }) -}
eb148c194a6596da1eda8b5ef23786a4
  $fEnumCastleRight_$cenumFromThenTo ::
    BasicData.CastleRight
    -> BasicData.CastleRight
    -> BasicData.CastleRight
    -> [BasicData.CastleRight]
  {- Arity: 3, Strictness: <S,1*U><S,1*U><S,1*U>,
     Unfolding: (\ (x1 :: BasicData.CastleRight)
                   (x2 :: BasicData.CastleRight)
                   (y :: BasicData.CastleRight) ->
                 let {
                   x4 :: GHC.Prim.Int#
                   = GHC.Prim.dataToTag# @ BasicData.CastleRight x1
                 } in
                 let {
                   x5 :: GHC.Prim.Int#
                   = GHC.Prim.dataToTag# @ BasicData.CastleRight x2
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# x5 x4) of wild {
                   GHC.Types.False
                   -> GHC.Enum.efdtIntDnFB
                        @ [BasicData.CastleRight]
                        BasicData.$fEnumCastleRight_c
                        (GHC.Types.[] @ BasicData.CastleRight)
                        x4
                        x5
                        (GHC.Prim.dataToTag# @ BasicData.CastleRight y)
                   GHC.Types.True
                   -> GHC.Enum.efdtIntUpFB
                        @ [BasicData.CastleRight]
                        BasicData.$fEnumCastleRight_c
                        (GHC.Types.[] @ BasicData.CastleRight)
                        x4
                        x5
                        (GHC.Prim.dataToTag# @ BasicData.CastleRight y) }) -}
eb148c194a6596da1eda8b5ef23786a4
  $fEnumCastleRight_$cenumFromTo ::
    BasicData.CastleRight
    -> BasicData.CastleRight -> [BasicData.CastleRight]
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (x :: BasicData.CastleRight)
                   (y :: BasicData.CastleRight) ->
                 let {
                   x0 :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ BasicData.CastleRight x
                 } in
                 let {
                   y1 :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ BasicData.CastleRight y
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.># x0 y1) of wild {
                   GHC.Types.False
                   -> letrec {
                        go12 :: GHC.Prim.Int# -> [BasicData.CastleRight]
                          {- Arity: 1, Strictness: <L,U> -}
                        = \ (x1 :: GHC.Prim.Int#) ->
                          GHC.Types.:
                            @ BasicData.CastleRight
                            (case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.>=# x1 0#) of wild1 {
                               GHC.Types.False -> BasicData.$fEnumCastleRight1 x1
                               GHC.Types.True
                               -> case GHC.Prim.tagToEnum#
                                         @ GHC.Types.Bool
                                         (GHC.Prim.<=# x1 15#) of wild2 {
                                    GHC.Types.False -> BasicData.$fEnumCastleRight1 x1
                                    GHC.Types.True
                                    -> GHC.Prim.tagToEnum# @ BasicData.CastleRight x1 } })
                            (case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.==# x1 y1) of wild1 {
                               GHC.Types.False -> go12 (GHC.Prim.+# x1 1#)
                               GHC.Types.True -> GHC.Types.[] @ BasicData.CastleRight })
                      } in
                      go12 x0
                   GHC.Types.True -> GHC.Types.[] @ BasicData.CastleRight }) -}
eb148c194a6596da1eda8b5ef23786a4
  $fEnumCastleRight_$cfromEnum ::
    BasicData.CastleRight -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (a :: BasicData.CastleRight) ->
                 case a of x1 { DEFAULT ->
                 GHC.Types.I# (GHC.Prim.dataToTag# @ BasicData.CastleRight x1) }) -}
eb148c194a6596da1eda8b5ef23786a4
  $fEnumCastleRight_$cpred ::
    BasicData.CastleRight -> BasicData.CastleRight
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (a :: BasicData.CastleRight) ->
                 case a of x1 { DEFAULT ->
                 case GHC.Prim.dataToTag# @ BasicData.CastleRight x1 of wild {
                   DEFAULT
                   -> GHC.Prim.tagToEnum#
                        @ BasicData.CastleRight
                        (GHC.Prim.+# wild -1#)
                   0# -> BasicData.$fEnumCastleRight2 } }) -}
eb148c194a6596da1eda8b5ef23786a4
  $fEnumCastleRight_$csucc ::
    BasicData.CastleRight -> BasicData.CastleRight
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (a :: BasicData.CastleRight) ->
                 case a of x1 { DEFAULT ->
                 case GHC.Prim.dataToTag# @ BasicData.CastleRight x1 of wild {
                   DEFAULT
                   -> GHC.Prim.tagToEnum#
                        @ BasicData.CastleRight
                        (GHC.Prim.+# wild 1#)
                   15# -> BasicData.$fEnumCastleRight3 } }) -}
eb148c194a6596da1eda8b5ef23786a4
  $fEnumCastleRight_$ctoEnum ::
    GHC.Types.Int -> BasicData.CastleRight
  {- Arity: 1, Strictness: <S(S),1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int) ->
                 case w of ww { GHC.Types.I# ww1 -> BasicData.$w$ctoEnum ww1 }) -}
eb148c194a6596da1eda8b5ef23786a4
  $fEnumCastleRight_c ::
    GHC.Types.Int -> [BasicData.CastleRight] -> [BasicData.CastleRight]
  {- Arity: 2, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: GHC.Types.Int) (ys :: [BasicData.CastleRight]) ->
                 GHC.Types.:
                   @ BasicData.CastleRight
                   (BasicData.$fEnumCastleRight_$ctoEnum x)
                   ys) -}
eb148c194a6596da1eda8b5ef23786a4
  $fEnumCastleRight_c1 ::
    GHC.Types.Int -> [BasicData.CastleRight] -> [BasicData.CastleRight]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: GHC.Types.Int) (ys :: [BasicData.CastleRight]) ->
                 GHC.Types.:
                   @ BasicData.CastleRight
                   (case x of wild { GHC.Types.I# a ->
                    GHC.Prim.tagToEnum# @ BasicData.CastleRight a })
                   ys) -}
eb148c194a6596da1eda8b5ef23786a4
  $fEnumCastleRight_go :: GHC.Prim.Int# -> [BasicData.CastleRight]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
7aa905d66113e099b17b06056ad98d42
  $fEnumColor :: GHC.Enum.Enum BasicData.Color
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BasicData.Color
                  BasicData.$fEnumColor_$csucc
                  BasicData.$fEnumColor_$cpred
                  BasicData.$fEnumColor_$ctoEnum
                  BasicData.$fEnumColor_$cfromEnum
                  BasicData.$fEnumColor_$cenumFrom
                  BasicData.$fEnumColor_$cenumFromThen
                  BasicData.$fEnumColor_$cenumFromTo
                  BasicData.$fEnumColor_$cenumFromThenTo -}
7aa905d66113e099b17b06056ad98d42
  $fEnumColor1 :: GHC.Prim.Int# -> BasicData.Color
  {- Arity: 1, Strictness: <L,U>x -}
7aa905d66113e099b17b06056ad98d42
  $fEnumColor2 :: [BasicData.Color]
  {- Unfolding: (BasicData.$fEnumColor_go2 1#) -}
7aa905d66113e099b17b06056ad98d42
  $fEnumColor3 :: [BasicData.Color]
  {- Unfolding: (BasicData.$fEnumColor_go3 0#) -}
7aa905d66113e099b17b06056ad98d42
  $fEnumColor4 :: BasicData.Color
  {- Strictness: x -}
7aa905d66113e099b17b06056ad98d42
  $fEnumColor5 :: BasicData.Color
  {- Strictness: x -}
7aa905d66113e099b17b06056ad98d42
  $fEnumColor_$cenumFrom :: BasicData.Color -> [BasicData.Color]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (a :: BasicData.Color) ->
                 case a of wild {
                   BasicData.White -> BasicData.$fEnumColor3
                   BasicData.Black -> BasicData.$fEnumColor2 }) -}
7aa905d66113e099b17b06056ad98d42
  $fEnumColor_$cenumFromThen ::
    BasicData.Color -> BasicData.Color -> [BasicData.Color]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: BasicData.Color) (b :: BasicData.Color) ->
                 let {
                   $j :: GHC.Prim.Int# -> [BasicData.Color]
                     {- Arity: 1, Strictness: <S,U> -}
                   = \ (a# :: GHC.Prim.Int#)[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Int# -> [BasicData.Color]
                         {- Arity: 1, Strictness: <S,U> -}
                       = \ (b# :: GHC.Prim.Int#)[OneShot] ->
                         let {
                           $j2 :: GHC.Prim.Int# -> [BasicData.Color]
                             {- Arity: 1, Strictness: <S,U> -}
                           = \ (y :: GHC.Prim.Int#)[OneShot] ->
                             case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.>=# b# a#) of wild {
                               GHC.Types.False
                               -> GHC.Enum.efdtIntDnFB
                                    @ [BasicData.Color]
                                    BasicData.$fEnumColor_c1
                                    (GHC.Types.[] @ BasicData.Color)
                                    a#
                                    b#
                                    y
                               GHC.Types.True
                               -> GHC.Enum.efdtIntUpFB
                                    @ [BasicData.Color]
                                    BasicData.$fEnumColor_c1
                                    (GHC.Types.[] @ BasicData.Color)
                                    a#
                                    b#
                                    y }
                         } in
                         case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.># a# b#) of wild {
                           GHC.Types.False -> $j2 1# GHC.Types.True -> $j2 0# }
                     } in
                     case b of wild {
                       BasicData.White -> $j1 0# BasicData.Black -> $j1 1# }
                 } in
                 case a of wild {
                   BasicData.White -> $j 0# BasicData.Black -> $j 1# }) -}
7aa905d66113e099b17b06056ad98d42
  $fEnumColor_$cenumFromThenTo ::
    BasicData.Color
    -> BasicData.Color -> BasicData.Color -> [BasicData.Color]
  {- Arity: 3, Strictness: <S,1*U><S,1*U><S,1*U>,
     Unfolding: (\ (x1 :: BasicData.Color)
                   (x2 :: BasicData.Color)
                   (y :: BasicData.Color) ->
                 let {
                   $j :: GHC.Prim.Int# -> [BasicData.Color]
                     {- Arity: 1, Strictness: <S,U> -}
                   = \ (x4 :: GHC.Prim.Int#)[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Int# -> [BasicData.Color]
                         {- Arity: 1, Strictness: <S,U> -}
                       = \ (x5 :: GHC.Prim.Int#)[OneShot] ->
                         case y of wild {
                           BasicData.White
                           -> case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.>=# x5 x4) of wild1 {
                                GHC.Types.False
                                -> GHC.Enum.efdtIntDnFB
                                     @ [BasicData.Color]
                                     BasicData.$fEnumColor_c
                                     (GHC.Types.[] @ BasicData.Color)
                                     x4
                                     x5
                                     0#
                                GHC.Types.True
                                -> GHC.Enum.efdtIntUpFB
                                     @ [BasicData.Color]
                                     BasicData.$fEnumColor_c
                                     (GHC.Types.[] @ BasicData.Color)
                                     x4
                                     x5
                                     0# }
                           BasicData.Black
                           -> case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.>=# x5 x4) of wild1 {
                                GHC.Types.False
                                -> GHC.Enum.efdtIntDnFB
                                     @ [BasicData.Color]
                                     BasicData.$fEnumColor_c
                                     (GHC.Types.[] @ BasicData.Color)
                                     x4
                                     x5
                                     1#
                                GHC.Types.True
                                -> GHC.Enum.efdtIntUpFB
                                     @ [BasicData.Color]
                                     BasicData.$fEnumColor_c
                                     (GHC.Types.[] @ BasicData.Color)
                                     x4
                                     x5
                                     1# } }
                     } in
                     case x2 of wild {
                       BasicData.White -> $j1 0# BasicData.Black -> $j1 1# }
                 } in
                 case x1 of wild {
                   BasicData.White -> $j 0# BasicData.Black -> $j 1# }) -}
7aa905d66113e099b17b06056ad98d42
  $fEnumColor_$cenumFromTo ::
    BasicData.Color -> BasicData.Color -> [BasicData.Color]
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (x :: BasicData.Color) (y :: BasicData.Color) ->
                 let {
                   $j :: GHC.Prim.Int# -> [BasicData.Color]
                     {- Arity: 1, Strictness: <S,U> -}
                   = \ (x1 :: GHC.Prim.Int#)[OneShot] ->
                     case y of wild {
                       BasicData.White
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 0#) of wild1 {
                            GHC.Types.False -> BasicData.$fEnumColor_go1 x1
                            GHC.Types.True -> GHC.Types.[] @ BasicData.Color }
                       BasicData.Black
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 1#) of wild1 {
                            GHC.Types.False -> BasicData.$fEnumColor_go x1
                            GHC.Types.True -> GHC.Types.[] @ BasicData.Color } }
                 } in
                 case x of wild {
                   BasicData.White -> $j 0# BasicData.Black -> $j 1# }) -}
7aa905d66113e099b17b06056ad98d42
  $fEnumColor_$cfromEnum :: BasicData.Color -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (a :: BasicData.Color) ->
                 case a of wild {
                   BasicData.White -> GHC.Types.I# 0#
                   BasicData.Black -> GHC.Types.I# 1# }) -}
7aa905d66113e099b17b06056ad98d42
  $fEnumColor_$cpred :: BasicData.Color -> BasicData.Color
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (a :: BasicData.Color) ->
                 case a of wild {
                   BasicData.White -> BasicData.$fEnumColor4
                   BasicData.Black -> BasicData.White }) -}
7aa905d66113e099b17b06056ad98d42
  $fEnumColor_$csucc :: BasicData.Color -> BasicData.Color
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (a :: BasicData.Color) ->
                 case a of wild {
                   BasicData.White -> BasicData.Black
                   BasicData.Black -> BasicData.$fEnumColor5 }) -}
7aa905d66113e099b17b06056ad98d42
  $fEnumColor_$ctoEnum :: GHC.Types.Int -> BasicData.Color
  {- Arity: 1, Strictness: <S(S),1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int) ->
                 case w of ww { GHC.Types.I# ww1 -> BasicData.$w$ctoEnum1 ww1 }) -}
7aa905d66113e099b17b06056ad98d42
  $fEnumColor_c ::
    GHC.Types.Int -> [BasicData.Color] -> [BasicData.Color]
  {- Arity: 2, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: GHC.Types.Int) (ys :: [BasicData.Color]) ->
                 GHC.Types.:
                   @ BasicData.Color
                   (BasicData.$fEnumColor_$ctoEnum x)
                   ys) -}
7aa905d66113e099b17b06056ad98d42
  $fEnumColor_c1 ::
    GHC.Types.Int -> [BasicData.Color] -> [BasicData.Color]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: GHC.Types.Int) (ys :: [BasicData.Color]) ->
                 GHC.Types.:
                   @ BasicData.Color
                   (case x of wild { GHC.Types.I# a ->
                    GHC.Prim.tagToEnum# @ BasicData.Color a })
                   ys) -}
7aa905d66113e099b17b06056ad98d42
  $fEnumColor_go :: GHC.Prim.Int# -> [BasicData.Color]
  {- Arity: 1, Strictness: <L,U> -}
7aa905d66113e099b17b06056ad98d42
  $fEnumColor_go1 :: GHC.Prim.Int# -> [BasicData.Color]
  {- Arity: 1, Strictness: <L,U> -}
7aa905d66113e099b17b06056ad98d42
  $fEnumColor_go2 :: GHC.Prim.Int# -> [BasicData.Color]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
7aa905d66113e099b17b06056ad98d42
  $fEnumColor_go3 :: GHC.Prim.Int# -> [BasicData.Color]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
6ec8bb4a2d566f1e93a3d9d3f2980b78
  $fEnumMoveType :: GHC.Enum.Enum BasicData.MoveType
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BasicData.MoveType
                  BasicData.$fEnumMoveType_$csucc
                  BasicData.$fEnumMoveType_$cpred
                  BasicData.$fEnumMoveType_$ctoEnum
                  BasicData.$fEnumMoveType_$cfromEnum
                  BasicData.$fEnumMoveType_$cenumFrom
                  BasicData.$fEnumMoveType_$cenumFromThen
                  BasicData.$fEnumMoveType_$cenumFromTo
                  BasicData.$fEnumMoveType_$cenumFromThenTo -}
6ec8bb4a2d566f1e93a3d9d3f2980b78
  $fEnumMoveType1 :: [BasicData.MoveType]
  {- Unfolding: (BasicData.$fEnumMoveType_go4 3#) -}
6ec8bb4a2d566f1e93a3d9d3f2980b78
  $fEnumMoveType2 :: [BasicData.MoveType]
  {- Unfolding: (BasicData.$fEnumMoveType_go5 2#) -}
6ec8bb4a2d566f1e93a3d9d3f2980b78
  $fEnumMoveType3 :: [BasicData.MoveType]
  {- Unfolding: (BasicData.$fEnumMoveType_go6 1#) -}
6ec8bb4a2d566f1e93a3d9d3f2980b78
  $fEnumMoveType4 :: [BasicData.MoveType]
  {- Unfolding: (BasicData.$fEnumMoveType_go7 0#) -}
6ec8bb4a2d566f1e93a3d9d3f2980b78
  $fEnumMoveType5 :: GHC.Prim.Int# -> BasicData.MoveType
  {- Arity: 1, Strictness: <L,U>x -}
6ec8bb4a2d566f1e93a3d9d3f2980b78
  $fEnumMoveType6 :: BasicData.MoveType
  {- Strictness: x -}
6ec8bb4a2d566f1e93a3d9d3f2980b78
  $fEnumMoveType7 :: BasicData.MoveType
  {- Strictness: x -}
6ec8bb4a2d566f1e93a3d9d3f2980b78
  $fEnumMoveType_$cenumFrom ::
    BasicData.MoveType -> [BasicData.MoveType]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (a :: BasicData.MoveType) ->
                 case a of wild {
                   BasicData.Normal -> BasicData.$fEnumMoveType4
                   BasicData.EnPassant -> BasicData.$fEnumMoveType3
                   BasicData.Castling -> BasicData.$fEnumMoveType2
                   BasicData.Promotion -> BasicData.$fEnumMoveType1 }) -}
6ec8bb4a2d566f1e93a3d9d3f2980b78
  $fEnumMoveType_$cenumFromThen ::
    BasicData.MoveType -> BasicData.MoveType -> [BasicData.MoveType]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: BasicData.MoveType)
                   (b :: BasicData.MoveType) ->
                 let {
                   $j :: GHC.Prim.Int# -> [BasicData.MoveType]
                     {- Arity: 1, Strictness: <S,U> -}
                   = \ (a# :: GHC.Prim.Int#)[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Int# -> [BasicData.MoveType]
                         {- Arity: 1, Strictness: <S,U> -}
                       = \ (b# :: GHC.Prim.Int#)[OneShot] ->
                         let {
                           $j2 :: GHC.Prim.Int# -> [BasicData.MoveType]
                             {- Arity: 1, Strictness: <S,U> -}
                           = \ (y :: GHC.Prim.Int#)[OneShot] ->
                             case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.>=# b# a#) of wild {
                               GHC.Types.False
                               -> GHC.Enum.efdtIntDnFB
                                    @ [BasicData.MoveType]
                                    BasicData.$fEnumMoveType_c
                                    (GHC.Types.[] @ BasicData.MoveType)
                                    a#
                                    b#
                                    y
                               GHC.Types.True
                               -> GHC.Enum.efdtIntUpFB
                                    @ [BasicData.MoveType]
                                    BasicData.$fEnumMoveType_c
                                    (GHC.Types.[] @ BasicData.MoveType)
                                    a#
                                    b#
                                    y }
                         } in
                         case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.># a# b#) of wild {
                           GHC.Types.False -> $j2 3# GHC.Types.True -> $j2 0# }
                     } in
                     case b of wild {
                       BasicData.Normal -> $j1 0#
                       BasicData.EnPassant -> $j1 1#
                       BasicData.Castling -> $j1 2#
                       BasicData.Promotion -> $j1 3# }
                 } in
                 case a of wild {
                   BasicData.Normal -> $j 0#
                   BasicData.EnPassant -> $j 1#
                   BasicData.Castling -> $j 2#
                   BasicData.Promotion -> $j 3# }) -}
6ec8bb4a2d566f1e93a3d9d3f2980b78
  $fEnumMoveType_$cenumFromThenTo ::
    BasicData.MoveType
    -> BasicData.MoveType -> BasicData.MoveType -> [BasicData.MoveType]
  {- Arity: 3, Strictness: <S,1*U><S,1*U><S,1*U> -}
6ec8bb4a2d566f1e93a3d9d3f2980b78
  $fEnumMoveType_$cenumFromTo ::
    BasicData.MoveType -> BasicData.MoveType -> [BasicData.MoveType]
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (x :: BasicData.MoveType)
                   (y :: BasicData.MoveType) ->
                 let {
                   $j :: GHC.Prim.Int# -> [BasicData.MoveType]
                     {- Arity: 1, Strictness: <S,U> -}
                   = \ (x1 :: GHC.Prim.Int#)[OneShot] ->
                     case y of wild {
                       BasicData.Normal
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 0#) of wild1 {
                            GHC.Types.False -> BasicData.$fEnumMoveType_go3 x1
                            GHC.Types.True -> GHC.Types.[] @ BasicData.MoveType }
                       BasicData.EnPassant
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 1#) of wild1 {
                            GHC.Types.False -> BasicData.$fEnumMoveType_go2 x1
                            GHC.Types.True -> GHC.Types.[] @ BasicData.MoveType }
                       BasicData.Castling
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 2#) of wild1 {
                            GHC.Types.False -> BasicData.$fEnumMoveType_go1 x1
                            GHC.Types.True -> GHC.Types.[] @ BasicData.MoveType }
                       BasicData.Promotion
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 3#) of wild1 {
                            GHC.Types.False -> BasicData.$fEnumMoveType_go x1
                            GHC.Types.True -> GHC.Types.[] @ BasicData.MoveType } }
                 } in
                 case x of wild {
                   BasicData.Normal -> $j 0#
                   BasicData.EnPassant -> $j 1#
                   BasicData.Castling -> $j 2#
                   BasicData.Promotion -> $j 3# }) -}
6ec8bb4a2d566f1e93a3d9d3f2980b78
  $fEnumMoveType_$cfromEnum :: BasicData.MoveType -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (a :: BasicData.MoveType) ->
                 case a of wild {
                   BasicData.Normal -> GHC.Types.I# 0#
                   BasicData.EnPassant -> GHC.Types.I# 1#
                   BasicData.Castling -> GHC.Types.I# 2#
                   BasicData.Promotion -> GHC.Types.I# 3# }) -}
6ec8bb4a2d566f1e93a3d9d3f2980b78
  $fEnumMoveType_$cpred :: BasicData.MoveType -> BasicData.MoveType
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (a :: BasicData.MoveType) ->
                 case a of wild {
                   BasicData.Normal -> BasicData.$fEnumMoveType6
                   BasicData.EnPassant -> BasicData.Normal
                   BasicData.Castling -> BasicData.EnPassant
                   BasicData.Promotion -> BasicData.Castling }) -}
6ec8bb4a2d566f1e93a3d9d3f2980b78
  $fEnumMoveType_$csucc :: BasicData.MoveType -> BasicData.MoveType
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (a :: BasicData.MoveType) ->
                 case a of wild {
                   BasicData.Normal -> BasicData.EnPassant
                   BasicData.EnPassant -> BasicData.Castling
                   BasicData.Castling -> BasicData.Promotion
                   BasicData.Promotion -> BasicData.$fEnumMoveType7 }) -}
6ec8bb4a2d566f1e93a3d9d3f2980b78
  $fEnumMoveType_$ctoEnum :: GHC.Types.Int -> BasicData.MoveType
  {- Arity: 1, Strictness: <S(S),1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int) ->
                 case w of ww { GHC.Types.I# ww1 -> BasicData.$w$ctoEnum2 ww1 }) -}
6ec8bb4a2d566f1e93a3d9d3f2980b78
  $fEnumMoveType_c ::
    GHC.Types.Int -> [BasicData.MoveType] -> [BasicData.MoveType]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: GHC.Types.Int) (ys :: [BasicData.MoveType]) ->
                 GHC.Types.:
                   @ BasicData.MoveType
                   (case x of wild { GHC.Types.I# a ->
                    GHC.Prim.tagToEnum# @ BasicData.MoveType a })
                   ys) -}
6ec8bb4a2d566f1e93a3d9d3f2980b78
  $fEnumMoveType_go :: GHC.Prim.Int# -> [BasicData.MoveType]
  {- Arity: 1, Strictness: <L,U> -}
6ec8bb4a2d566f1e93a3d9d3f2980b78
  $fEnumMoveType_go1 :: GHC.Prim.Int# -> [BasicData.MoveType]
  {- Arity: 1, Strictness: <L,U> -}
6ec8bb4a2d566f1e93a3d9d3f2980b78
  $fEnumMoveType_go2 :: GHC.Prim.Int# -> [BasicData.MoveType]
  {- Arity: 1, Strictness: <L,U> -}
6ec8bb4a2d566f1e93a3d9d3f2980b78
  $fEnumMoveType_go3 :: GHC.Prim.Int# -> [BasicData.MoveType]
  {- Arity: 1, Strictness: <L,U> -}
6ec8bb4a2d566f1e93a3d9d3f2980b78
  $fEnumMoveType_go4 :: GHC.Prim.Int# -> [BasicData.MoveType]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
6ec8bb4a2d566f1e93a3d9d3f2980b78
  $fEnumMoveType_go5 :: GHC.Prim.Int# -> [BasicData.MoveType]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
6ec8bb4a2d566f1e93a3d9d3f2980b78
  $fEnumMoveType_go6 :: GHC.Prim.Int# -> [BasicData.MoveType]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
6ec8bb4a2d566f1e93a3d9d3f2980b78
  $fEnumMoveType_go7 :: GHC.Prim.Int# -> [BasicData.MoveType]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
d7f82d5957caceafc8b688a191800308
  $fEnumPieceType :: GHC.Enum.Enum BasicData.PieceType
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BasicData.PieceType
                  BasicData.$fEnumPieceType_$csucc
                  BasicData.$fEnumPieceType_$cpred
                  BasicData.$fEnumPieceType_$ctoEnum
                  BasicData.$fEnumPieceType_$cfromEnum
                  BasicData.$fEnumPieceType_$cenumFrom
                  BasicData.$fEnumPieceType_$cenumFromThen
                  BasicData.$fEnumPieceType_$cenumFromTo
                  BasicData.$fEnumPieceType_$cenumFromThenTo -}
d7f82d5957caceafc8b688a191800308
  $fEnumPieceType1 :: [BasicData.PieceType]
  {- Unfolding: (BasicData.$fEnumPieceType_go6 5#) -}
d7f82d5957caceafc8b688a191800308
  $fEnumPieceType2 :: [BasicData.PieceType]
  {- Unfolding: (BasicData.$fEnumPieceType_go7 4#) -}
d7f82d5957caceafc8b688a191800308
  $fEnumPieceType3 :: [BasicData.PieceType]
  {- Unfolding: (BasicData.$fEnumPieceType_go8 3#) -}
d7f82d5957caceafc8b688a191800308
  $fEnumPieceType4 :: [BasicData.PieceType]
  {- Unfolding: (BasicData.$fEnumPieceType_go9 2#) -}
d7f82d5957caceafc8b688a191800308
  $fEnumPieceType5 :: [BasicData.PieceType]
  {- Unfolding: (BasicData.$fEnumPieceType_go10 1#) -}
d7f82d5957caceafc8b688a191800308
  $fEnumPieceType6 :: [BasicData.PieceType]
  {- Unfolding: (BasicData.$fEnumPieceType_go11 0#) -}
d7f82d5957caceafc8b688a191800308
  $fEnumPieceType7 :: GHC.Prim.Int# -> BasicData.PieceType
  {- Arity: 1, Strictness: <L,U>x -}
d7f82d5957caceafc8b688a191800308
  $fEnumPieceType8 :: BasicData.PieceType
  {- Strictness: x -}
d7f82d5957caceafc8b688a191800308
  $fEnumPieceType9 :: BasicData.PieceType
  {- Strictness: x -}
d7f82d5957caceafc8b688a191800308
  $fEnumPieceType_$cenumFrom ::
    BasicData.PieceType -> [BasicData.PieceType]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (a :: BasicData.PieceType) ->
                 case a of wild {
                   BasicData.Pawn -> BasicData.$fEnumPieceType6
                   BasicData.Knight -> BasicData.$fEnumPieceType5
                   BasicData.Bishop -> BasicData.$fEnumPieceType4
                   BasicData.Rook -> BasicData.$fEnumPieceType3
                   BasicData.Queen -> BasicData.$fEnumPieceType2
                   BasicData.King -> BasicData.$fEnumPieceType1 }) -}
d7f82d5957caceafc8b688a191800308
  $fEnumPieceType_$cenumFromThen ::
    BasicData.PieceType -> BasicData.PieceType -> [BasicData.PieceType]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: BasicData.PieceType)
                   (b :: BasicData.PieceType) ->
                 let {
                   $j :: GHC.Prim.Int# -> [BasicData.PieceType]
                     {- Arity: 1, Strictness: <S,U> -}
                   = \ (a# :: GHC.Prim.Int#)[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Int# -> [BasicData.PieceType]
                         {- Arity: 1, Strictness: <S,U> -}
                       = \ (b# :: GHC.Prim.Int#)[OneShot] ->
                         let {
                           $j2 :: GHC.Prim.Int# -> [BasicData.PieceType]
                             {- Arity: 1, Strictness: <S,U> -}
                           = \ (y :: GHC.Prim.Int#)[OneShot] ->
                             case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.>=# b# a#) of wild {
                               GHC.Types.False
                               -> GHC.Enum.efdtIntDnFB
                                    @ [BasicData.PieceType]
                                    BasicData.$fEnumPieceType_c
                                    (GHC.Types.[] @ BasicData.PieceType)
                                    a#
                                    b#
                                    y
                               GHC.Types.True
                               -> GHC.Enum.efdtIntUpFB
                                    @ [BasicData.PieceType]
                                    BasicData.$fEnumPieceType_c
                                    (GHC.Types.[] @ BasicData.PieceType)
                                    a#
                                    b#
                                    y }
                         } in
                         case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.># a# b#) of wild {
                           GHC.Types.False -> $j2 5# GHC.Types.True -> $j2 0# }
                     } in
                     case b of wild {
                       BasicData.Pawn -> $j1 0#
                       BasicData.Knight -> $j1 1#
                       BasicData.Bishop -> $j1 2#
                       BasicData.Rook -> $j1 3#
                       BasicData.Queen -> $j1 4#
                       BasicData.King -> $j1 5# }
                 } in
                 case a of wild {
                   BasicData.Pawn -> $j 0#
                   BasicData.Knight -> $j 1#
                   BasicData.Bishop -> $j 2#
                   BasicData.Rook -> $j 3#
                   BasicData.Queen -> $j 4#
                   BasicData.King -> $j 5# }) -}
d7f82d5957caceafc8b688a191800308
  $fEnumPieceType_$cenumFromThenTo ::
    BasicData.PieceType
    -> BasicData.PieceType
    -> BasicData.PieceType
    -> [BasicData.PieceType]
  {- Arity: 3, Strictness: <S,1*U><S,1*U><S,1*U> -}
d7f82d5957caceafc8b688a191800308
  $fEnumPieceType_$cenumFromTo ::
    BasicData.PieceType -> BasicData.PieceType -> [BasicData.PieceType]
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (x :: BasicData.PieceType)
                   (y :: BasicData.PieceType) ->
                 let {
                   $j :: GHC.Prim.Int# -> [BasicData.PieceType]
                     {- Arity: 1, Strictness: <S,U> -}
                   = \ (x1 :: GHC.Prim.Int#)[OneShot] ->
                     case y of wild {
                       BasicData.Pawn
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 0#) of wild1 {
                            GHC.Types.False -> BasicData.$fEnumPieceType_go5 x1
                            GHC.Types.True -> GHC.Types.[] @ BasicData.PieceType }
                       BasicData.Knight
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 1#) of wild1 {
                            GHC.Types.False -> BasicData.$fEnumPieceType_go4 x1
                            GHC.Types.True -> GHC.Types.[] @ BasicData.PieceType }
                       BasicData.Bishop
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 2#) of wild1 {
                            GHC.Types.False -> BasicData.$fEnumPieceType_go3 x1
                            GHC.Types.True -> GHC.Types.[] @ BasicData.PieceType }
                       BasicData.Rook
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 3#) of wild1 {
                            GHC.Types.False -> BasicData.$fEnumPieceType_go2 x1
                            GHC.Types.True -> GHC.Types.[] @ BasicData.PieceType }
                       BasicData.Queen
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 4#) of wild1 {
                            GHC.Types.False -> BasicData.$fEnumPieceType_go1 x1
                            GHC.Types.True -> GHC.Types.[] @ BasicData.PieceType }
                       BasicData.King
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 5#) of wild1 {
                            GHC.Types.False -> BasicData.$fEnumPieceType_go x1
                            GHC.Types.True -> GHC.Types.[] @ BasicData.PieceType } }
                 } in
                 case x of wild {
                   BasicData.Pawn -> $j 0#
                   BasicData.Knight -> $j 1#
                   BasicData.Bishop -> $j 2#
                   BasicData.Rook -> $j 3#
                   BasicData.Queen -> $j 4#
                   BasicData.King -> $j 5# }) -}
d7f82d5957caceafc8b688a191800308
  $fEnumPieceType_$cfromEnum :: BasicData.PieceType -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: BasicData.PieceType) ->
                 case w of wild {
                   BasicData.Pawn -> GHC.Types.I# 0#
                   BasicData.Knight -> GHC.Types.I# 1#
                   BasicData.Bishop -> GHC.Types.I# 2#
                   BasicData.Rook -> GHC.Types.I# 3#
                   BasicData.Queen -> GHC.Types.I# 4#
                   BasicData.King -> GHC.Types.I# 5# }) -}
d7f82d5957caceafc8b688a191800308
  $fEnumPieceType_$cpred ::
    BasicData.PieceType -> BasicData.PieceType
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (a :: BasicData.PieceType) ->
                 case a of wild {
                   BasicData.Pawn -> BasicData.$fEnumPieceType8
                   BasicData.Knight -> BasicData.Pawn
                   BasicData.Bishop -> BasicData.Knight
                   BasicData.Rook -> BasicData.Bishop
                   BasicData.Queen -> BasicData.Rook
                   BasicData.King -> BasicData.Queen }) -}
d7f82d5957caceafc8b688a191800308
  $fEnumPieceType_$csucc ::
    BasicData.PieceType -> BasicData.PieceType
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (a :: BasicData.PieceType) ->
                 case a of wild {
                   BasicData.Pawn -> BasicData.Knight
                   BasicData.Knight -> BasicData.Bishop
                   BasicData.Bishop -> BasicData.Rook
                   BasicData.Rook -> BasicData.Queen
                   BasicData.Queen -> BasicData.King
                   BasicData.King -> BasicData.$fEnumPieceType9 }) -}
d7f82d5957caceafc8b688a191800308
  $fEnumPieceType_$ctoEnum :: GHC.Types.Int -> BasicData.PieceType
  {- Arity: 1, Strictness: <S(S),1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int) ->
                 case w of ww { GHC.Types.I# ww1 -> BasicData.$w$ctoEnum3 ww1 }) -}
d7f82d5957caceafc8b688a191800308
  $fEnumPieceType_c ::
    GHC.Types.Int -> [BasicData.PieceType] -> [BasicData.PieceType]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: GHC.Types.Int) (ys :: [BasicData.PieceType]) ->
                 GHC.Types.:
                   @ BasicData.PieceType
                   (case x of wild { GHC.Types.I# a ->
                    GHC.Prim.tagToEnum# @ BasicData.PieceType a })
                   ys) -}
d7f82d5957caceafc8b688a191800308
  $fEnumPieceType_go :: GHC.Prim.Int# -> [BasicData.PieceType]
  {- Arity: 1, Strictness: <L,U> -}
d7f82d5957caceafc8b688a191800308
  $fEnumPieceType_go1 :: GHC.Prim.Int# -> [BasicData.PieceType]
  {- Arity: 1, Strictness: <L,U> -}
d7f82d5957caceafc8b688a191800308
  $fEnumPieceType_go10 :: GHC.Prim.Int# -> [BasicData.PieceType]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
d7f82d5957caceafc8b688a191800308
  $fEnumPieceType_go11 :: GHC.Prim.Int# -> [BasicData.PieceType]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
d7f82d5957caceafc8b688a191800308
  $fEnumPieceType_go2 :: GHC.Prim.Int# -> [BasicData.PieceType]
  {- Arity: 1, Strictness: <L,U> -}
d7f82d5957caceafc8b688a191800308
  $fEnumPieceType_go3 :: GHC.Prim.Int# -> [BasicData.PieceType]
  {- Arity: 1, Strictness: <L,U> -}
d7f82d5957caceafc8b688a191800308
  $fEnumPieceType_go4 :: GHC.Prim.Int# -> [BasicData.PieceType]
  {- Arity: 1, Strictness: <L,U> -}
d7f82d5957caceafc8b688a191800308
  $fEnumPieceType_go5 :: GHC.Prim.Int# -> [BasicData.PieceType]
  {- Arity: 1, Strictness: <L,U> -}
d7f82d5957caceafc8b688a191800308
  $fEnumPieceType_go6 :: GHC.Prim.Int# -> [BasicData.PieceType]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
d7f82d5957caceafc8b688a191800308
  $fEnumPieceType_go7 :: GHC.Prim.Int# -> [BasicData.PieceType]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
d7f82d5957caceafc8b688a191800308
  $fEnumPieceType_go8 :: GHC.Prim.Int# -> [BasicData.PieceType]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
d7f82d5957caceafc8b688a191800308
  $fEnumPieceType_go9 :: GHC.Prim.Int# -> [BasicData.PieceType]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
eb148c194a6596da1eda8b5ef23786a4
  $fEqCastleRight :: GHC.Classes.Eq BasicData.CastleRight
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BasicData.CastleRight
                  BasicData.$fEqCastleRight_$c==
                  BasicData.$fEqCastleRight_$c/= -}
eb148c194a6596da1eda8b5ef23786a4
  $fEqCastleRight_$c/= ::
    BasicData.CastleRight -> BasicData.CastleRight -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: BasicData.CastleRight) (b :: BasicData.CastleRight) ->
                 case a of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==#
                           (GHC.Prim.dataToTag# @ BasicData.CastleRight x1)
                           (GHC.Prim.dataToTag# @ BasicData.CastleRight x2)) of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } } }) -}
eb148c194a6596da1eda8b5ef23786a4
  $fEqCastleRight_$c== ::
    BasicData.CastleRight -> BasicData.CastleRight -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: BasicData.CastleRight) (b :: BasicData.CastleRight) ->
                 case a of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.==#
                      (GHC.Prim.dataToTag# @ BasicData.CastleRight x1)
                      (GHC.Prim.dataToTag# @ BasicData.CastleRight x2)) } }) -}
7aa905d66113e099b17b06056ad98d42
  $fEqColor :: GHC.Classes.Eq BasicData.Color
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BasicData.Color
                  BasicData.$fEqColor_$c==
                  BasicData.$fEqColor_$c/= -}
7aa905d66113e099b17b06056ad98d42
  $fEqColor_$c/= ::
    BasicData.Color -> BasicData.Color -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: BasicData.Color) (b :: BasicData.Color) ->
                 case a of wild {
                   BasicData.White
                   -> case b of wild1 {
                        BasicData.White -> GHC.Types.False
                        BasicData.Black -> GHC.Types.True }
                   BasicData.Black
                   -> case b of wild1 {
                        BasicData.White -> GHC.Types.True
                        BasicData.Black -> GHC.Types.False } }) -}
7aa905d66113e099b17b06056ad98d42
  $fEqColor_$c== ::
    BasicData.Color -> BasicData.Color -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: BasicData.Color) (ds1 :: BasicData.Color) ->
                 case ds of wild {
                   BasicData.White
                   -> case ds1 of wild1 {
                        BasicData.White -> GHC.Types.True
                        BasicData.Black -> GHC.Types.False }
                   BasicData.Black
                   -> case ds1 of wild1 {
                        BasicData.White -> GHC.Types.False
                        BasicData.Black -> GHC.Types.True } }) -}
6ec8bb4a2d566f1e93a3d9d3f2980b78
  $fEqMoveType :: GHC.Classes.Eq BasicData.MoveType
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BasicData.MoveType
                  BasicData.$fEqMoveType_$c==
                  BasicData.$fEqMoveType_$c/= -}
6ec8bb4a2d566f1e93a3d9d3f2980b78
  $fEqMoveType_$c/= ::
    BasicData.MoveType -> BasicData.MoveType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: BasicData.MoveType)
                   (b :: BasicData.MoveType) ->
                 case a of wild {
                   BasicData.Normal
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True BasicData.Normal -> GHC.Types.False }
                   BasicData.EnPassant
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True BasicData.EnPassant -> GHC.Types.False }
                   BasicData.Castling
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True BasicData.Castling -> GHC.Types.False }
                   BasicData.Promotion
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        BasicData.Promotion -> GHC.Types.False } }) -}
6ec8bb4a2d566f1e93a3d9d3f2980b78
  $fEqMoveType_$c== ::
    BasicData.MoveType -> BasicData.MoveType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: BasicData.MoveType)
                   (ds1 :: BasicData.MoveType) ->
                 case ds of wild {
                   BasicData.Normal
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False BasicData.Normal -> GHC.Types.True }
                   BasicData.EnPassant
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False BasicData.EnPassant -> GHC.Types.True }
                   BasicData.Castling
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False BasicData.Castling -> GHC.Types.True }
                   BasicData.Promotion
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        BasicData.Promotion -> GHC.Types.True } }) -}
d7f82d5957caceafc8b688a191800308
  $fEqPieceType :: GHC.Classes.Eq BasicData.PieceType
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BasicData.PieceType
                  BasicData.$fEqPieceType_$c==
                  BasicData.$fEqPieceType_$c/= -}
d7f82d5957caceafc8b688a191800308
  $fEqPieceType_$c/= ::
    BasicData.PieceType -> BasicData.PieceType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: BasicData.PieceType)
                   (b :: BasicData.PieceType) ->
                 case a of wild {
                   BasicData.Pawn
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True BasicData.Pawn -> GHC.Types.False }
                   BasicData.Knight
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True BasicData.Knight -> GHC.Types.False }
                   BasicData.Bishop
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True BasicData.Bishop -> GHC.Types.False }
                   BasicData.Rook
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True BasicData.Rook -> GHC.Types.False }
                   BasicData.Queen
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True BasicData.Queen -> GHC.Types.False }
                   BasicData.King
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True BasicData.King -> GHC.Types.False } }) -}
d7f82d5957caceafc8b688a191800308
  $fEqPieceType_$c== ::
    BasicData.PieceType -> BasicData.PieceType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: BasicData.PieceType)
                   (ds1 :: BasicData.PieceType) ->
                 case ds of wild {
                   BasicData.Pawn
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False BasicData.Pawn -> GHC.Types.True }
                   BasicData.Knight
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False BasicData.Knight -> GHC.Types.True }
                   BasicData.Bishop
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False BasicData.Bishop -> GHC.Types.True }
                   BasicData.Rook
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False BasicData.Rook -> GHC.Types.True }
                   BasicData.Queen
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False BasicData.Queen -> GHC.Types.True }
                   BasicData.King
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False BasicData.King -> GHC.Types.True } }) -}
a4a6ae1d21eb516f790aeadb42103ac1
  $fEqPosition :: GHC.Classes.Eq BasicData.Position
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BasicData.Position
                  BasicData.$fEqPosition_$c==
                  BasicData.$fEqPosition_$c/= -}
a4a6ae1d21eb516f790aeadb42103ac1
  $fEqPosition_$c/= ::
    BasicData.Position -> BasicData.Position -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLLLLLLSSLLLLLLLLLS),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S(SLLLLLLLSSLLLLLLLLLS),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: BasicData.Position) (b :: BasicData.Position) ->
                 case BasicData.$fEqPosition_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
a4a6ae1d21eb516f790aeadb42103ac1
  $fEqPosition_$c== ::
    BasicData.Position -> BasicData.Position -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLLLLLLSSLLLLLLLLLS),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S(SLLLLLLLSSLLLLLLLLLS),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: BasicData.Position) (w1 :: BasicData.Position) ->
                 case w of ww { BasicData.Position ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ww20 ->
                 case w1 of ww21 { BasicData.Position ww22 ww23 ww24 ww25 ww26 ww27 ww28 ww29 ww30 ww31 ww32 ww33 ww34 ww35 ww36 ww37 ww38 ww39 ww40 ww41 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.eqWord# ww1 ww22) of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.eqWord# ww2 ww23) of wild1 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.eqWord# ww3 ww24) of wild2 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True
                             -> case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.eqWord# ww4 ww25) of wild3 {
                                  GHC.Types.False -> GHC.Types.False
                                  GHC.Types.True
                                  -> case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.eqWord# ww5 ww26) of wild4 {
                                       GHC.Types.False -> GHC.Types.False
                                       GHC.Types.True
                                       -> case GHC.Prim.tagToEnum#
                                                 @ GHC.Types.Bool
                                                 (GHC.Prim.eqWord# ww6 ww27) of wild5 {
                                            GHC.Types.False -> GHC.Types.False
                                            GHC.Types.True
                                            -> case GHC.Prim.tagToEnum#
                                                      @ GHC.Types.Bool
                                                      (GHC.Prim.eqWord# ww7 ww28) of wild6 {
                                                 GHC.Types.False -> GHC.Types.False
                                                 GHC.Types.True
                                                 -> case GHC.Prim.tagToEnum#
                                                           @ GHC.Types.Bool
                                                           (GHC.Prim.eqWord# ww8 ww29) of wild7 {
                                                      GHC.Types.False -> GHC.Types.False
                                                      GHC.Types.True
                                                      -> let {
                                                           $j :: GHC.Prim.Void# -> GHC.Types.Bool
                                                             {- Arity: 1, Strictness: <L,A> -}
                                                           = \ (w2 :: GHC.Prim.Void#)[OneShot] ->
                                                             case GHC.Prim.tagToEnum#
                                                                    @ GHC.Types.Bool
                                                                    (GHC.Prim.==#
                                                                       ww11
                                                                       ww32) of wild8 {
                                                               GHC.Types.False -> GHC.Types.False
                                                               GHC.Types.True
                                                               -> case GHC.Prim.tagToEnum#
                                                                         @ GHC.Types.Bool
                                                                         (GHC.Prim.==#
                                                                            ww12
                                                                            ww33) of wild9 {
                                                                    GHC.Types.False
                                                                    -> GHC.Types.False
                                                                    GHC.Types.True
                                                                    -> case GHC.Prim.tagToEnum#
                                                                              @ GHC.Types.Bool
                                                                              (GHC.Prim.==#
                                                                                 ww13
                                                                                 ww34) of wild10 {
                                                                         GHC.Types.False
                                                                         -> GHC.Types.False
                                                                         GHC.Types.True
                                                                         -> case GHC.Prim.tagToEnum#
                                                                                   @ GHC.Types.Bool
                                                                                   (GHC.Prim.eqWord#
                                                                                      ww14
                                                                                      ww35) of wild11 {
                                                                              GHC.Types.False
                                                                              -> GHC.Types.False
                                                                              GHC.Types.True
                                                                              -> case GHC.Prim.tagToEnum#
                                                                                        @ GHC.Types.Bool
                                                                                        (GHC.Prim.eqWord#
                                                                                           ww15
                                                                                           ww36) of wild12 {
                                                                                   GHC.Types.False
                                                                                   -> GHC.Types.False
                                                                                   GHC.Types.True
                                                                                   -> case GHC.Prim.tagToEnum#
                                                                                             @ GHC.Types.Bool
                                                                                             (GHC.Prim.eqWord#
                                                                                                ww16
                                                                                                ww37) of wild13 {
                                                                                        GHC.Types.False
                                                                                        -> GHC.Types.False
                                                                                        GHC.Types.True
                                                                                        -> case GHC.Prim.tagToEnum#
                                                                                                  @ GHC.Types.Bool
                                                                                                  (GHC.Prim.eqWord#
                                                                                                     ww17
                                                                                                     ww38) of wild14 {
                                                                                             GHC.Types.False
                                                                                             -> GHC.Types.False
                                                                                             GHC.Types.True
                                                                                             -> case GHC.Prim.tagToEnum#
                                                                                                       @ GHC.Types.Bool
                                                                                                       (GHC.Prim.==#
                                                                                                          ww18
                                                                                                          ww39) of wild15 {
                                                                                                  GHC.Types.False
                                                                                                  -> GHC.Types.False
                                                                                                  GHC.Types.True
                                                                                                  -> case GHC.Prim.tagToEnum#
                                                                                                            @ GHC.Types.Bool
                                                                                                            (GHC.Prim.eqWord#
                                                                                                               ww19
                                                                                                               ww40) of wild16 {
                                                                                                       GHC.Types.False
                                                                                                       -> GHC.Types.False
                                                                                                       GHC.Types.True
                                                                                                       -> GHC.Classes.$fEq[]_$c==
                                                                                                            @ GHC.Word.Word64
                                                                                                            GHC.Word.$fEqWord64
                                                                                                            ww20
                                                                                                            ww41 } } } } } } } } }
                                                         } in
                                                         case ww9 of wild8 {
                                                           BasicData.White
                                                           -> case ww30 of wild9 {
                                                                BasicData.White
                                                                -> case GHC.Prim.tagToEnum#
                                                                          @ GHC.Types.Bool
                                                                          (GHC.Prim.==#
                                                                             (GHC.Prim.dataToTag#
                                                                                @ BasicData.CastleRight
                                                                                ww10)
                                                                             (GHC.Prim.dataToTag#
                                                                                @ BasicData.CastleRight
                                                                                ww31)) of wild10 {
                                                                     GHC.Types.False
                                                                     -> GHC.Types.False
                                                                     GHC.Types.True
                                                                     -> $j GHC.Prim.void# }
                                                                BasicData.Black -> GHC.Types.False }
                                                           BasicData.Black
                                                           -> case ww30 of wild9 {
                                                                BasicData.White -> GHC.Types.False
                                                                BasicData.Black
                                                                -> case GHC.Prim.tagToEnum#
                                                                          @ GHC.Types.Bool
                                                                          (GHC.Prim.==#
                                                                             (GHC.Prim.dataToTag#
                                                                                @ BasicData.CastleRight
                                                                                ww10)
                                                                             (GHC.Prim.dataToTag#
                                                                                @ BasicData.CastleRight
                                                                                ww31)) of wild10 {
                                                                     GHC.Types.False
                                                                     -> GHC.Types.False
                                                                     GHC.Types.True
                                                                     -> $j
                                                                          GHC.Prim.void# } } } } } } } } } } } } }) -}
5e36171074e73b14b120e7a641b7de10
  $fEqScoreType :: GHC.Classes.Eq BasicData.ScoreType
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BasicData.ScoreType
                  BasicData.$fEqScoreType_$c==
                  BasicData.$fEqScoreType_$c/= -}
5e36171074e73b14b120e7a641b7de10
  $fEqScoreType_$c/= ::
    BasicData.ScoreType -> BasicData.ScoreType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: BasicData.ScoreType) (b :: BasicData.ScoreType) ->
                 case a of wild {
                   BasicData.Exact
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True BasicData.Exact -> GHC.Types.False }
                   BasicData.LowerBound
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True BasicData.LowerBound -> GHC.Types.False }
                   BasicData.UpperBound
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        BasicData.UpperBound -> GHC.Types.False } }) -}
5e36171074e73b14b120e7a641b7de10
  $fEqScoreType_$c== ::
    BasicData.ScoreType -> BasicData.ScoreType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: BasicData.ScoreType) (ds1 :: BasicData.ScoreType) ->
                 case ds of wild {
                   BasicData.Exact
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False BasicData.Exact -> GHC.Types.True }
                   BasicData.LowerBound
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False BasicData.LowerBound -> GHC.Types.True }
                   BasicData.UpperBound
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        BasicData.UpperBound -> GHC.Types.True } }) -}
d7f82d5957caceafc8b688a191800308
  $fOrdPieceType :: GHC.Classes.Ord BasicData.PieceType
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BasicData.PieceType
                  BasicData.$fEqPieceType
                  BasicData.$fOrdPieceType_$ccompare
                  BasicData.$fOrdPieceType_$c<
                  BasicData.$fOrdPieceType_$c<=
                  BasicData.$fOrdPieceType_$c>
                  BasicData.$fOrdPieceType_$c>=
                  BasicData.$fOrdPieceType_$cmax
                  BasicData.$fOrdPieceType_$cmin -}
d7f82d5957caceafc8b688a191800308
  $fOrdPieceType_$c< ::
    BasicData.PieceType -> BasicData.PieceType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: BasicData.PieceType)
                   (b :: BasicData.PieceType) ->
                 case a of wild {
                   BasicData.Pawn
                   -> case b of wild1 {
                        BasicData.Pawn -> GHC.Types.False
                        BasicData.Knight -> GHC.Types.True
                        BasicData.Bishop -> GHC.Types.True
                        BasicData.Rook -> GHC.Types.True
                        BasicData.Queen -> GHC.Types.True
                        BasicData.King -> GHC.Types.True }
                   BasicData.Knight
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.False
                        BasicData.Bishop -> GHC.Types.True
                        BasicData.Rook -> GHC.Types.True
                        BasicData.Queen -> GHC.Types.True
                        BasicData.King -> GHC.Types.True }
                   BasicData.Bishop
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.False
                        BasicData.Rook -> GHC.Types.True
                        BasicData.Queen -> GHC.Types.True
                        BasicData.King -> GHC.Types.True }
                   BasicData.Rook
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.False
                        BasicData.Queen -> GHC.Types.True
                        BasicData.King -> GHC.Types.True }
                   BasicData.Queen
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.False BasicData.King -> GHC.Types.True }
                   BasicData.King
                   -> case b of wild1 { DEFAULT -> GHC.Types.False } }) -}
d7f82d5957caceafc8b688a191800308
  $fOrdPieceType_$c<= ::
    BasicData.PieceType -> BasicData.PieceType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: BasicData.PieceType)
                   (b :: BasicData.PieceType) ->
                 case a of wild {
                   BasicData.Pawn -> case b of wild1 { DEFAULT -> GHC.Types.True }
                   BasicData.Knight
                   -> case b of wild1 {
                        BasicData.Pawn -> GHC.Types.False
                        BasicData.Knight -> GHC.Types.True
                        BasicData.Bishop -> GHC.Types.True
                        BasicData.Rook -> GHC.Types.True
                        BasicData.Queen -> GHC.Types.True
                        BasicData.King -> GHC.Types.True }
                   BasicData.Bishop
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.False
                        BasicData.Bishop -> GHC.Types.True
                        BasicData.Rook -> GHC.Types.True
                        BasicData.Queen -> GHC.Types.True
                        BasicData.King -> GHC.Types.True }
                   BasicData.Rook
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.False
                        BasicData.Rook -> GHC.Types.True
                        BasicData.Queen -> GHC.Types.True
                        BasicData.King -> GHC.Types.True }
                   BasicData.Queen
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.False
                        BasicData.Queen -> GHC.Types.True
                        BasicData.King -> GHC.Types.True }
                   BasicData.King
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.False BasicData.King -> GHC.Types.True } }) -}
d7f82d5957caceafc8b688a191800308
  $fOrdPieceType_$c> ::
    BasicData.PieceType -> BasicData.PieceType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: BasicData.PieceType)
                   (b :: BasicData.PieceType) ->
                 case a of wild {
                   BasicData.Pawn -> case b of wild1 { DEFAULT -> GHC.Types.False }
                   BasicData.Knight
                   -> case b of wild1 {
                        BasicData.Pawn -> GHC.Types.True
                        BasicData.Knight -> GHC.Types.False
                        BasicData.Bishop -> GHC.Types.False
                        BasicData.Rook -> GHC.Types.False
                        BasicData.Queen -> GHC.Types.False
                        BasicData.King -> GHC.Types.False }
                   BasicData.Bishop
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        BasicData.Bishop -> GHC.Types.False
                        BasicData.Rook -> GHC.Types.False
                        BasicData.Queen -> GHC.Types.False
                        BasicData.King -> GHC.Types.False }
                   BasicData.Rook
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        BasicData.Rook -> GHC.Types.False
                        BasicData.Queen -> GHC.Types.False
                        BasicData.King -> GHC.Types.False }
                   BasicData.Queen
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        BasicData.Queen -> GHC.Types.False
                        BasicData.King -> GHC.Types.False }
                   BasicData.King
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True BasicData.King -> GHC.Types.False } }) -}
d7f82d5957caceafc8b688a191800308
  $fOrdPieceType_$c>= ::
    BasicData.PieceType -> BasicData.PieceType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: BasicData.PieceType)
                   (b :: BasicData.PieceType) ->
                 case a of wild {
                   BasicData.Pawn
                   -> case b of wild1 {
                        BasicData.Pawn -> GHC.Types.True
                        BasicData.Knight -> GHC.Types.False
                        BasicData.Bishop -> GHC.Types.False
                        BasicData.Rook -> GHC.Types.False
                        BasicData.Queen -> GHC.Types.False
                        BasicData.King -> GHC.Types.False }
                   BasicData.Knight
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        BasicData.Bishop -> GHC.Types.False
                        BasicData.Rook -> GHC.Types.False
                        BasicData.Queen -> GHC.Types.False
                        BasicData.King -> GHC.Types.False }
                   BasicData.Bishop
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        BasicData.Rook -> GHC.Types.False
                        BasicData.Queen -> GHC.Types.False
                        BasicData.King -> GHC.Types.False }
                   BasicData.Rook
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        BasicData.Queen -> GHC.Types.False
                        BasicData.King -> GHC.Types.False }
                   BasicData.Queen
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True BasicData.King -> GHC.Types.False }
                   BasicData.King
                   -> case b of wild1 { DEFAULT -> GHC.Types.True } }) -}
d7f82d5957caceafc8b688a191800308
  $fOrdPieceType_$ccompare ::
    BasicData.PieceType -> BasicData.PieceType -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: BasicData.PieceType)
                   (b :: BasicData.PieceType) ->
                 case a of wild {
                   BasicData.Pawn
                   -> case b of wild1 {
                        BasicData.Pawn -> GHC.Types.EQ
                        BasicData.Knight -> GHC.Types.LT
                        BasicData.Bishop -> GHC.Types.LT
                        BasicData.Rook -> GHC.Types.LT
                        BasicData.Queen -> GHC.Types.LT
                        BasicData.King -> GHC.Types.LT }
                   BasicData.Knight
                   -> case b of wild1 {
                        BasicData.Pawn -> GHC.Types.GT
                        BasicData.Knight -> GHC.Types.EQ
                        BasicData.Bishop -> GHC.Types.LT
                        BasicData.Rook -> GHC.Types.LT
                        BasicData.Queen -> GHC.Types.LT
                        BasicData.King -> GHC.Types.LT }
                   BasicData.Bishop
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        BasicData.Bishop -> GHC.Types.EQ
                        BasicData.Rook -> GHC.Types.LT
                        BasicData.Queen -> GHC.Types.LT
                        BasicData.King -> GHC.Types.LT }
                   BasicData.Rook
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        BasicData.Rook -> GHC.Types.EQ
                        BasicData.Queen -> GHC.Types.LT
                        BasicData.King -> GHC.Types.LT }
                   BasicData.Queen
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        BasicData.Queen -> GHC.Types.EQ
                        BasicData.King -> GHC.Types.LT }
                   BasicData.King
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT BasicData.King -> GHC.Types.EQ } }) -}
d7f82d5957caceafc8b688a191800308
  $fOrdPieceType_$cmax ::
    BasicData.PieceType -> BasicData.PieceType -> BasicData.PieceType
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (x :: BasicData.PieceType)
                   (y :: BasicData.PieceType) ->
                 case x of wild {
                   BasicData.Pawn -> y
                   BasicData.Knight
                   -> case y of wild1 {
                        DEFAULT -> BasicData.Knight
                        BasicData.Bishop -> BasicData.Bishop
                        BasicData.Rook -> BasicData.Rook
                        BasicData.Queen -> BasicData.Queen
                        BasicData.King -> BasicData.King }
                   BasicData.Bishop
                   -> case y of wild1 {
                        DEFAULT -> BasicData.Bishop
                        BasicData.Rook -> BasicData.Rook
                        BasicData.Queen -> BasicData.Queen
                        BasicData.King -> BasicData.King }
                   BasicData.Rook
                   -> case y of wild1 {
                        DEFAULT -> BasicData.Rook
                        BasicData.Queen -> BasicData.Queen
                        BasicData.King -> BasicData.King }
                   BasicData.Queen
                   -> case y of wild1 {
                        DEFAULT -> BasicData.Queen BasicData.King -> BasicData.King }
                   BasicData.King
                   -> case y of wild1 { DEFAULT -> BasicData.King } }) -}
d7f82d5957caceafc8b688a191800308
  $fOrdPieceType_$cmin ::
    BasicData.PieceType -> BasicData.PieceType -> BasicData.PieceType
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (x :: BasicData.PieceType)
                   (y :: BasicData.PieceType) ->
                 case x of wild {
                   BasicData.Pawn -> case y of wild1 { DEFAULT -> BasicData.Pawn }
                   BasicData.Knight
                   -> case y of wild1 {
                        BasicData.Pawn -> BasicData.Pawn
                        BasicData.Knight -> BasicData.Knight
                        BasicData.Bishop -> BasicData.Knight
                        BasicData.Rook -> BasicData.Knight
                        BasicData.Queen -> BasicData.Knight
                        BasicData.King -> BasicData.Knight }
                   BasicData.Bishop
                   -> case y of wild1 {
                        DEFAULT -> wild1
                        BasicData.Bishop -> BasicData.Bishop
                        BasicData.Rook -> BasicData.Bishop
                        BasicData.Queen -> BasicData.Bishop
                        BasicData.King -> BasicData.Bishop }
                   BasicData.Rook
                   -> case y of wild1 {
                        DEFAULT -> wild1
                        BasicData.Rook -> BasicData.Rook
                        BasicData.Queen -> BasicData.Rook
                        BasicData.King -> BasicData.Rook }
                   BasicData.Queen
                   -> case y of wild1 {
                        DEFAULT -> wild1
                        BasicData.Queen -> BasicData.Queen
                        BasicData.King -> BasicData.Queen }
                   BasicData.King -> y }) -}
d7f82d5957caceafc8b688a191800308
  $fReadPieceType :: GHC.Read.Read BasicData.PieceType
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BasicData.PieceType
                  BasicData.$fReadPieceType_$creadsPrec
                  BasicData.$fReadPieceType_$creadList
                  BasicData.$fReadPieceType_$creadPrec
                  BasicData.$fReadPieceType_$creadListPrec -}
d7f82d5957caceafc8b688a191800308
  $fReadPieceType1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([BasicData.PieceType] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: [BasicData.PieceType]
                            -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.$wlist
                   @ BasicData.PieceType
                   BasicData.$fReadPieceType2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <BasicData.PieceType>_R))
                   @ b
                   eta1) -}
d7f82d5957caceafc8b688a191800308
  $fReadPieceType10 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec BasicData.PieceType)
  {- Strictness: m,
     Unfolding: ((BasicData.$fReadPieceType12,
                  BasicData.$fReadPieceType11
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <BasicData.PieceType>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <BasicData.PieceType>_R))))) -}
d7f82d5957caceafc8b688a191800308
  $fReadPieceType11 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (BasicData.PieceType -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: BasicData.PieceType -> Text.ParserCombinators.ReadP.P b) ->
                 eta BasicData.King) -}
2719961acf84d4b9c1ff245bb1a71d02
  $fReadPieceType12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "King"#) -}
d7f82d5957caceafc8b688a191800308
  $fReadPieceType13 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec BasicData.PieceType)
  {- Strictness: m,
     Unfolding: ((BasicData.$fReadPieceType15,
                  BasicData.$fReadPieceType14
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <BasicData.PieceType>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <BasicData.PieceType>_R))))) -}
d7f82d5957caceafc8b688a191800308
  $fReadPieceType14 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (BasicData.PieceType -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: BasicData.PieceType -> Text.ParserCombinators.ReadP.P b) ->
                 eta BasicData.Queen) -}
e9db1e59211eb5f9e1eff2fa45d44741
  $fReadPieceType15 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Queen"#) -}
d7f82d5957caceafc8b688a191800308
  $fReadPieceType16 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec BasicData.PieceType)
  {- Strictness: m,
     Unfolding: ((BasicData.$fReadPieceType18,
                  BasicData.$fReadPieceType17
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <BasicData.PieceType>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <BasicData.PieceType>_R))))) -}
d7f82d5957caceafc8b688a191800308
  $fReadPieceType17 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (BasicData.PieceType -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: BasicData.PieceType -> Text.ParserCombinators.ReadP.P b) ->
                 eta BasicData.Rook) -}
5926f4aaad33c60138ec8ab7cf5e7893
  $fReadPieceType18 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Rook"#) -}
d7f82d5957caceafc8b688a191800308
  $fReadPieceType19 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec BasicData.PieceType)
  {- Strictness: m,
     Unfolding: ((BasicData.$fReadPieceType21,
                  BasicData.$fReadPieceType20
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <BasicData.PieceType>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <BasicData.PieceType>_R))))) -}
d7f82d5957caceafc8b688a191800308
  $fReadPieceType2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP BasicData.PieceType
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ BasicData.PieceType
                   BasicData.$fReadPieceType3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                       <BasicData.PieceType>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                  <BasicData.PieceType>_R)))) -}
d7f82d5957caceafc8b688a191800308
  $fReadPieceType20 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (BasicData.PieceType -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: BasicData.PieceType -> Text.ParserCombinators.ReadP.P b) ->
                 eta BasicData.Bishop) -}
a4298fb998f4f3c1bdb0d65464fb8857
  $fReadPieceType21 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Bishop"#) -}
d7f82d5957caceafc8b688a191800308
  $fReadPieceType22 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec BasicData.PieceType)
  {- Strictness: m,
     Unfolding: ((BasicData.$fReadPieceType24,
                  BasicData.$fReadPieceType23
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <BasicData.PieceType>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <BasicData.PieceType>_R))))) -}
d7f82d5957caceafc8b688a191800308
  $fReadPieceType23 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (BasicData.PieceType -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: BasicData.PieceType -> Text.ParserCombinators.ReadP.P b) ->
                 eta BasicData.Knight) -}
b1f575e0014ac7065c830dbeb8e42c92
  $fReadPieceType24 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Knight"#) -}
d7f82d5957caceafc8b688a191800308
  $fReadPieceType25 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec BasicData.PieceType)
  {- Strictness: m,
     Unfolding: ((BasicData.$fReadPieceType27,
                  BasicData.$fReadPieceType26
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <BasicData.PieceType>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <BasicData.PieceType>_R))))) -}
d7f82d5957caceafc8b688a191800308
  $fReadPieceType26 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (BasicData.PieceType -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: BasicData.PieceType -> Text.ParserCombinators.ReadP.P b) ->
                 eta BasicData.Pawn) -}
c7ec41953f839ffb080f17b5828fd97c
  $fReadPieceType27 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Pawn"#) -}
d7f82d5957caceafc8b688a191800308
  $fReadPieceType28 ::
    Text.ParserCombinators.ReadP.P [BasicData.PieceType]
  {- Unfolding: (GHC.Read.$wlist
                   @ BasicData.PieceType
                   BasicData.$fReadPieceType2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <BasicData.PieceType>_R))
                   @ [BasicData.PieceType]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [BasicData.PieceType])) -}
d7f82d5957caceafc8b688a191800308
  $fReadPieceType3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (BasicData.PieceType -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: BasicData.PieceType
                            -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.choose2
                   @ BasicData.PieceType
                   BasicData.$fReadPieceType4
                   eta
                   @ b
                   eta1) -}
d7f82d5957caceafc8b688a191800308
  $fReadPieceType4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec BasicData.PieceType)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec BasicData.PieceType)
                   BasicData.$fReadPieceType25
                   BasicData.$fReadPieceType5) -}
d7f82d5957caceafc8b688a191800308
  $fReadPieceType5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec BasicData.PieceType)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec BasicData.PieceType)
                   BasicData.$fReadPieceType22
                   BasicData.$fReadPieceType6) -}
d7f82d5957caceafc8b688a191800308
  $fReadPieceType6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec BasicData.PieceType)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec BasicData.PieceType)
                   BasicData.$fReadPieceType19
                   BasicData.$fReadPieceType7) -}
d7f82d5957caceafc8b688a191800308
  $fReadPieceType7 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec BasicData.PieceType)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec BasicData.PieceType)
                   BasicData.$fReadPieceType16
                   BasicData.$fReadPieceType8) -}
d7f82d5957caceafc8b688a191800308
  $fReadPieceType8 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec BasicData.PieceType)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec BasicData.PieceType)
                   BasicData.$fReadPieceType13
                   BasicData.$fReadPieceType9) -}
d7f82d5957caceafc8b688a191800308
  $fReadPieceType9 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec BasicData.PieceType)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec BasicData.PieceType)
                   BasicData.$fReadPieceType10
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec BasicData.PieceType))) -}
d7f82d5957caceafc8b688a191800308
  $fReadPieceType_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [BasicData.PieceType]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [BasicData.PieceType]
                   BasicData.$fReadPieceType28) -}
d7f82d5957caceafc8b688a191800308
  $fReadPieceType_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [BasicData.PieceType]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                BasicData.$fReadPieceType1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[BasicData.PieceType]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[BasicData.PieceType]>_R))) -}
d7f82d5957caceafc8b688a191800308
  $fReadPieceType_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec BasicData.PieceType
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                BasicData.$fReadPieceType2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <BasicData.PieceType>_R)) -}
d7f82d5957caceafc8b688a191800308
  $fReadPieceType_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS BasicData.PieceType
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ BasicData.PieceType
                   ((GHC.Read.$fReadDouble10
                       @ BasicData.PieceType
                       BasicData.$fReadPieceType3
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <BasicData.PieceType>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                      <BasicData.PieceType>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <BasicData.PieceType>_R)
                      @ BasicData.PieceType
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ BasicData.PieceType))) -}
eb148c194a6596da1eda8b5ef23786a4
  $fShowCastleRight :: GHC.Show.Show BasicData.CastleRight
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BasicData.CastleRight
                  BasicData.$fShowCastleRight_$cshowsPrec
                  BasicData.$fShowCastleRight_$cshow
                  BasicData.$fShowCastleRight_$cshowList -}
eb148c194a6596da1eda8b5ef23786a4
  $fShowCastleRight1 ::
    BasicData.CastleRight -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2,
     Unfolding: (\ (x :: BasicData.CastleRight)
                   (s :: GHC.Base.String)[OneShot] ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   (BasicData.$fShowCastleRight_$cshow x)
                   s) -}
758b5b15baf037d263db7c8fcc6acf14
  $fShowCastleRight2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "-"#) -}
d3551c9b98bcc2473a679ef5f84f78ab
  $fShowCastleRight3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "K"#) -}
e91488988c56b95bcdd74fc592a23472
  $fShowCastleRight4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Q"#) -}
ef190b094879a83fa2b7492503d84033
  $fShowCastleRight5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "q"#) -}
d734a6b79fdbc02ba06f4a271ddbd159
  $fShowCastleRight6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "k"#) -}
eb148c194a6596da1eda8b5ef23786a4
  $fShowCastleRight_$cshow ::
    BasicData.CastleRight -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: BasicData.CastleRight) ->
                 let {
                   x1 :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ BasicData.CastleRight x
                 } in
                 let {
                   n :: [GHC.Types.Char]
                   = let {
                       n1 :: [GHC.Types.Char]
                       = let {
                           n2 :: [GHC.Types.Char]
                           = case GHC.Prim.andI# x1 2# of wild {
                               DEFAULT
                               -> GHC.Base.++
                                    @ GHC.Types.Char
                                    BasicData.$fShowCastleRight6
                                    (case GHC.Prim.andI# x1 1# of wild1 {
                                       DEFAULT -> BasicData.$fShowCastleRight5
                                       0# -> GHC.Types.[] @ GHC.Types.Char })
                               0#
                               -> case GHC.Prim.andI# x1 1# of wild1 {
                                    DEFAULT -> BasicData.$fShowCastleRight5
                                    0# -> GHC.Types.[] @ GHC.Types.Char } }
                         } in
                         case GHC.Prim.andI# x1 4# of wild {
                           DEFAULT
                           -> GHC.Base.++ @ GHC.Types.Char BasicData.$fShowCastleRight4 n2
                           0# -> n2 }
                     } in
                     case GHC.Prim.andI# x1 8# of wild {
                       DEFAULT
                       -> GHC.Base.++ @ GHC.Types.Char BasicData.$fShowCastleRight3 n1
                       0# -> n1 }
                 } in
                 case x1 of wild {
                   DEFAULT -> n
                   0#
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        BasicData.$fShowCastleRight2
                        n }) -}
eb148c194a6596da1eda8b5ef23786a4
  $fShowCastleRight_$cshowList ::
    [BasicData.CastleRight] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ (ls :: [BasicData.CastleRight])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ BasicData.CastleRight
                   BasicData.$fShowCastleRight1
                   ls
                   s) -}
eb148c194a6596da1eda8b5ef23786a4
  $fShowCastleRight_$cshowsPrec ::
    GHC.Types.Int -> BasicData.CastleRight -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int)
                   (x :: BasicData.CastleRight)
                   (s :: GHC.Base.String) ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c2 :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c2
                      n
                      (BasicData.$fShowCastleRight_$cshow x))
                   s) -}
7aa905d66113e099b17b06056ad98d42
  $fShowColor :: GHC.Show.Show BasicData.Color
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BasicData.Color
                  BasicData.$fShowColor_$cshowsPrec
                  BasicData.$fShowColor_$cshow
                  BasicData.$fShowColor_$cshowList -}
7aa905d66113e099b17b06056ad98d42
  $fShowColor1 :: BasicData.Color -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: BasicData.Color) (eta :: GHC.Base.String) ->
                 case ds of wild {
                   BasicData.White
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c2 :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c2 n BasicData.$fShowColor3)
                        eta
                   BasicData.Black
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c2 :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c2 n BasicData.$fShowColor2)
                        eta }) -}
3312ee06028d43a818d614baf0f76d42
  $fShowColor2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Black"#) -}
636a46410f92002197cb3d620007d6be
  $fShowColor3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "White"#) -}
7aa905d66113e099b17b06056ad98d42
  $fShowColor_$cshow :: BasicData.Color -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: BasicData.Color) ->
                 case x of wild {
                   BasicData.White -> BasicData.$fShowColor3
                   BasicData.Black -> BasicData.$fShowColor2 }) -}
7aa905d66113e099b17b06056ad98d42
  $fShowColor_$cshowList :: [BasicData.Color] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ BasicData.Color
                   BasicData.$fShowColor1) -}
7aa905d66113e099b17b06056ad98d42
  $fShowColor_$cshowsPrec ::
    GHC.Types.Int -> BasicData.Color -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int)
                   (ds1 :: BasicData.Color)
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   BasicData.White
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c2 :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c2 n BasicData.$fShowColor3)
                        eta
                   BasicData.Black
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c2 :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c2 n BasicData.$fShowColor2)
                        eta }) -}
6ec8bb4a2d566f1e93a3d9d3f2980b78
  $fShowMoveType :: GHC.Show.Show BasicData.MoveType
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BasicData.MoveType
                  BasicData.$fShowMoveType_$cshowsPrec
                  BasicData.$fShowMoveType_$cshow
                  BasicData.$fShowMoveType_$cshowList -}
58c828d7fc795c0bd9b2a9ae05cbaf97
  $fShowMoveType1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Promotion"#) -}
a1d47404442aadb24b7747e97287f768
  $fShowMoveType2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Castling"#) -}
f9c8d4292c4163cd697ac222f4715fed
  $fShowMoveType3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "EnPassant"#) -}
84e7c010845d7b33491e96f6f0e2feeb
  $fShowMoveType4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Normal"#) -}
6ec8bb4a2d566f1e93a3d9d3f2980b78
  $fShowMoveType_$cshow :: BasicData.MoveType -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: BasicData.MoveType) ->
                 BasicData.$fShowMoveType_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
6ec8bb4a2d566f1e93a3d9d3f2980b78
  $fShowMoveType_$cshowList :: [BasicData.MoveType] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ BasicData.MoveType
                   BasicData.$w$cshowsPrec) -}
6ec8bb4a2d566f1e93a3d9d3f2980b78
  $fShowMoveType_$cshowsPrec ::
    GHC.Types.Int -> BasicData.MoveType -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: BasicData.MoveType)
                   (w2 :: GHC.Base.String) ->
                 BasicData.$w$cshowsPrec w1 w2) -}
d7f82d5957caceafc8b688a191800308
  $fShowPieceType :: GHC.Show.Show BasicData.PieceType
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BasicData.PieceType
                  BasicData.$fShowPieceType_$cshowsPrec
                  BasicData.$fShowPieceType_$cshow
                  BasicData.$fShowPieceType_$cshowList -}
d7f82d5957caceafc8b688a191800308
  $fShowPieceType_$cshow :: BasicData.PieceType -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: BasicData.PieceType) ->
                 BasicData.$fShowPieceType_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
d7f82d5957caceafc8b688a191800308
  $fShowPieceType_$cshowList ::
    [BasicData.PieceType] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ BasicData.PieceType
                   BasicData.$w$cshowsPrec1) -}
d7f82d5957caceafc8b688a191800308
  $fShowPieceType_$cshowsPrec ::
    GHC.Types.Int -> BasicData.PieceType -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: BasicData.PieceType)
                   (w2 :: GHC.Base.String) ->
                 BasicData.$w$cshowsPrec1 w1 w2) -}
a4a6ae1d21eb516f790aeadb42103ac1
  $fShowPosition :: GHC.Show.Show BasicData.Position
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BasicData.Position
                  BasicData.$fShowPosition_$cshowsPrec
                  BasicData.$fShowPosition_$cshow
                  BasicData.$fShowPosition_$cshowList -}
a4a6ae1d21eb516f790aeadb42103ac1
  $fShowPosition1 :: BasicData.Position -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ (w :: BasicData.Position) ->
                 case w of ww { BasicData.Position ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ww20 ->
                 BasicData.$w$cshowsPrec2
                   0#
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   ww15
                   ww16
                   ww17
                   ww18
                   ww19
                   ww20 }) -}
a4a6ae1d21eb516f790aeadb42103ac1
  $fShowPosition_$cshow :: BasicData.Position -> GHC.Base.String
  {- Arity: 1,
     Strictness: <S(LLLLLLLLSSLLLLLLLLLS),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: BasicData.Position) ->
                 BasicData.$fShowPosition_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
a4a6ae1d21eb516f790aeadb42103ac1
  $fShowPosition_$cshowList :: [BasicData.Position] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ BasicData.Position
                   BasicData.$fShowPosition1) -}
a4a6ae1d21eb516f790aeadb42103ac1
  $fShowPosition_$cshowsPrec ::
    GHC.Types.Int -> BasicData.Position -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S(S),1*U(U)><S(LLLLLLLLSSLLLLLLLLLS),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: BasicData.Position) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { BasicData.Position ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ww20 ww21 ww22 ->
                 BasicData.$w$cshowsPrec2
                   ww1
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   ww15
                   ww16
                   ww17
                   ww18
                   ww19
                   ww20
                   ww21
                   ww22 } }) -}
0d9fd883826db24af7800af92b055fbe
  $tc'BK :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5670941576527836580##
                   10703835744987693848##
                   BasicData.$trModule
                   BasicData.$tc'BK1) -}
37ab46260ea73afb996c9a44d2e7a134
  $tc'BK1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'BK"#) -}
7381dc29b2150f541d5aa7337f033799
  $tc'BKBQ :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7773440584011773542##
                   10283228314680518524##
                   BasicData.$trModule
                   BasicData.$tc'BKBQ1) -}
4c8617bb1bced548ebe89251fea0b353
  $tc'BKBQ1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'BKBQ"#) -}
d0ecd513190f03cc5f70c93e45e0fcd0
  $tc'BQ :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9365388806035326598##
                   12419270067010523658##
                   BasicData.$trModule
                   BasicData.$tc'BQ1) -}
0016e82ef513387c5adc7f8a54364ca9
  $tc'BQ1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'BQ"#) -}
9f202325843e8af3285113b450b8d6c8
  $tc'Bishop :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4153286768031678754##
                   12516843066674977065##
                   BasicData.$trModule
                   BasicData.$tc'Bishop1) -}
e674d1d0428574269b48bfe9aa2b053b
  $tc'Bishop1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Bishop"#) -}
50926f1ae2a83b78655b49406ea4615c
  $tc'Black :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10789542489187372751##
                   10325474450284415467##
                   BasicData.$trModule
                   BasicData.$tc'Black1) -}
298089d87bcd25c94618aaf6669d74b9
  $tc'Black1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Black"#) -}
4dbbce6f271c43233149052aba3670f4
  $tc'Castling :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3978395704071230499##
                   15486175895880404390##
                   BasicData.$trModule
                   BasicData.$tc'Castling1) -}
810ec0ddda43f2bc369a263c80a73863
  $tc'Castling1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Castling"#) -}
5fc4f6c8ff455ae0325329f642309f88
  $tc'East :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12487644977558808938##
                   11918882212887519515##
                   BasicData.$trModule
                   BasicData.$tc'East1) -}
374fea822450647a9d8a141ea0e783e3
  $tc'East1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'East"#) -}
e6eca1a59049f76ae8d2474e950cd4fa
  $tc'EnPassant :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15364957767109625612##
                   14504565549138290113##
                   BasicData.$trModule
                   BasicData.$tc'EnPassant1) -}
3bc772800224e4cd1dae37d05c5e869d
  $tc'EnPassant1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'EnPassant"#) -}
9b949ffd82f99b61a9758033cf888bd6
  $tc'Exact :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16867084518481431550##
                   11253688222762980986##
                   BasicData.$trModule
                   BasicData.$tc'Exact1) -}
0fbab46b023c944d24aea8ee3d50cd60
  $tc'Exact1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Exact"#) -}
a83e8eb42bd5c832953a051063f90e31
  $tc'King :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13480821207559618468##
                   924385625337930903##
                   BasicData.$trModule
                   BasicData.$tc'King1) -}
ed8afb144b65df5a6e6a5f3a7d696e15
  $tc'King1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'King"#) -}
8f7db8f97280f455e64d1c4f63cfd0ae
  $tc'Knight :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17093489026538304851##
                   5715959261453382121##
                   BasicData.$trModule
                   BasicData.$tc'Knight1) -}
47bfd43062d85a6be44739a61c28bc3e
  $tc'Knight1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Knight"#) -}
71f77f6db8be54fa7afa09734096fd14
  $tc'LowerBound :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7588844047961037772##
                   13868417231568378853##
                   BasicData.$trModule
                   BasicData.$tc'LowerBound1) -}
4eae4891f3f0e55b63f12bef2246ea22
  $tc'LowerBound1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'LowerBound"#) -}
3124ae3eeea2d2d00f14336fe38cb28e
  $tc'None :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13494129786749767939##
                   901329332461394029##
                   BasicData.$trModule
                   BasicData.$tc'None1) -}
7815e549d16782f344451ae1371f5bee
  $tc'None1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'None"#) -}
7377a96de277729df11c7269b0c1f493
  $tc'Normal :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17153049467550048688##
                   16067785582336610730##
                   BasicData.$trModule
                   BasicData.$tc'Normal1) -}
711fe60803661b4aeefde3c71af296ba
  $tc'Normal1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Normal"#) -}
a499bd160bd50ea2f30bf901867aebe9
  $tc'North :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10779791033546130833##
                   12519282807503025645##
                   BasicData.$trModule
                   BasicData.$tc'North1) -}
af338f756b7f6d450dd2af671adb7baa
  $tc'North1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'North"#) -}
e62b95581e7e0fe8bc3f916fdb0ce835
  $tc'NorthEast :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7465193595516783035##
                   9930576287061525881##
                   BasicData.$trModule
                   BasicData.$tc'NorthEast1) -}
ba5570309569b9d6e1f715eead992aa2
  $tc'NorthEast1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'NorthEast"#) -}
594694a276044ff5e0b8c4eaa5e9928c
  $tc'NorthWest :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14236353269969370639##
                   16063935765375935580##
                   BasicData.$trModule
                   BasicData.$tc'NorthWest1) -}
a9471f4af3727132f9327f82db701989
  $tc'NorthWest1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'NorthWest"#) -}
37cb8a8bf5f456499d2bfcdead29bd7a
  $tc'Pawn :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6554827377980477167##
                   9440241620043870408##
                   BasicData.$trModule
                   BasicData.$tc'Pawn1) -}
7410a19b7c6894d51fa3e707de4f6584
  $tc'Pawn1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Pawn"#) -}
06938410a578ecdb2b9a6d00323f034e
  $tc'Position :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7304164492208504707##
                   10215129924105792270##
                   BasicData.$trModule
                   BasicData.$tc'Position1) -}
3b8bc1d03f862e5a60054f8c7cde8e68
  $tc'Position1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Position"#) -}
fcc508ee1280d6e993bc75d71e61047d
  $tc'Promotion :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8160711187233071099##
                   3928463847671869099##
                   BasicData.$trModule
                   BasicData.$tc'Promotion1) -}
edd781af38666a8164350040dd8068a8
  $tc'Promotion1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Promotion"#) -}
a069ed9ac311c099f0948a85151ae6b2
  $tc'Queen :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   734702374772360243##
                   10939544147793815018##
                   BasicData.$trModule
                   BasicData.$tc'Queen1) -}
84da9640ea2f22cd3b306dbb5367f87e
  $tc'Queen1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Queen"#) -}
75dd29128cffe4192c3f0b6a7918cba0
  $tc'Rook :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9767663605695667410##
                   9750568701984121479##
                   BasicData.$trModule
                   BasicData.$tc'Rook1) -}
67a1e05852bc6a922774e475cb0a01f4
  $tc'Rook1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Rook"#) -}
d8f06ebd8f3013c520e65b528bf8e0f2
  $tc'South :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11816058267527831158##
                   14215367150446478134##
                   BasicData.$trModule
                   BasicData.$tc'South1) -}
d27f8ada28afdb861ec3acadb5e9f960
  $tc'South1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'South"#) -}
f5c51ce6bdba6d66f0d6810273512ecf
  $tc'SouthEast :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   233874591711077450##
                   6204711694068039696##
                   BasicData.$trModule
                   BasicData.$tc'SouthEast1) -}
f908f633ede953291ce03fba78c8a7d6
  $tc'SouthEast1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'SouthEast"#) -}
36a83bea3f4af539f311353f6e54f197
  $tc'SouthWest :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6427962447581257124##
                   2671194865431939825##
                   BasicData.$trModule
                   BasicData.$tc'SouthWest1) -}
68ac0ab14019f0ff5ebecd52a982e95f
  $tc'SouthWest1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'SouthWest"#) -}
ecc863f38bcce4c4698d4b46f43e5b13
  $tc'UpperBound :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13663439892679912659##
                   15826617384976450468##
                   BasicData.$trModule
                   BasicData.$tc'UpperBound1) -}
1f4c4f64e3431a4268b9705317bb91ac
  $tc'UpperBound1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'UpperBound"#) -}
053defe3f9e890ce718c3160229c1f68
  $tc'WK :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8076739148966344436##
                   13417998251503750960##
                   BasicData.$trModule
                   BasicData.$tc'WK1) -}
b65002689ff542f179db263c2ca497ee
  $tc'WK1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'WK"#) -}
f91b2e8b5aa7cd426d89aa6e546ad629
  $tc'WKBK :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13150565960778968289##
                   11939531008353452134##
                   BasicData.$trModule
                   BasicData.$tc'WKBK1) -}
80f3e0f422d8e2998ad13b53c93db511
  $tc'WKBK1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'WKBK"#) -}
bad1f975227957befc23bd09212daaa7
  $tc'WKBKBQ :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18083416458079360451##
                   14723991427476846935##
                   BasicData.$trModule
                   BasicData.$tc'WKBKBQ1) -}
b5e26d1bad3ffb01026f888e03dfa850
  $tc'WKBKBQ1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'WKBKBQ"#) -}
b07ce153fe5b6fc4d205979f4a1ad2a6
  $tc'WKBQ :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7458034047123898609##
                   11784358804525992096##
                   BasicData.$trModule
                   BasicData.$tc'WKBQ1) -}
541b8aeb7e5f352df04d3ef284e10e6c
  $tc'WKBQ1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'WKBQ"#) -}
4ffea7719001ba66fef2df960eae99f6
  $tc'WKWQ :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12905845266841225528##
                   13837834627294766861##
                   BasicData.$trModule
                   BasicData.$tc'WKWQ1) -}
5f30cc7f87d8bd27a718abdbc6bddec5
  $tc'WKWQ1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'WKWQ"#) -}
acc1749f4b94103b5f850b8295a34f27
  $tc'WKWQBKBQ :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4711312458086044293##
                   15593201960805996##
                   BasicData.$trModule
                   BasicData.$tc'WKWQBKBQ1) -}
29f4421d41ead059f753d6425367e7d7
  $tc'WKWQBKBQ1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'WKWQBKBQ"#) -}
a05c093356067384647f7947cb8e62af
  $tc'WKWQBQ :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   833934980062317963##
                   13614198862886928490##
                   BasicData.$trModule
                   BasicData.$tc'WKWQBQ1) -}
e4e5e4c0e69f7bac956b341ebc83322b
  $tc'WKWQBQ1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'WKWQBQ"#) -}
e7fbe70356cf3cb1c5b4f5b645d7edcc
  $tc'WQ :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8750531599568774646##
                   1713868243591220648##
                   BasicData.$trModule
                   BasicData.$tc'WQ1) -}
aca2999d472842bd5c179f32000505f5
  $tc'WQ1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'WQ"#) -}
0954d75fd606f96e8c7399c54d42eaa3
  $tc'WQBK :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   862482670873521448##
                   6913887542457930666##
                   BasicData.$trModule
                   BasicData.$tc'WQBK1) -}
9624946cf73bcefd56751dc6ae348d7e
  $tc'WQBK1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'WQBK"#) -}
b5a6751731e59ae24f7f829858b3fbf3
  $tc'WQBKBQ :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10387634129428304836##
                   4620938091348661357##
                   BasicData.$trModule
                   BasicData.$tc'WQBKBQ1) -}
0899ba34685cbe6062cb5147701774e4
  $tc'WQBKBQ1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'WQBKBQ"#) -}
4524da84193bd6620f925f9878bf8666
  $tc'WQBQ :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3729219534940429564##
                   3359299236416566005##
                   BasicData.$trModule
                   BasicData.$tc'WQBQ1) -}
13c59a640c7126845d76f7a746ed7dcd
  $tc'WQBQ1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'WQBQ"#) -}
1aa505a2df1f6337d42abb609e9cbd06
  $tc'WQWQBK :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8886440149110797138##
                   9025438329521294453##
                   BasicData.$trModule
                   BasicData.$tc'WQWQBK1) -}
24706dc34b98c48b989dcc66886aa469
  $tc'WQWQBK1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'WQWQBK"#) -}
2389510178ecab9bc1ff1be43098ded8
  $tc'West :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5861481961143470008##
                   18046548488648588121##
                   BasicData.$trModule
                   BasicData.$tc'West1) -}
896b4cd3339f5ed7e5f6921bd519bf0f
  $tc'West1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'West"#) -}
440b2c8388cbd9795a833af0e0e2eac5
  $tc'White :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8931892021001058688##
                   4873282621785451281##
                   BasicData.$trModule
                   BasicData.$tc'White1) -}
6bb35912ce8e984ffe7301f678920e78
  $tc'White1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'White"#) -}
ed30917bd648ed07b017beda0c3056e7
  $tcCastleRight :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5531308636016317405##
                   12946788239376384200##
                   BasicData.$trModule
                   BasicData.$tcCastleRight1) -}
407d73d585f3d8a6abd83813766f37ba
  $tcCastleRight1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "CastleRight"#) -}
6c59d65a8da7c7e22cb8dcb1d57af1dd
  $tcColor :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16053357279991501708##
                   5069314837880419859##
                   BasicData.$trModule
                   BasicData.$tcColor1) -}
664c6a3db67596080acb121dbdf84efb
  $tcColor1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Color"#) -}
7d77b2e7a921398e10f81f833ca702cb
  $tcDirection :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18020626056134454771##
                   16699619069089324870##
                   BasicData.$trModule
                   BasicData.$tcDirection1) -}
ab4d79ce563f66dbfafef9760dbc621b
  $tcDirection1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Direction"#) -}
381bce157771886a26e80e89ecdfb3fe
  $tcMoveType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4529659982027111331##
                   10546924691673978103##
                   BasicData.$trModule
                   BasicData.$tcMoveType1) -}
ee68bbf1ba8ee861fc8f4f0aeafd0e4f
  $tcMoveType1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "MoveType"#) -}
de1f79253a946468db82ea34d9a5c9e3
  $tcPieceType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13207014951152641691##
                   10905096504720539771##
                   BasicData.$trModule
                   BasicData.$tcPieceType1) -}
df5afc8bb4ce5de02d4b26ee623e3b83
  $tcPieceType1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "PieceType"#) -}
bf442f70eeafe13b576da0ae842ca3d3
  $tcPosition :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7174983435077186859##
                   5377201731946263886##
                   BasicData.$trModule
                   BasicData.$tcPosition1) -}
6a2b90070b047e633d2bb099ed2182af
  $tcPosition1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Position"#) -}
eca00116bb9401673c840f3bffb288b8
  $tcScoreType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6480980144072965144##
                   12807093983655810081##
                   BasicData.$trModule
                   BasicData.$tcScoreType1) -}
5487a1a2fcf7468e0a89105aeedd497e
  $tcScoreType1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "ScoreType"#) -}
2865f56b492945b37bde1a49d36ef972
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   BasicData.$trModule2
                   BasicData.$trModule1) -}
c9ccd1d7a4b0251ec74b32aad4741251
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "BasicData"#) -}
72740cc9f932d650ad3949bc5a1242af
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "Sophy-0.1.0.0-KzkJ0b2opaf7oLnrOdwoet"#) -}
6ec8bb4a2d566f1e93a3d9d3f2980b78
  $w$cshowsPrec ::
    BasicData.MoveType -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: BasicData.MoveType) (w1 :: GHC.Base.String) ->
                 case w of wild {
                   BasicData.Normal
                   -> GHC.Base.++ @ GHC.Types.Char BasicData.$fShowMoveType4 w1
                   BasicData.EnPassant
                   -> GHC.Base.++ @ GHC.Types.Char BasicData.$fShowMoveType3 w1
                   BasicData.Castling
                   -> GHC.Base.++ @ GHC.Types.Char BasicData.$fShowMoveType2 w1
                   BasicData.Promotion
                   -> GHC.Base.++ @ GHC.Types.Char BasicData.$fShowMoveType1 w1 }) -}
d7f82d5957caceafc8b688a191800308
  $w$cshowsPrec1 ::
    BasicData.PieceType -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: BasicData.PieceType) (w1 :: GHC.Base.String) ->
                 case w of wild {
                   BasicData.Pawn
                   -> GHC.Base.++ @ GHC.Types.Char BasicData.$fReadPieceType27 w1
                   BasicData.Knight
                   -> GHC.Base.++ @ GHC.Types.Char BasicData.$fReadPieceType24 w1
                   BasicData.Bishop
                   -> GHC.Base.++ @ GHC.Types.Char BasicData.$fReadPieceType21 w1
                   BasicData.Rook
                   -> GHC.Base.++ @ GHC.Types.Char BasicData.$fReadPieceType18 w1
                   BasicData.Queen
                   -> GHC.Base.++ @ GHC.Types.Char BasicData.$fReadPieceType15 w1
                   BasicData.King
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        BasicData.$fReadPieceType12
                        w1 }) -}
0ee8217add0fc962d4b69c8d587491df
  $w$cshowsPrec2 ::
    GHC.Prim.Int#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> BasicData.Color
    -> BasicData.CastleRight
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Prim.Word#
    -> [Alias.ZobristKey]
    -> GHC.Show.ShowS
  {- Arity: 21,
     Strictness: <S,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><S,U><S,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><S,U>,
     Inline: [0] -}
eb148c194a6596da1eda8b5ef23786a4
  $w$ctoEnum :: GHC.Prim.Int# -> BasicData.CastleRight
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 0#) of wild {
                   GHC.Types.False -> BasicData.$fEnumCastleRight1 ww
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# ww 15#) of wild1 {
                        GHC.Types.False -> BasicData.$fEnumCastleRight1 ww
                        GHC.Types.True
                        -> GHC.Prim.tagToEnum# @ BasicData.CastleRight ww } }) -}
7aa905d66113e099b17b06056ad98d42
  $w$ctoEnum1 :: GHC.Prim.Int# -> BasicData.Color
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 0#) of wild {
                   GHC.Types.False -> BasicData.$fEnumColor1 ww
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# ww 1#) of wild1 {
                        GHC.Types.False -> BasicData.$fEnumColor1 ww
                        GHC.Types.True -> GHC.Prim.tagToEnum# @ BasicData.Color ww } }) -}
6ec8bb4a2d566f1e93a3d9d3f2980b78
  $w$ctoEnum2 :: GHC.Prim.Int# -> BasicData.MoveType
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 0#) of wild {
                   GHC.Types.False -> BasicData.$fEnumMoveType5 ww
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# ww 3#) of wild1 {
                        GHC.Types.False -> BasicData.$fEnumMoveType5 ww
                        GHC.Types.True
                        -> GHC.Prim.tagToEnum# @ BasicData.MoveType ww } }) -}
d7f82d5957caceafc8b688a191800308
  $w$ctoEnum3 :: GHC.Prim.Int# -> BasicData.PieceType
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 0#) of wild {
                   GHC.Types.False -> BasicData.$fEnumPieceType7 ww
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# ww 5#) of wild1 {
                        GHC.Types.False -> BasicData.$fEnumPieceType7 ww
                        GHC.Types.True
                        -> GHC.Prim.tagToEnum# @ BasicData.PieceType ww } }) -}
eb148c194a6596da1eda8b5ef23786a4
  data CastleRight
    = None
    | BQ
    | BK
    | BKBQ
    | WQ
    | WQBQ
    | WQBK
    | WQBKBQ
    | WK
    | WKBQ
    | WKBK
    | WKBKBQ
    | WKWQ
    | WKWQBQ
    | WQWQBK
    | WKWQBKBQ
7aa905d66113e099b17b06056ad98d42
  data Color = White | Black
c21b7c6b3e86f1490f898be858a139b2
  data Direction
    = North
    | NorthEast
    | East
    | SouthEast
    | South
    | SouthWest
    | West
    | NorthWest
6ec8bb4a2d566f1e93a3d9d3f2980b78
  data MoveType = Normal | EnPassant | Castling | Promotion
d7f82d5957caceafc8b688a191800308
  data PieceType = Pawn | Knight | Bishop | Rook | Queen | King
a4a6ae1d21eb516f790aeadb42103ac1
  data Position
    = Position {_attackers :: {-# UNPACK #-}Alias.BitBoard,
                _defenders :: {-# UNPACK #-}Alias.BitBoard,
                _pawns :: {-# UNPACK #-}Alias.BitBoard,
                _knights :: {-# UNPACK #-}Alias.BitBoard,
                _bishops :: {-# UNPACK #-}Alias.BitBoard,
                _rooks :: {-# UNPACK #-}Alias.BitBoard,
                _queens :: {-# UNPACK #-}Alias.BitBoard,
                _kings :: {-# UNPACK #-}Alias.BitBoard,
                _activeColor :: !BasicData.Color,
                _castleRights :: !BasicData.CastleRight,
                _enPassantSquare :: {-# UNPACK #-}Alias.Square,
                _halfMoveClock :: {-# UNPACK #-}GHC.Types.Int,
                _plyCount :: {-# UNPACK #-}GHC.Types.Int,
                _checkers :: {-# UNPACK #-}Alias.BitBoard,
                _pinnedByRooks :: {-# UNPACK #-}Alias.BitBoard,
                _pinnedByBishops :: {-# UNPACK #-}Alias.BitBoard,
                _defendMap :: {-# UNPACK #-}Alias.BitBoard,
                _materialBalance :: {-# UNPACK #-}GHC.Types.Int,
                _zobristKey :: {-# UNPACK #-}Alias.ZobristKey,
                _history :: ![Alias.ZobristKey]}
5e36171074e73b14b120e7a641b7de10
  data ScoreType = Exact | LowerBound | UpperBound
445b499e540a4303831b0166931f68a2
  _activeColor :: BasicData.Position -> BasicData.Color
  RecSel Left BasicData.Position
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLSLLLLLLLLLLL),1*U(A,A,A,A,A,A,A,A,U,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: BasicData.Position) ->
                 case ds of wild { BasicData.Position dt dt1 dt2 dt3 dt4 dt5 dt6 dt7 ds1 ds2 dt8 dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16 ds3 ->
                 ds1 }) -}
f6a0ec5168d0bd061f1e7ebc903f5f17
  _attackers :: BasicData.Position -> Alias.BitBoard
  RecSel Left BasicData.Position
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLLLLLLLLLLLLLLLLL),1*U(U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: BasicData.Position) ->
                 case ds of wild { BasicData.Position dt dt1 dt2 dt3 dt4 dt5 dt6 dt7 ds1 ds2 dt8 dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16 ds3 ->
                 GHC.Word.W64# dt }) -}
663edc186d89d4d2be0499ee2e039ff6
  _bishops :: BasicData.Position -> Alias.BitBoard
  RecSel Left BasicData.Position
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLSLLLLLLLLLLLLLLL),1*U(A,A,A,A,U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: BasicData.Position) ->
                 case ds of wild { BasicData.Position dt dt1 dt2 dt3 dt4 dt5 dt6 dt7 ds1 ds2 dt8 dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16 ds3 ->
                 GHC.Word.W64# dt4 }) -}
007098f7ab96b934ef9708c62eb45097
  _castleRights :: BasicData.Position -> BasicData.CastleRight
  RecSel Left BasicData.Position
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLSLLLLLLLLLL),1*U(A,A,A,A,A,A,A,A,A,U,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: BasicData.Position) ->
                 case ds of wild { BasicData.Position dt dt1 dt2 dt3 dt4 dt5 dt6 dt7 ds1 ds2 dt8 dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16 ds3 ->
                 ds2 }) -}
2bec81847b7309d4ff24a5ec96db960c
  _checkers :: BasicData.Position -> Alias.BitBoard
  RecSel Left BasicData.Position
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLSLLLLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,U,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: BasicData.Position) ->
                 case ds of wild { BasicData.Position dt dt1 dt2 dt3 dt4 dt5 dt6 dt7 ds1 ds2 dt8 dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16 ds3 ->
                 GHC.Word.W64# dt11 }) -}
5f68ea0a2ebd91af5cbf3d06d07a526c
  _defendMap :: BasicData.Position -> Alias.BitBoard
  RecSel Left BasicData.Position
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLLLLSLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,U,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: BasicData.Position) ->
                 case ds of wild { BasicData.Position dt dt1 dt2 dt3 dt4 dt5 dt6 dt7 ds1 ds2 dt8 dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16 ds3 ->
                 GHC.Word.W64# dt14 }) -}
c89f714bc5316fdb2721de53e07a57d3
  _defenders :: BasicData.Position -> Alias.BitBoard
  RecSel Left BasicData.Position
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLLLLLLLLLLLLLLLLL),1*U(A,U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: BasicData.Position) ->
                 case ds of wild { BasicData.Position dt dt1 dt2 dt3 dt4 dt5 dt6 dt7 ds1 ds2 dt8 dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16 ds3 ->
                 GHC.Word.W64# dt1 }) -}
c522fe044bcd73b3480f9069d2b470c6
  _enPassantSquare :: BasicData.Position -> Alias.Square
  RecSel Left BasicData.Position
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLSLLLLLLLLL),1*U(A,A,A,A,A,A,A,A,A,A,U,A,A,A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: BasicData.Position) ->
                 case ds of wild { BasicData.Position dt dt1 dt2 dt3 dt4 dt5 dt6 dt7 ds1 ds2 dt8 dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16 ds3 ->
                 GHC.Types.I# dt8 }) -}
536b630bc327c2fc2efd55a70c13e239
  _halfMoveClock :: BasicData.Position -> GHC.Types.Int
  RecSel Left BasicData.Position
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLSLLLLLLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,U,A,A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: BasicData.Position) ->
                 case ds of wild { BasicData.Position dt dt1 dt2 dt3 dt4 dt5 dt6 dt7 ds1 ds2 dt8 dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16 ds3 ->
                 GHC.Types.I# dt9 }) -}
c030db61a9d3b4d3da8215d9faa2a8b0
  _history :: BasicData.Position -> [Alias.ZobristKey]
  RecSel Left BasicData.Position
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLLLLLLLS),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: BasicData.Position) ->
                 case ds of wild { BasicData.Position dt dt1 dt2 dt3 dt4 dt5 dt6 dt7 ds1 ds2 dt8 dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16 ds3 ->
                 ds3 }) -}
4917f03ade766116e2fbf1b1c891e842
  _kings :: BasicData.Position -> Alias.BitBoard
  RecSel Left BasicData.Position
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLSLLLLLLLLLLLL),1*U(A,A,A,A,A,A,A,U,A,A,A,A,A,A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: BasicData.Position) ->
                 case ds of wild { BasicData.Position dt dt1 dt2 dt3 dt4 dt5 dt6 dt7 ds1 ds2 dt8 dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16 ds3 ->
                 GHC.Word.W64# dt7 }) -}
13274a525dac4d4cda16a3e103f616be
  _knights :: BasicData.Position -> Alias.BitBoard
  RecSel Left BasicData.Position
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSLLLLLLLLLLLLLLLL),1*U(A,A,A,U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: BasicData.Position) ->
                 case ds of wild { BasicData.Position dt dt1 dt2 dt3 dt4 dt5 dt6 dt7 ds1 ds2 dt8 dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16 ds3 ->
                 GHC.Word.W64# dt3 }) -}
05eea453fed00cdfc8a3b46bfd9945c3
  _materialBalance :: BasicData.Position -> GHC.Types.Int
  RecSel Left BasicData.Position
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLLLLLSLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,U,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: BasicData.Position) ->
                 case ds of wild { BasicData.Position dt dt1 dt2 dt3 dt4 dt5 dt6 dt7 ds1 ds2 dt8 dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16 ds3 ->
                 GHC.Types.I# dt15 }) -}
71b6665db9140e0a03b6975ad31d389b
  _pawns :: BasicData.Position -> Alias.BitBoard
  RecSel Left BasicData.Position
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLLLLLLLLLLLLLLLLL),1*U(A,A,U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: BasicData.Position) ->
                 case ds of wild { BasicData.Position dt dt1 dt2 dt3 dt4 dt5 dt6 dt7 ds1 ds2 dt8 dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16 ds3 ->
                 GHC.Word.W64# dt2 }) -}
72bcb096fdb377aa10dfe6481e6c42e2
  _pinnedByBishops :: BasicData.Position -> Alias.BitBoard
  RecSel Left BasicData.Position
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLLLSLLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,U,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: BasicData.Position) ->
                 case ds of wild { BasicData.Position dt dt1 dt2 dt3 dt4 dt5 dt6 dt7 ds1 ds2 dt8 dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16 ds3 ->
                 GHC.Word.W64# dt13 }) -}
ce9664f6e5272555221a0ec4e28c5c9f
  _pinnedByRooks :: BasicData.Position -> Alias.BitBoard
  RecSel Left BasicData.Position
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLLSLLLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,U,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: BasicData.Position) ->
                 case ds of wild { BasicData.Position dt dt1 dt2 dt3 dt4 dt5 dt6 dt7 ds1 ds2 dt8 dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16 ds3 ->
                 GHC.Word.W64# dt12 }) -}
073ebcc7be0988142819919f499cda18
  _plyCount :: BasicData.Position -> GHC.Types.Int
  RecSel Left BasicData.Position
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLSLLLLLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,U,A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: BasicData.Position) ->
                 case ds of wild { BasicData.Position dt dt1 dt2 dt3 dt4 dt5 dt6 dt7 ds1 ds2 dt8 dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16 ds3 ->
                 GHC.Types.I# dt10 }) -}
4a46d684bfd5ea4ad430b16e0b96b44e
  _queens :: BasicData.Position -> Alias.BitBoard
  RecSel Left BasicData.Position
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLSLLLLLLLLLLLLL),1*U(A,A,A,A,A,A,U,A,A,A,A,A,A,A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: BasicData.Position) ->
                 case ds of wild { BasicData.Position dt dt1 dt2 dt3 dt4 dt5 dt6 dt7 ds1 ds2 dt8 dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16 ds3 ->
                 GHC.Word.W64# dt6 }) -}
1ddb89a9e91db5f37f357b50bdc9e384
  _rooks :: BasicData.Position -> Alias.BitBoard
  RecSel Left BasicData.Position
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLSLLLLLLLLLLLLLL),1*U(A,A,A,A,A,U,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: BasicData.Position) ->
                 case ds of wild { BasicData.Position dt dt1 dt2 dt3 dt4 dt5 dt6 dt7 ds1 ds2 dt8 dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16 ds3 ->
                 GHC.Word.W64# dt5 }) -}
65972c6976f94e107b02aa43c8598294
  _zobristKey :: BasicData.Position -> Alias.ZobristKey
  RecSel Left BasicData.Position
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLLLLLLSL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,U,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: BasicData.Position) ->
                 case ds of wild { BasicData.Position dt dt1 dt2 dt3 dt4 dt5 dt6 dt7 ds1 ds2 dt8 dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16 ds3 ->
                 GHC.Word.W64# dt16 }) -}
071921c133c539dfc0de6ff816d9e34b
  activeColor ::
    Control.Lens.Type.Lens' BasicData.Position BasicData.Color
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S(LLLLLLLLSSLLLLLLLLLS),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ (f :: * -> *)
                   ($dFunctor :: GHC.Base.Functor f)
                   (f1 :: BasicData.Color -> f BasicData.Color)
                   (ds :: BasicData.Position) ->
                 case ds of wild { BasicData.Position dt dt1 dt2 dt3 dt4 dt5 dt6 dt7 x9 x10 dt8 dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16 x20 ->
                 GHC.Base.fmap
                   @ f
                   $dFunctor
                   @ BasicData.Color
                   @ BasicData.Position
                   (\ (y1 :: BasicData.Color) ->
                    case y1 of dt17 { DEFAULT ->
                    BasicData.Position
                      dt
                      dt1
                      dt2
                      dt3
                      dt4
                      dt5
                      dt6
                      dt7
                      dt17
                      x10
                      dt8
                      dt9
                      dt10
                      dt11
                      dt12
                      dt13
                      dt14
                      dt15
                      dt16
                      x20 })
                   (f1 x9) }) -}
a9159f642c76c8edbd688d929e875f86
  attackers ::
    Control.Lens.Type.Lens' BasicData.Position Alias.BitBoard
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S(LLLLLLLLSSLLLLLLLLLS),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ (f :: * -> *)
                   ($dFunctor :: GHC.Base.Functor f)
                   (f1 :: Alias.BitBoard -> f Alias.BitBoard)
                   (ds :: BasicData.Position) ->
                 case ds of wild { BasicData.Position dt dt1 dt2 dt3 dt4 dt5 dt6 dt7 x9 x10 dt8 dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16 x20 ->
                 GHC.Base.fmap
                   @ f
                   $dFunctor
                   @ Alias.BitBoard
                   @ BasicData.Position
                   (\ (y1 :: Alias.BitBoard) ->
                    case y1 of dt17 { GHC.Word.W64# dt18 ->
                    BasicData.Position
                      dt18
                      dt1
                      dt2
                      dt3
                      dt4
                      dt5
                      dt6
                      dt7
                      x9
                      x10
                      dt8
                      dt9
                      dt10
                      dt11
                      dt12
                      dt13
                      dt14
                      dt15
                      dt16
                      x20 })
                   (f1 (GHC.Word.W64# dt)) }) -}
ae41dd1d006d29e51abca19da3611ed2
  bishops ::
    Control.Lens.Type.Lens' BasicData.Position Alias.BitBoard
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S(LLLLLLLLSSLLLLLLLLLS),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ (f :: * -> *)
                   ($dFunctor :: GHC.Base.Functor f)
                   (f1 :: Alias.BitBoard -> f Alias.BitBoard)
                   (ds :: BasicData.Position) ->
                 case ds of wild { BasicData.Position dt dt1 dt2 dt3 dt4 dt5 dt6 dt7 x9 x10 dt8 dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16 x20 ->
                 GHC.Base.fmap
                   @ f
                   $dFunctor
                   @ Alias.BitBoard
                   @ BasicData.Position
                   (\ (y1 :: Alias.BitBoard) ->
                    case y1 of dt17 { GHC.Word.W64# dt18 ->
                    BasicData.Position
                      dt
                      dt1
                      dt2
                      dt3
                      dt18
                      dt5
                      dt6
                      dt7
                      x9
                      x10
                      dt8
                      dt9
                      dt10
                      dt11
                      dt12
                      dt13
                      dt14
                      dt15
                      dt16
                      x20 })
                   (f1 (GHC.Word.W64# dt4)) }) -}
f33a95d7097838205292420f28dc0e95
  castleRights ::
    Control.Lens.Type.Lens' BasicData.Position BasicData.CastleRight
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S(LLLLLLLLSSLLLLLLLLLS),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ (f :: * -> *)
                   ($dFunctor :: GHC.Base.Functor f)
                   (f1 :: BasicData.CastleRight -> f BasicData.CastleRight)
                   (ds :: BasicData.Position) ->
                 case ds of wild { BasicData.Position dt dt1 dt2 dt3 dt4 dt5 dt6 dt7 x9 x10 dt8 dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16 x20 ->
                 GHC.Base.fmap
                   @ f
                   $dFunctor
                   @ BasicData.CastleRight
                   @ BasicData.Position
                   (\ (y1 :: BasicData.CastleRight) ->
                    case y1 of dt17 { DEFAULT ->
                    BasicData.Position
                      dt
                      dt1
                      dt2
                      dt3
                      dt4
                      dt5
                      dt6
                      dt7
                      x9
                      dt17
                      dt8
                      dt9
                      dt10
                      dt11
                      dt12
                      dt13
                      dt14
                      dt15
                      dt16
                      x20 })
                   (f1 x10) }) -}
1a7e1ccd17cb24578188eae50a6db3ec
  checkers ::
    Control.Lens.Type.Lens' BasicData.Position Alias.BitBoard
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S(LLLLLLLLSSLLLLLLLLLS),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ (f :: * -> *)
                   ($dFunctor :: GHC.Base.Functor f)
                   (f1 :: Alias.BitBoard -> f Alias.BitBoard)
                   (ds :: BasicData.Position) ->
                 case ds of wild { BasicData.Position dt dt1 dt2 dt3 dt4 dt5 dt6 dt7 x9 x10 dt8 dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16 x20 ->
                 GHC.Base.fmap
                   @ f
                   $dFunctor
                   @ Alias.BitBoard
                   @ BasicData.Position
                   (\ (y1 :: Alias.BitBoard) ->
                    case y1 of dt17 { GHC.Word.W64# dt18 ->
                    BasicData.Position
                      dt
                      dt1
                      dt2
                      dt3
                      dt4
                      dt5
                      dt6
                      dt7
                      x9
                      x10
                      dt8
                      dt9
                      dt10
                      dt18
                      dt12
                      dt13
                      dt14
                      dt15
                      dt16
                      x20 })
                   (f1 (GHC.Word.W64# dt11)) }) -}
03f4a8eb3251f8e297a2fe161b2fad6e
  defendMap ::
    Control.Lens.Type.Lens' BasicData.Position Alias.BitBoard
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S(LLLLLLLLSSLLLLLLLLLS),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ (f :: * -> *)
                   ($dFunctor :: GHC.Base.Functor f)
                   (f1 :: Alias.BitBoard -> f Alias.BitBoard)
                   (ds :: BasicData.Position) ->
                 case ds of wild { BasicData.Position dt dt1 dt2 dt3 dt4 dt5 dt6 dt7 x9 x10 dt8 dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16 x20 ->
                 GHC.Base.fmap
                   @ f
                   $dFunctor
                   @ Alias.BitBoard
                   @ BasicData.Position
                   (\ (y1 :: Alias.BitBoard) ->
                    case y1 of dt17 { GHC.Word.W64# dt18 ->
                    BasicData.Position
                      dt
                      dt1
                      dt2
                      dt3
                      dt4
                      dt5
                      dt6
                      dt7
                      x9
                      x10
                      dt8
                      dt9
                      dt10
                      dt11
                      dt12
                      dt13
                      dt18
                      dt15
                      dt16
                      x20 })
                   (f1 (GHC.Word.W64# dt14)) }) -}
ae34df689900fa6e4d0e7689e67c24dc
  defenders ::
    Control.Lens.Type.Lens' BasicData.Position Alias.BitBoard
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S(LLLLLLLLSSLLLLLLLLLS),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ (f :: * -> *)
                   ($dFunctor :: GHC.Base.Functor f)
                   (f1 :: Alias.BitBoard -> f Alias.BitBoard)
                   (ds :: BasicData.Position) ->
                 case ds of wild { BasicData.Position dt dt1 dt2 dt3 dt4 dt5 dt6 dt7 x9 x10 dt8 dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16 x20 ->
                 GHC.Base.fmap
                   @ f
                   $dFunctor
                   @ Alias.BitBoard
                   @ BasicData.Position
                   (\ (y1 :: Alias.BitBoard) ->
                    case y1 of dt17 { GHC.Word.W64# dt18 ->
                    BasicData.Position
                      dt
                      dt18
                      dt2
                      dt3
                      dt4
                      dt5
                      dt6
                      dt7
                      x9
                      x10
                      dt8
                      dt9
                      dt10
                      dt11
                      dt12
                      dt13
                      dt14
                      dt15
                      dt16
                      x20 })
                   (f1 (GHC.Word.W64# dt1)) }) -}
df67d607ce3f9b804f018ccc8fe030d0
  enPassantSquare ::
    Control.Lens.Type.Lens' BasicData.Position Alias.Square
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S(LLLLLLLLSSLLLLLLLLLS),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ (f :: * -> *)
                   ($dFunctor :: GHC.Base.Functor f)
                   (f1 :: Alias.Square -> f Alias.Square)
                   (ds :: BasicData.Position) ->
                 case ds of wild { BasicData.Position dt dt1 dt2 dt3 dt4 dt5 dt6 dt7 x9 x10 dt8 dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16 x20 ->
                 GHC.Base.fmap
                   @ f
                   $dFunctor
                   @ Alias.Square
                   @ BasicData.Position
                   (\ (y1 :: Alias.Square) ->
                    case y1 of dt17 { GHC.Types.I# dt18 ->
                    BasicData.Position
                      dt
                      dt1
                      dt2
                      dt3
                      dt4
                      dt5
                      dt6
                      dt7
                      x9
                      x10
                      dt18
                      dt9
                      dt10
                      dt11
                      dt12
                      dt13
                      dt14
                      dt15
                      dt16
                      x20 })
                   (f1 (GHC.Types.I# dt8)) }) -}
027d680dbe2d40c32a9f8d351176e310
  halfMoveClock ::
    Control.Lens.Type.Lens' BasicData.Position GHC.Types.Int
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S(LLLLLLLLSSLLLLLLLLLS),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ (f :: * -> *)
                   ($dFunctor :: GHC.Base.Functor f)
                   (f1 :: GHC.Types.Int -> f GHC.Types.Int)
                   (ds :: BasicData.Position) ->
                 case ds of wild { BasicData.Position dt dt1 dt2 dt3 dt4 dt5 dt6 dt7 x9 x10 dt8 dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16 x20 ->
                 GHC.Base.fmap
                   @ f
                   $dFunctor
                   @ GHC.Types.Int
                   @ BasicData.Position
                   (\ (y1 :: GHC.Types.Int) ->
                    case y1 of dt17 { GHC.Types.I# dt18 ->
                    BasicData.Position
                      dt
                      dt1
                      dt2
                      dt3
                      dt4
                      dt5
                      dt6
                      dt7
                      x9
                      x10
                      dt8
                      dt18
                      dt10
                      dt11
                      dt12
                      dt13
                      dt14
                      dt15
                      dt16
                      x20 })
                   (f1 (GHC.Types.I# dt9)) }) -}
cd2eb0a124afde32f5ecbe6c3c2aaaf6
  history ::
    Control.Lens.Type.Lens' BasicData.Position [Alias.ZobristKey]
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S(LLLLLLLLSSLLLLLLLLLS),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ (f :: * -> *)
                   ($dFunctor :: GHC.Base.Functor f)
                   (f1 :: [Alias.ZobristKey] -> f [Alias.ZobristKey])
                   (ds :: BasicData.Position) ->
                 case ds of wild { BasicData.Position dt dt1 dt2 dt3 dt4 dt5 dt6 dt7 x9 x10 dt8 dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16 x20 ->
                 GHC.Base.fmap
                   @ f
                   $dFunctor
                   @ [Alias.ZobristKey]
                   @ BasicData.Position
                   (\ (y1 :: [Alias.ZobristKey]) ->
                    case y1 of dt17 { DEFAULT ->
                    BasicData.Position
                      dt
                      dt1
                      dt2
                      dt3
                      dt4
                      dt5
                      dt6
                      dt7
                      x9
                      x10
                      dt8
                      dt9
                      dt10
                      dt11
                      dt12
                      dt13
                      dt14
                      dt15
                      dt16
                      dt17 })
                   (f1 x20) }) -}
dcff2b3e6862e447ae2c73afdc17a305
  kings :: Control.Lens.Type.Lens' BasicData.Position Alias.BitBoard
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S(LLLLLLLLSSLLLLLLLLLS),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ (f :: * -> *)
                   ($dFunctor :: GHC.Base.Functor f)
                   (f1 :: Alias.BitBoard -> f Alias.BitBoard)
                   (ds :: BasicData.Position) ->
                 case ds of wild { BasicData.Position dt dt1 dt2 dt3 dt4 dt5 dt6 dt7 x9 x10 dt8 dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16 x20 ->
                 GHC.Base.fmap
                   @ f
                   $dFunctor
                   @ Alias.BitBoard
                   @ BasicData.Position
                   (\ (y1 :: Alias.BitBoard) ->
                    case y1 of dt17 { GHC.Word.W64# dt18 ->
                    BasicData.Position
                      dt
                      dt1
                      dt2
                      dt3
                      dt4
                      dt5
                      dt6
                      dt18
                      x9
                      x10
                      dt8
                      dt9
                      dt10
                      dt11
                      dt12
                      dt13
                      dt14
                      dt15
                      dt16
                      x20 })
                   (f1 (GHC.Word.W64# dt7)) }) -}
4d09b81332dfbfa3850f74f44757997e
  knights ::
    Control.Lens.Type.Lens' BasicData.Position Alias.BitBoard
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S(LLLLLLLLSSLLLLLLLLLS),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ (f :: * -> *)
                   ($dFunctor :: GHC.Base.Functor f)
                   (f1 :: Alias.BitBoard -> f Alias.BitBoard)
                   (ds :: BasicData.Position) ->
                 case ds of wild { BasicData.Position dt dt1 dt2 dt3 dt4 dt5 dt6 dt7 x9 x10 dt8 dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16 x20 ->
                 GHC.Base.fmap
                   @ f
                   $dFunctor
                   @ Alias.BitBoard
                   @ BasicData.Position
                   (\ (y1 :: Alias.BitBoard) ->
                    case y1 of dt17 { GHC.Word.W64# dt18 ->
                    BasicData.Position
                      dt
                      dt1
                      dt2
                      dt18
                      dt4
                      dt5
                      dt6
                      dt7
                      x9
                      x10
                      dt8
                      dt9
                      dt10
                      dt11
                      dt12
                      dt13
                      dt14
                      dt15
                      dt16
                      x20 })
                   (f1 (GHC.Word.W64# dt3)) }) -}
95ffff258b0622515319013592ccfc7a
  materialBalance ::
    Control.Lens.Type.Lens' BasicData.Position GHC.Types.Int
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S(LLLLLLLLSSLLLLLLLLLS),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ (f :: * -> *)
                   ($dFunctor :: GHC.Base.Functor f)
                   (f1 :: GHC.Types.Int -> f GHC.Types.Int)
                   (ds :: BasicData.Position) ->
                 case ds of wild { BasicData.Position dt dt1 dt2 dt3 dt4 dt5 dt6 dt7 x9 x10 dt8 dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16 x20 ->
                 GHC.Base.fmap
                   @ f
                   $dFunctor
                   @ GHC.Types.Int
                   @ BasicData.Position
                   (\ (y1 :: GHC.Types.Int) ->
                    case y1 of dt17 { GHC.Types.I# dt18 ->
                    BasicData.Position
                      dt
                      dt1
                      dt2
                      dt3
                      dt4
                      dt5
                      dt6
                      dt7
                      x9
                      x10
                      dt8
                      dt9
                      dt10
                      dt11
                      dt12
                      dt13
                      dt14
                      dt18
                      dt16
                      x20 })
                   (f1 (GHC.Types.I# dt15)) }) -}
fdd05f59aa36d16610bec1a82928588e
  pawns :: Control.Lens.Type.Lens' BasicData.Position Alias.BitBoard
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S(LLLLLLLLSSLLLLLLLLLS),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ (f :: * -> *)
                   ($dFunctor :: GHC.Base.Functor f)
                   (f1 :: Alias.BitBoard -> f Alias.BitBoard)
                   (ds :: BasicData.Position) ->
                 case ds of wild { BasicData.Position dt dt1 dt2 dt3 dt4 dt5 dt6 dt7 x9 x10 dt8 dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16 x20 ->
                 GHC.Base.fmap
                   @ f
                   $dFunctor
                   @ Alias.BitBoard
                   @ BasicData.Position
                   (\ (y1 :: Alias.BitBoard) ->
                    case y1 of dt17 { GHC.Word.W64# dt18 ->
                    BasicData.Position
                      dt
                      dt1
                      dt18
                      dt3
                      dt4
                      dt5
                      dt6
                      dt7
                      x9
                      x10
                      dt8
                      dt9
                      dt10
                      dt11
                      dt12
                      dt13
                      dt14
                      dt15
                      dt16
                      x20 })
                   (f1 (GHC.Word.W64# dt2)) }) -}
b0b107e4c70cee430cb3bc936749768a
  pinnedByBishops ::
    Control.Lens.Type.Lens' BasicData.Position Alias.BitBoard
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S(LLLLLLLLSSLLLLLLLLLS),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ (f :: * -> *)
                   ($dFunctor :: GHC.Base.Functor f)
                   (f1 :: Alias.BitBoard -> f Alias.BitBoard)
                   (ds :: BasicData.Position) ->
                 case ds of wild { BasicData.Position dt dt1 dt2 dt3 dt4 dt5 dt6 dt7 x9 x10 dt8 dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16 x20 ->
                 GHC.Base.fmap
                   @ f
                   $dFunctor
                   @ Alias.BitBoard
                   @ BasicData.Position
                   (\ (y1 :: Alias.BitBoard) ->
                    case y1 of dt17 { GHC.Word.W64# dt18 ->
                    BasicData.Position
                      dt
                      dt1
                      dt2
                      dt3
                      dt4
                      dt5
                      dt6
                      dt7
                      x9
                      x10
                      dt8
                      dt9
                      dt10
                      dt11
                      dt12
                      dt18
                      dt14
                      dt15
                      dt16
                      x20 })
                   (f1 (GHC.Word.W64# dt13)) }) -}
4ba1bdbcbfe0f74ec552ce80b2d92177
  pinnedByRooks ::
    Control.Lens.Type.Lens' BasicData.Position Alias.BitBoard
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S(LLLLLLLLSSLLLLLLLLLS),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ (f :: * -> *)
                   ($dFunctor :: GHC.Base.Functor f)
                   (f1 :: Alias.BitBoard -> f Alias.BitBoard)
                   (ds :: BasicData.Position) ->
                 case ds of wild { BasicData.Position dt dt1 dt2 dt3 dt4 dt5 dt6 dt7 x9 x10 dt8 dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16 x20 ->
                 GHC.Base.fmap
                   @ f
                   $dFunctor
                   @ Alias.BitBoard
                   @ BasicData.Position
                   (\ (y1 :: Alias.BitBoard) ->
                    case y1 of dt17 { GHC.Word.W64# dt18 ->
                    BasicData.Position
                      dt
                      dt1
                      dt2
                      dt3
                      dt4
                      dt5
                      dt6
                      dt7
                      x9
                      x10
                      dt8
                      dt9
                      dt10
                      dt11
                      dt18
                      dt13
                      dt14
                      dt15
                      dt16
                      x20 })
                   (f1 (GHC.Word.W64# dt12)) }) -}
89e6ae44a85de21278080acc314226ce
  plyCount ::
    Control.Lens.Type.Lens' BasicData.Position GHC.Types.Int
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S(LLLLLLLLSSLLLLLLLLLS),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ (f :: * -> *)
                   ($dFunctor :: GHC.Base.Functor f)
                   (f1 :: GHC.Types.Int -> f GHC.Types.Int)
                   (ds :: BasicData.Position) ->
                 case ds of wild { BasicData.Position dt dt1 dt2 dt3 dt4 dt5 dt6 dt7 x9 x10 dt8 dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16 x20 ->
                 GHC.Base.fmap
                   @ f
                   $dFunctor
                   @ GHC.Types.Int
                   @ BasicData.Position
                   (\ (y1 :: GHC.Types.Int) ->
                    case y1 of dt17 { GHC.Types.I# dt18 ->
                    BasicData.Position
                      dt
                      dt1
                      dt2
                      dt3
                      dt4
                      dt5
                      dt6
                      dt7
                      x9
                      x10
                      dt8
                      dt9
                      dt18
                      dt11
                      dt12
                      dt13
                      dt14
                      dt15
                      dt16
                      x20 })
                   (f1 (GHC.Types.I# dt10)) }) -}
16ccf35b180935eb20ad3912066ccf9f
  queens :: Control.Lens.Type.Lens' BasicData.Position Alias.BitBoard
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S(LLLLLLLLSSLLLLLLLLLS),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ (f :: * -> *)
                   ($dFunctor :: GHC.Base.Functor f)
                   (f1 :: Alias.BitBoard -> f Alias.BitBoard)
                   (ds :: BasicData.Position) ->
                 case ds of wild { BasicData.Position dt dt1 dt2 dt3 dt4 dt5 dt6 dt7 x9 x10 dt8 dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16 x20 ->
                 GHC.Base.fmap
                   @ f
                   $dFunctor
                   @ Alias.BitBoard
                   @ BasicData.Position
                   (\ (y1 :: Alias.BitBoard) ->
                    case y1 of dt17 { GHC.Word.W64# dt18 ->
                    BasicData.Position
                      dt
                      dt1
                      dt2
                      dt3
                      dt4
                      dt5
                      dt18
                      dt7
                      x9
                      x10
                      dt8
                      dt9
                      dt10
                      dt11
                      dt12
                      dt13
                      dt14
                      dt15
                      dt16
                      x20 })
                   (f1 (GHC.Word.W64# dt6)) }) -}
13a450071c19605777022e5d018e5920
  rooks :: Control.Lens.Type.Lens' BasicData.Position Alias.BitBoard
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S(LLLLLLLLSSLLLLLLLLLS),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ (f :: * -> *)
                   ($dFunctor :: GHC.Base.Functor f)
                   (f1 :: Alias.BitBoard -> f Alias.BitBoard)
                   (ds :: BasicData.Position) ->
                 case ds of wild { BasicData.Position dt dt1 dt2 dt3 dt4 dt5 dt6 dt7 x9 x10 dt8 dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16 x20 ->
                 GHC.Base.fmap
                   @ f
                   $dFunctor
                   @ Alias.BitBoard
                   @ BasicData.Position
                   (\ (y1 :: Alias.BitBoard) ->
                    case y1 of dt17 { GHC.Word.W64# dt18 ->
                    BasicData.Position
                      dt
                      dt1
                      dt2
                      dt3
                      dt4
                      dt18
                      dt6
                      dt7
                      x9
                      x10
                      dt8
                      dt9
                      dt10
                      dt11
                      dt12
                      dt13
                      dt14
                      dt15
                      dt16
                      x20 })
                   (f1 (GHC.Word.W64# dt5)) }) -}
a343609122229b3a5de0a209162b4bf2
  zobristKey ::
    Control.Lens.Type.Lens' BasicData.Position Alias.ZobristKey
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S(LLLLLLLLSSLLLLLLLLLS),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ (f :: * -> *)
                   ($dFunctor :: GHC.Base.Functor f)
                   (f1 :: Alias.ZobristKey -> f Alias.ZobristKey)
                   (ds :: BasicData.Position) ->
                 case ds of wild { BasicData.Position dt dt1 dt2 dt3 dt4 dt5 dt6 dt7 x9 x10 dt8 dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16 x20 ->
                 GHC.Base.fmap
                   @ f
                   $dFunctor
                   @ Alias.ZobristKey
                   @ BasicData.Position
                   (\ (y1 :: Alias.ZobristKey) ->
                    case y1 of dt17 { GHC.Word.W64# dt18 ->
                    BasicData.Position
                      dt
                      dt1
                      dt2
                      dt3
                      dt4
                      dt5
                      dt6
                      dt7
                      x9
                      x10
                      dt8
                      dt9
                      dt10
                      dt11
                      dt12
                      dt13
                      dt14
                      dt15
                      dt18
                      x20 })
                   (f1 (GHC.Word.W64# dt16)) }) -}
instance GHC.Enum.Enum [BasicData.CastleRight]
  = BasicData.$fEnumCastleRight
instance GHC.Enum.Enum [BasicData.Color] = BasicData.$fEnumColor
instance GHC.Enum.Enum [BasicData.MoveType]
  = BasicData.$fEnumMoveType
instance GHC.Enum.Enum [BasicData.PieceType]
  = BasicData.$fEnumPieceType
instance GHC.Classes.Eq [BasicData.CastleRight]
  = BasicData.$fEqCastleRight
instance GHC.Classes.Eq [BasicData.Color] = BasicData.$fEqColor
instance GHC.Classes.Eq [BasicData.MoveType]
  = BasicData.$fEqMoveType
instance GHC.Classes.Eq [BasicData.PieceType]
  = BasicData.$fEqPieceType
instance GHC.Classes.Eq [BasicData.Position]
  = BasicData.$fEqPosition
instance GHC.Classes.Eq [BasicData.ScoreType]
  = BasicData.$fEqScoreType
instance GHC.Classes.Ord [BasicData.PieceType]
  = BasicData.$fOrdPieceType
instance GHC.Read.Read [BasicData.PieceType]
  = BasicData.$fReadPieceType
instance GHC.Show.Show [BasicData.CastleRight]
  = BasicData.$fShowCastleRight
instance GHC.Show.Show [BasicData.Color] = BasicData.$fShowColor
instance GHC.Show.Show [BasicData.MoveType]
  = BasicData.$fShowMoveType
instance GHC.Show.Show [BasicData.PieceType]
  = BasicData.$fShowPieceType
instance GHC.Show.Show [BasicData.Position]
  = BasicData.$fShowPosition
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

