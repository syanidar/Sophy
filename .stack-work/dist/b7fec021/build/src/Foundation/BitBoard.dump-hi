
==================== FINAL INTERFACE ====================
2016-12-17 14:57:01.0916481 UTC

interface Sophy-0.1.0.0-KzkJ0b2opaf7oLnrOdwoet:BitBoard 8001
  interface hash: e9a0183f2b4571af7de15c355e1fd16c
  ABI hash: 546ecb469d7a09f0dc9092f9430e44fc
  export-list hash: 581f8ad67b3ac061648269de5226c9ef
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 6861b54f22d643b04766ce28c16cccec
  sig of: Nothing
  used TH splices: False
  where
exports:
  BitBoard.attack
  BitBoard.bishopAttack
  BitBoard.fill
  BitBoard.fillVertically
  BitBoard.invert
  BitBoard.kingAttack
  BitBoard.knightAttack
  BitBoard.pawnAttack
  BitBoard.rookAttack
  BitBoard.showBoard
  BitBoard.squareNameFrom
  BitBoard.step
module dependencies: Alias BasicConstant BasicData Bitwise
package dependencies: StateVar-1.1.0.4@StateVar-1.1.0.4-CJpWsiXJdd89SnV9dZtTwc
                      adjunctions-4.3@adjunctions-4.3-3ol9sWZt3In19pwXwPv3Xc
                      array-0.5.1.1@array-0.5.1.1 base-4.9.0.0
                      base-orphans-0.5.4@base-orphans-0.5.4-5IQvrjd7gNP548VkOOyIq6
                      bifunctors-5.4.1@bifunctors-5.4.1-8Xk5Wsnk1fr6rBLkW9MO8p
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      comonad-5@comonad-5-2RMxpSOQ5MCHLHIelJrHD4
                      containers-0.5.7.1@containers-0.5.7.1
                      contravariant-1.4@contravariant-1.4-KSQE31a7FruKHDlp90hIUT
                      deepseq-1.4.2.0@deepseq-1.4.2.0
                      distributive-0.5.0.2@distributive-0.5.0.2-Cdz2vLOk85j1doGXLcictT
                      exceptions-0.8.3@exceptions-0.8.3-7py7fmRxowDFpHmiHGKrTb
                      free-4.12.4@free-4.12.4-Etm59Dm8iExFxAy1L49Ovd
                      ghc-boot-th-8.0.1@ghc-boot-th-8.0.1 ghc-prim-0.5.0.0
                      hashable-1.2.4.0@hashable-1.2.4.0-EMu4H7FB10MAl6hwKw992G
                      integer-gmp-1.0.0.1
                      kan-extensions-5.0.1@kan-extensions-5.0.1-Asa0tkk9PuPLZ2eXuJ10Gr
                      lens-4.14@lens-4.14-LQbbTc84mRL8zB39b41ZKA
                      mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM
                      prelude-extras-0.4.0.3@prelude-extras-0.4.0.3-FAyB4iuuM7cHXdrLMZtdXq
                      pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.1.0@primitive-0.6.1.0-Ip44DqhfCp21tTUYbecwa
                      profunctors-5.2@profunctors-5.2-2ZZOz6u59T2H8y7z3NgZkY
                      reflection-2.1.2@reflection-2.1.2-J1ZzlxijzaHGRixYxgxlf9
                      semigroupoids-5.1@semigroupoids-5.1-1Gay4xNO77GHd4DGCzVuax
                      split-0.2.3.1@split-0.2.3.1-IJKK4pOCYGKud0jZImZke
                      stm-2.4.4.1@stm-2.4.4.1-4z2NRWnB0NIIUvSJsHW0kF
                      tagged-0.8.5@tagged-0.8.5-CtgV6EcN0do8F92i1S6iYx
                      template-haskell-2.11.0.0
                      text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s
                      transformers-0.5.2.0@transformers-0.5.2.0
                      transformers-compat-0.5.1.4@transformers-compat-0.5.1.4-81lZyuOJOvsD0zyCv2TKld
                      unordered-containers-0.2.7.1@unordered-containers-0.2.7.1-Eo9jd5DMz45DhBLCG8skzW
                      vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         hashable-1.2.4.0@hashable-1.2.4.0-EMu4H7FB10MAl6hwKw992G:Data.Hashable.Generic
         reflection-2.1.2@reflection-2.1.2-J1ZzlxijzaHGRixYxgxlf9:Data.Reflection
         stm-2.4.4.1@stm-2.4.4.1-4z2NRWnB0NIIUvSJsHW0kF:Control.Monad.STM
         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text
         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text.Lazy
         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text.Show
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Fusion.Bundle
         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Unboxed
family instance modules: adjunctions-4.3@adjunctions-4.3-3ol9sWZt3In19pwXwPv3Xc:Data.Functor.Rep
                         base-4.9.0.0:Control.Applicative base-4.9.0.0:Data.Complex
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Compose
                         base-4.9.0.0:Data.Functor.Const base-4.9.0.0:Data.Functor.Identity
                         base-4.9.0.0:Data.Functor.Product base-4.9.0.0:Data.Functor.Sum
                         base-4.9.0.0:Data.List.NonEmpty base-4.9.0.0:Data.Monoid
                         base-4.9.0.0:Data.Semigroup base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:Data.Version base-4.9.0.0:Data.Void
                         base-4.9.0.0:GHC.Exts base-4.9.0.0:GHC.Generics
                         base-4.9.0.0:GHC.IO.Exception base-4.9.0.0:GHC.TypeLits
                         bifunctors-5.4.1@bifunctors-5.4.1-8Xk5Wsnk1fr6rBLkW9MO8p:Data.Bifunctor.Biff
                         bifunctors-5.4.1@bifunctors-5.4.1-8Xk5Wsnk1fr6rBLkW9MO8p:Data.Bifunctor.Clown
                         bifunctors-5.4.1@bifunctors-5.4.1-8Xk5Wsnk1fr6rBLkW9MO8p:Data.Bifunctor.Flip
                         bifunctors-5.4.1@bifunctors-5.4.1-8Xk5Wsnk1fr6rBLkW9MO8p:Data.Bifunctor.Join
                         bifunctors-5.4.1@bifunctors-5.4.1-8Xk5Wsnk1fr6rBLkW9MO8p:Data.Bifunctor.Joker
                         bifunctors-5.4.1@bifunctors-5.4.1-8Xk5Wsnk1fr6rBLkW9MO8p:Data.Bifunctor.Product
                         bifunctors-5.4.1@bifunctors-5.4.1-8Xk5Wsnk1fr6rBLkW9MO8p:Data.Bifunctor.Sum
                         bifunctors-5.4.1@bifunctors-5.4.1-8Xk5Wsnk1fr6rBLkW9MO8p:Data.Bifunctor.Tannen
                         bifunctors-5.4.1@bifunctors-5.4.1-8Xk5Wsnk1fr6rBLkW9MO8p:Data.Bifunctor.Wrapped
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         ghc-boot-th-8.0.1@ghc-boot-th-8.0.1:GHC.LanguageExtensions.Type
                         kan-extensions-5.0.1@kan-extensions-5.0.1-Asa0tkk9PuPLZ2eXuJ10Gr:Data.Functor.Day
                         kan-extensions-5.0.1@kan-extensions-5.0.1-Asa0tkk9PuPLZ2eXuJ10Gr:Data.Functor.Yoneda
                         lens-4.14@lens-4.14-LQbbTc84mRL8zB39b41ZKA:Control.Lens.At
                         lens-4.14@lens-4.14-LQbbTc84mRL8zB39b41ZKA:Control.Lens.Internal.Indexed
                         lens-4.14@lens-4.14-LQbbTc84mRL8zB39b41ZKA:Control.Lens.Reified
                         lens-4.14@lens-4.14-LQbbTc84mRL8zB39b41ZKA:Control.Lens.Tuple
                         lens-4.14@lens-4.14-LQbbTc84mRL8zB39b41ZKA:Control.Lens.Wrapped
                         lens-4.14@lens-4.14-LQbbTc84mRL8zB39b41ZKA:Control.Lens.Zoom
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.1.0@primitive-0.6.1.0-Ip44DqhfCp21tTUYbecwa:Control.Monad.Primitive
                         profunctors-5.2@profunctors-5.2-2ZZOz6u59T2H8y7z3NgZkY:Data.Profunctor.Rep
                         tagged-0.8.5@tagged-0.8.5-CtgV6EcN0do8F92i1S6iYx:Data.Tagged
                         template-haskell-2.11.0.0:Language.Haskell.TH.Syntax
                         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text
                         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text.Lazy
                         unordered-containers-0.2.7.1@unordered-containers-0.2.7.1-Eo9jd5DMz45DhBLCG8skzW:Data.HashMap.Base
                         unordered-containers-0.2.7.1@unordered-containers-0.2.7.1-Eo9jd5DMz45DhBLCG8skzW:Data.HashSet
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Primitive
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Storable
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Unboxed
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Unboxed.Base
import  -/  Alias ba36719cc8f68ab87c0ee8446a683f1b
  exports: 03b73823d7379fa3fc65780b7c8ac5e2
  AttackMap 21778f3dbfdaaf0295382f186ba1658a
  BitBoard 461830e1b89cbd9e95b01ba7aa2fcc74
  EmptyMap e59e9817dc27034de9e32631c5677f09
  Occupancy 711259b048c194fd161c4ce6fcae46e2
  PieceMap aab4112b1d8a57b06057df6787d6b202
import  -/  BasicConstant 75629955daea2dc6e28b1b47bb042933
  exports: 8cd31e6e16b93cd2dcc5693171330c73
  aAndBFile 9148ea2dc2ff0abaa8a32a2954367d1b
  aFile 7a19749fe193316fd149614db6991cbd
  gAndHFile 1739a7e5945353ec0ff0c43ed2e2299c
  hFile 831719303e610728298753d0cb82c59c
import  -/  BasicData 2a7d7454833f4f04d9c30a40b6d5a151
  exports: 05582099e9a48170ebc021a187a7905d
  Black 522357099ddcd83c850e6a6c2fedd453
  Color 7aa905d66113e099b17b06056ad98d42
  Direction c21b7c6b3e86f1490f898be858a139b2
  East 84c6f8d64c2298cc683386fe74425dc3
  North fe9eed961d33ed02e265631f8ff4cc2e
  NorthEast 204d2ff5949f7cbf1e48b7c86fea005a
  NorthWest 71a7e5b034fc151a10ba48eed88964a8
  South 2a71e753e0fd8155ece42ed5a9b17630
  SouthEast b60b0019654abce894474180331e11fe
  SouthWest a128097e97d8ca5abdd5b148f8904619
  West 5ee0d14b791eceb8caf85a4bc986c483
  White 1ed56db967e8b2482365f6c064064144
import  -/  Bitwise dac3e64a54b8be9d7c8e1f130b8e73fa
  exports: 9b4cf91b2dee21d2fcd203a2334d40a1
  deltaSwap e92050604ec97909731b612792bc8d2c
  joint d98fb2644b317d27b91085307d2a9706
  oneBit 82c90513f774ca67d7fb810d6b2f96bf
  without 67ce45f5ed5d75206d3b7d6f09efeff7
import  -/  base-4.9.0.0:Data.Bits c954f6297e2203ba924b7d4bb91aa2cf
import  -/  base-4.9.0.0:Data.Bool d4edda154f731212d50d9a2fd3083584
import  -/  base-4.9.0.0:Data.OldList 3c899c6d8e6204063769214449ac0954
import  -/  base-4.9.0.0:Data.Word cf9c7419e077bbdd2be059981bfe778f
import  -/  base-4.9.0.0:GHC.Base dd8044a8d640eee51828c17c476a6ba7
import  -/  base-4.9.0.0:GHC.Err 20faef8829fd13c027d0ee2213637534
import  -/  base-4.9.0.0:GHC.List 47d436dfb7454bb1883fb4d943e3f389
import  -/  base-4.9.0.0:GHC.Real 011de9ca3282ad24a84e4e15f974f98e
import  -/  base-4.9.0.0:Prelude 2d9cd8b0ec3d728f62b734df888d2e34
import  -/  split-0.2.3.1@split-0.2.3.1-IJKK4pOCYGKud0jZImZke:Data.List.Split 46e8ab9554123893f27696c65d88e63d
import  -/  split-0.2.3.1@split-0.2.3.1-IJKK4pOCYGKud0jZImZke:Data.List.Split.Internals 21bb7a06dca9e01c6e2173d6643f3bae
a59ae047bf9aca7132b09333517b68f2
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   BitBoard.$trModule2
                   BitBoard.$trModule1) -}
9eeb9f8772ea5aa67bf38f66ca54f9fc
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "BitBoard"#) -}
313db99c8e0c768458c7744f6fb6f859
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "Sophy-0.1.0.0-KzkJ0b2opaf7oLnrOdwoet"#) -}
0cf87c3ee77839359cf50af3b66c36fb
  $wattack ::
    BasicData.Direction
    -> GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Word#
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><S,U><S,U>,
     Inline: [0],
     Unfolding: (\ (w :: BasicData.Direction)
                   (ww :: GHC.Prim.Word#)
                   (ww1 :: GHC.Prim.Word#) ->
                 case w of wild {
                   BasicData.North
                   -> let {
                        ipv :: GHC.Prim.Word#
                        = GHC.Prim.and# ww (GHC.Prim.uncheckedShiftL# ww 8#)
                      } in
                      let {
                        ipv1 :: GHC.Prim.Word#
                        = GHC.Prim.or#
                            ww1
                            (GHC.Prim.and# (GHC.Prim.uncheckedShiftL# ww1 8#) ww)
                      } in
                      let {
                        ipv2 :: GHC.Prim.Word#
                        = GHC.Prim.or#
                            ipv1
                            (GHC.Prim.and# (GHC.Prim.uncheckedShiftL# ipv1 16#) ipv)
                      } in
                      GHC.Prim.uncheckedShiftL#
                        (GHC.Prim.or#
                           ipv2
                           (GHC.Prim.and#
                              (GHC.Prim.uncheckedShiftL# ipv2 32#)
                              (GHC.Prim.and# ipv (GHC.Prim.uncheckedShiftL# ipv 16#))))
                        8#
                   BasicData.NorthEast
                   -> let {
                        ipv :: GHC.Prim.Word#
                        = GHC.Prim.or#
                            ww1
                            (GHC.Prim.and#
                               (GHC.Prim.and# (GHC.Prim.uncheckedShiftL# ww1 7#) ww)
                               9187201950435737471##)
                      } in
                      let {
                        ipv1 :: GHC.Prim.Word#
                        = GHC.Prim.and#
                            (GHC.Prim.and# ww (GHC.Prim.uncheckedShiftL# ww 7#))
                            9187201950435737471##
                      } in
                      let {
                        ipv2 :: GHC.Prim.Word#
                        = GHC.Prim.or#
                            ipv
                            (GHC.Prim.and#
                               (GHC.Prim.and# (GHC.Prim.uncheckedShiftL# ipv 14#) ipv1)
                               4557430888798830336##)
                      } in
                      GHC.Prim.and#
                        (GHC.Prim.uncheckedShiftL#
                           (GHC.Prim.or#
                              ipv2
                              (GHC.Prim.and#
                                 (GHC.Prim.and#
                                    (GHC.Prim.uncheckedShiftL# ipv2 28#)
                                    (GHC.Prim.and#
                                       (GHC.Prim.and# ipv1 (GHC.Prim.uncheckedShiftL# ipv1 14#))
                                       4557430888798830336##))
                                 1085102592570163200##))
                           7#)
                        9187201950435737471##
                   BasicData.East
                   -> let {
                        ipv :: GHC.Prim.Word#
                        = GHC.Prim.or#
                            ww1
                            (GHC.Prim.and#
                               (GHC.Prim.and# (GHC.Prim.uncheckedShiftRL# ww1 1#) ww)
                               9187201950435737471##)
                      } in
                      let {
                        ipv1 :: GHC.Prim.Word#
                        = GHC.Prim.and#
                            (GHC.Prim.and# ww (GHC.Prim.uncheckedShiftRL# ww 1#))
                            9187201950435737471##
                      } in
                      let {
                        ipv2 :: GHC.Prim.Word#
                        = GHC.Prim.or#
                            ipv
                            (GHC.Prim.and#
                               (GHC.Prim.and# (GHC.Prim.uncheckedShiftRL# ipv 2#) ipv1)
                               4557430888798830399##)
                      } in
                      GHC.Prim.and#
                        (GHC.Prim.uncheckedShiftRL#
                           (GHC.Prim.or#
                              ipv2
                              (GHC.Prim.and#
                                 (GHC.Prim.and#
                                    (GHC.Prim.uncheckedShiftRL# ipv2 4#)
                                    (GHC.Prim.and#
                                       (GHC.Prim.and# ipv1 (GHC.Prim.uncheckedShiftRL# ipv1 2#))
                                       4557430888798830399##))
                                 1085102592571150095##))
                           1#)
                        9187201950435737471##
                   BasicData.SouthEast
                   -> let {
                        ipv :: GHC.Prim.Word#
                        = GHC.Prim.or#
                            ww1
                            (GHC.Prim.and#
                               (GHC.Prim.and# (GHC.Prim.uncheckedShiftRL# ww1 9#) ww)
                               9187201950435737471##)
                      } in
                      let {
                        ipv1 :: GHC.Prim.Word#
                        = GHC.Prim.and#
                            (GHC.Prim.and# ww (GHC.Prim.uncheckedShiftRL# ww 9#))
                            9187201950435737471##
                      } in
                      let {
                        ipv2 :: GHC.Prim.Word#
                        = GHC.Prim.or#
                            ipv
                            (GHC.Prim.and#
                               (GHC.Prim.and# (GHC.Prim.uncheckedShiftRL# ipv 18#) ipv1)
                               17802464409370431##)
                      } in
                      GHC.Prim.and#
                        (GHC.Prim.uncheckedShiftRL#
                           (GHC.Prim.or#
                              ipv2
                              (GHC.Prim.and#
                                 (GHC.Prim.and#
                                    (GHC.Prim.uncheckedShiftRL# ipv2 36#)
                                    (GHC.Prim.and#
                                       (GHC.Prim.and# ipv1 (GHC.Prim.uncheckedShiftRL# ipv1 18#))
                                       17802464409370431##))
                                 64677154575##))
                           9#)
                        9187201950435737471##
                   BasicData.South
                   -> let {
                        ipv :: GHC.Prim.Word#
                        = GHC.Prim.and# ww (GHC.Prim.uncheckedShiftRL# ww 8#)
                      } in
                      let {
                        ipv1 :: GHC.Prim.Word#
                        = GHC.Prim.or#
                            ww1
                            (GHC.Prim.and# (GHC.Prim.uncheckedShiftRL# ww1 8#) ww)
                      } in
                      let {
                        ipv2 :: GHC.Prim.Word#
                        = GHC.Prim.or#
                            ipv1
                            (GHC.Prim.and# (GHC.Prim.uncheckedShiftRL# ipv1 16#) ipv)
                      } in
                      GHC.Prim.uncheckedShiftRL#
                        (GHC.Prim.or#
                           ipv2
                           (GHC.Prim.and#
                              (GHC.Prim.uncheckedShiftRL# ipv2 32#)
                              (GHC.Prim.and# ipv (GHC.Prim.uncheckedShiftRL# ipv 16#))))
                        8#
                   BasicData.SouthWest
                   -> let {
                        ipv :: GHC.Prim.Word#
                        = GHC.Prim.or#
                            ww1
                            (GHC.Prim.and#
                               (GHC.Prim.and# (GHC.Prim.uncheckedShiftRL# ww1 7#) ww)
                               18374403900871474942##)
                      } in
                      let {
                        ipv1 :: GHC.Prim.Word#
                        = GHC.Prim.and#
                            (GHC.Prim.and# ww (GHC.Prim.uncheckedShiftRL# ww 7#))
                            18374403900871474942##
                      } in
                      let {
                        ipv2 :: GHC.Prim.Word#
                        = GHC.Prim.or#
                            ipv
                            (GHC.Prim.and#
                               (GHC.Prim.and# (GHC.Prim.uncheckedShiftRL# ipv 14#) ipv1)
                               71209857637481724##)
                      } in
                      GHC.Prim.and#
                        (GHC.Prim.uncheckedShiftRL#
                           (GHC.Prim.or#
                              ipv2
                              (GHC.Prim.and#
                                 (GHC.Prim.and#
                                    (GHC.Prim.uncheckedShiftRL# ipv2 28#)
                                    (GHC.Prim.and#
                                       (GHC.Prim.and# ipv1 (GHC.Prim.uncheckedShiftRL# ipv1 14#))
                                       71209857637481724##))
                                 1034834473200##))
                           7#)
                        18374403900871474942##
                   BasicData.West
                   -> let {
                        ipv :: GHC.Prim.Word#
                        = GHC.Prim.or#
                            ww1
                            (GHC.Prim.and#
                               (GHC.Prim.and# (GHC.Prim.uncheckedShiftL# ww1 1#) ww)
                               18374403900871474942##)
                      } in
                      let {
                        ipv1 :: GHC.Prim.Word#
                        = GHC.Prim.and#
                            (GHC.Prim.and# ww (GHC.Prim.uncheckedShiftL# ww 1#))
                            18374403900871474942##
                      } in
                      let {
                        ipv2 :: GHC.Prim.Word#
                        = GHC.Prim.or#
                            ipv
                            (GHC.Prim.and#
                               (GHC.Prim.and# (GHC.Prim.uncheckedShiftL# ipv 2#) ipv1)
                               18229723555195321596##)
                      } in
                      GHC.Prim.and#
                        (GHC.Prim.uncheckedShiftL#
                           (GHC.Prim.or#
                              ipv2
                              (GHC.Prim.and#
                                 (GHC.Prim.and#
                                    (GHC.Prim.uncheckedShiftL# ipv2 4#)
                                    (GHC.Prim.and#
                                       (GHC.Prim.and# ipv1 (GHC.Prim.uncheckedShiftL# ipv1 2#))
                                       18229723555195321596##))
                                 17361641481138401520##))
                           1#)
                        18374403900871474942##
                   BasicData.NorthWest
                   -> let {
                        ipv :: GHC.Prim.Word#
                        = GHC.Prim.or#
                            ww1
                            (GHC.Prim.and#
                               (GHC.Prim.and# (GHC.Prim.uncheckedShiftL# ww1 9#) ww)
                               18374403900871474942##)
                      } in
                      let {
                        ipv1 :: GHC.Prim.Word#
                        = GHC.Prim.and#
                            (GHC.Prim.and# ww (GHC.Prim.uncheckedShiftL# ww 9#))
                            18374403900871474942##
                      } in
                      let {
                        ipv2 :: GHC.Prim.Word#
                        = GHC.Prim.or#
                            ipv
                            (GHC.Prim.and#
                               (GHC.Prim.and# (GHC.Prim.uncheckedShiftL# ipv 18#) ipv1)
                               18229723555195321344##)
                      } in
                      GHC.Prim.and#
                        (GHC.Prim.uncheckedShiftL#
                           (GHC.Prim.or#
                              ipv2
                              (GHC.Prim.and#
                                 (GHC.Prim.and#
                                    (GHC.Prim.uncheckedShiftL# ipv2 36#)
                                    (GHC.Prim.and#
                                       (GHC.Prim.and# ipv1 (GHC.Prim.uncheckedShiftL# ipv1 18#))
                                       18229723555195321344##))
                                 17361641481122611200##))
                           9#)
                        18374403900871474942## }) -}
d4ae7333c45cb341cfc33f1488084fe8
  $wfill :: BasicData.Direction -> GHC.Prim.Word# -> GHC.Prim.Word#
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,U>, Inline: [0],
     Unfolding: (\ (w :: BasicData.Direction) (ww :: GHC.Prim.Word#) ->
                 case w of wild {
                   BasicData.North
                   -> let {
                        ipv :: GHC.Prim.Word#
                        = GHC.Prim.or# ww (GHC.Prim.uncheckedShiftL# ww 8#)
                      } in
                      let {
                        ipv1 :: GHC.Prim.Word#
                        = GHC.Prim.or# ipv (GHC.Prim.uncheckedShiftL# ipv 16#)
                      } in
                      GHC.Prim.or# ipv1 (GHC.Prim.uncheckedShiftL# ipv1 32#)
                   BasicData.NorthEast
                   -> let {
                        ipv :: GHC.Prim.Word#
                        = GHC.Prim.or#
                            ww
                            (GHC.Prim.and#
                               (GHC.Prim.uncheckedShiftL# ww 7#)
                               9187201950435737471##)
                      } in
                      let {
                        ipv1 :: GHC.Prim.Word#
                        = GHC.Prim.or#
                            ipv
                            (GHC.Prim.and#
                               (GHC.Prim.uncheckedShiftL# ipv 14#)
                               4557430888798830336##)
                      } in
                      GHC.Prim.or#
                        ipv1
                        (GHC.Prim.and#
                           (GHC.Prim.uncheckedShiftL# ipv1 28#)
                           1085102592570163200##)
                   BasicData.East
                   -> let {
                        ipv :: GHC.Prim.Word#
                        = GHC.Prim.or#
                            ww
                            (GHC.Prim.and#
                               (GHC.Prim.uncheckedShiftRL# ww 1#)
                               9187201950435737471##)
                      } in
                      let {
                        ipv1 :: GHC.Prim.Word#
                        = GHC.Prim.or#
                            ipv
                            (GHC.Prim.and#
                               (GHC.Prim.uncheckedShiftRL# ipv 2#)
                               4557430888798830399##)
                      } in
                      GHC.Prim.or#
                        ipv1
                        (GHC.Prim.and#
                           (GHC.Prim.uncheckedShiftRL# ipv1 4#)
                           1085102592571150095##)
                   BasicData.SouthEast
                   -> let {
                        ipv :: GHC.Prim.Word#
                        = GHC.Prim.or#
                            ww
                            (GHC.Prim.and#
                               (GHC.Prim.uncheckedShiftRL# ww 9#)
                               9187201950435737471##)
                      } in
                      let {
                        ipv1 :: GHC.Prim.Word#
                        = GHC.Prim.or#
                            ipv
                            (GHC.Prim.and#
                               (GHC.Prim.uncheckedShiftRL# ipv 18#)
                               17802464409370431##)
                      } in
                      GHC.Prim.or#
                        ipv1
                        (GHC.Prim.and# (GHC.Prim.uncheckedShiftRL# ipv1 36#) 64677154575##)
                   BasicData.South
                   -> let {
                        ipv :: GHC.Prim.Word#
                        = GHC.Prim.or# ww (GHC.Prim.uncheckedShiftRL# ww 8#)
                      } in
                      let {
                        ipv1 :: GHC.Prim.Word#
                        = GHC.Prim.or# ipv (GHC.Prim.uncheckedShiftRL# ipv 16#)
                      } in
                      GHC.Prim.or# ipv1 (GHC.Prim.uncheckedShiftRL# ipv1 32#)
                   BasicData.SouthWest
                   -> let {
                        ipv :: GHC.Prim.Word#
                        = GHC.Prim.or#
                            ww
                            (GHC.Prim.and#
                               (GHC.Prim.uncheckedShiftRL# ww 7#)
                               18374403900871474942##)
                      } in
                      let {
                        ipv1 :: GHC.Prim.Word#
                        = GHC.Prim.or#
                            ipv
                            (GHC.Prim.and#
                               (GHC.Prim.uncheckedShiftRL# ipv 14#)
                               71209857637481724##)
                      } in
                      GHC.Prim.or#
                        ipv1
                        (GHC.Prim.and#
                           (GHC.Prim.uncheckedShiftRL# ipv1 28#)
                           1034834473200##)
                   BasicData.West
                   -> let {
                        ipv :: GHC.Prim.Word#
                        = GHC.Prim.or#
                            ww
                            (GHC.Prim.and#
                               (GHC.Prim.uncheckedShiftL# ww 1#)
                               18374403900871474942##)
                      } in
                      let {
                        ipv1 :: GHC.Prim.Word#
                        = GHC.Prim.or#
                            ipv
                            (GHC.Prim.and#
                               (GHC.Prim.uncheckedShiftL# ipv 2#)
                               18229723555195321596##)
                      } in
                      GHC.Prim.or#
                        ipv1
                        (GHC.Prim.and#
                           (GHC.Prim.uncheckedShiftL# ipv1 4#)
                           17361641481138401520##)
                   BasicData.NorthWest
                   -> let {
                        ipv :: GHC.Prim.Word#
                        = GHC.Prim.or#
                            ww
                            (GHC.Prim.and#
                               (GHC.Prim.uncheckedShiftL# ww 9#)
                               18374403900871474942##)
                      } in
                      let {
                        ipv1 :: GHC.Prim.Word#
                        = GHC.Prim.or#
                            ipv
                            (GHC.Prim.and#
                               (GHC.Prim.uncheckedShiftL# ipv 18#)
                               18229723555195321344##)
                      } in
                      GHC.Prim.or#
                        ipv1
                        (GHC.Prim.and#
                           (GHC.Prim.uncheckedShiftL# ipv1 36#)
                           17361641481122611200##) }) -}
d51e8dc58d6237f90bf492ddaf857cc3
  $wshowBoard :: GHC.Prim.Word# -> GHC.Base.String
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Word#) ->
                 Data.OldList.unlines
                   (Data.List.Split.Internals.chunksOf
                      @ GHC.Types.Char
                      BitBoard.showBoard4
                      (GHC.Base.map
                         @ GHC.Types.Int
                         @ GHC.Types.Char
                         (\ (x :: GHC.Types.Int) ->
                          case x of wild1 { GHC.Types.I# i# ->
                          case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.>=# i# 64#) of wild2 {
                            GHC.Types.False
                            -> case GHC.Prim.and#
                                      ww
                                      (GHC.Prim.uncheckedShiftL# 1## i#) of wild {
                                 DEFAULT -> BitBoard.showBoard3 0## -> BitBoard.showBoard2 }
                            GHC.Types.True -> BitBoard.showBoard2 } })
                         BitBoard.showBoard1))) -}
5ff49688cf99bbb56b28382562e1971d
  $wsquareNameFrom ::
    GHC.Prim.Word# -> (# GHC.Types.Char, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Word#) ->
                 case ww of wild {
                   DEFAULT
                   -> case GHC.Prim.and#
                             wild
                             (GHC.Prim.minusWord# wild 1##) of wild1 {
                        DEFAULT
                        -> case BitBoard.squareNameFrom3
                           ret_ty (# GHC.Types.Char, [GHC.Types.Char] #)
                           of {}
                        0##
                        -> let {
                             ipv :: GHC.Prim.Int# = GHC.Prim.word2Int# (GHC.Prim.ctz64# wild)
                           } in
                           case GHC.List.$w!!
                                  @ GHC.Types.Char
                                  BitBoard.squareNameFrom2
                                  (GHC.Prim.remInt# ipv 8#) of file { GHC.Types.C# ipv1 ->
                           case GHC.Classes.divInt# ipv 8# of ww4 { DEFAULT ->
                           case GHC.List.$w!!
                                  @ GHC.Types.Char
                                  BitBoard.squareNameFrom1
                                  ww4 of rank { GHC.Types.C# ipv2 ->
                           (# file,
                              GHC.Types.:
                                @ GHC.Types.Char
                                rank
                                (GHC.Types.[] @ GHC.Types.Char) #) } } } }
                   0##
                   -> case BitBoard.squareNameFrom3
                      ret_ty (# GHC.Types.Char, [GHC.Types.Char] #)
                      of {} }) -}
790acc2ef28b51ae83b00b82429f8e4b
  $wstep :: BasicData.Direction -> GHC.Prim.Word# -> GHC.Prim.Word#
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,U>, Inline: [0],
     Unfolding: (\ (w :: BasicData.Direction) (ww :: GHC.Prim.Word#) ->
                 case w of wild {
                   BasicData.North -> GHC.Prim.uncheckedShiftL# ww 8#
                   BasicData.NorthEast
                   -> GHC.Prim.and#
                        (GHC.Prim.uncheckedShiftL# ww 7#)
                        9187201950435737471##
                   BasicData.East
                   -> GHC.Prim.and#
                        (GHC.Prim.uncheckedShiftRL# ww 1#)
                        9187201950435737471##
                   BasicData.SouthEast
                   -> GHC.Prim.and#
                        (GHC.Prim.uncheckedShiftRL# ww 9#)
                        9187201950435737471##
                   BasicData.South -> GHC.Prim.uncheckedShiftRL# ww 8#
                   BasicData.SouthWest
                   -> GHC.Prim.and#
                        (GHC.Prim.uncheckedShiftRL# ww 7#)
                        18374403900871474942##
                   BasicData.West
                   -> GHC.Prim.and#
                        (GHC.Prim.uncheckedShiftL# ww 1#)
                        18374403900871474942##
                   BasicData.NorthWest
                   -> GHC.Prim.and#
                        (GHC.Prim.uncheckedShiftL# ww 9#)
                        18374403900871474942## }) -}
b2234ad6ebd2a1711de939c177d95eba
  attack ::
    BasicData.Direction
    -> Alias.EmptyMap -> Alias.PieceMap -> Alias.BitBoard
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,1*U><S(S),1*U(U)><S(S),1*U(U)>m, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: BasicData.Direction)
                   (w1 :: Alias.EmptyMap)
                   (w2 :: Alias.PieceMap) ->
                 case w1 of ww { GHC.Word.W64# ww1 ->
                 case w2 of ww2 { GHC.Word.W64# ww3 ->
                 case BitBoard.$wattack w ww1 ww3 of ww4 { DEFAULT ->
                 GHC.Word.W64# ww4 } } }) -}
8bbbaf22e6242ed152b48ca7d2115c87
  bishopAttack ::
    Alias.Occupancy -> Alias.PieceMap -> Alias.AttackMap
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Alias.Occupancy) (w1 :: Alias.PieceMap) ->
                 case w of ww { GHC.Word.W64# ww1 ->
                 case w1 of ww2 { GHC.Word.W64# ww3 ->
                 let {
                   ipv :: GHC.Prim.Word# = GHC.Prim.xor# ww1 18446744073709551615##
                 } in
                 let {
                   ipv1 :: GHC.Prim.Word#
                   = GHC.Prim.and#
                       (GHC.Prim.and# ipv (GHC.Prim.uncheckedShiftL# ipv 9#))
                       18374403900871474942##
                 } in
                 let {
                   ipv2 :: GHC.Prim.Word#
                   = GHC.Prim.or#
                       ww3
                       (GHC.Prim.and#
                          (GHC.Prim.and# (GHC.Prim.uncheckedShiftL# ww3 9#) ipv)
                          18374403900871474942##)
                 } in
                 let {
                   ipv3 :: GHC.Prim.Word#
                   = GHC.Prim.or#
                       ipv2
                       (GHC.Prim.and#
                          (GHC.Prim.and# (GHC.Prim.uncheckedShiftL# ipv2 18#) ipv1)
                          18229723555195321344##)
                 } in
                 let {
                   ipv4 :: GHC.Prim.Word#
                   = GHC.Prim.and#
                       (GHC.Prim.and# ipv (GHC.Prim.uncheckedShiftRL# ipv 7#))
                       18374403900871474942##
                 } in
                 let {
                   ipv5 :: GHC.Prim.Word#
                   = GHC.Prim.or#
                       ww3
                       (GHC.Prim.and#
                          (GHC.Prim.and# (GHC.Prim.uncheckedShiftRL# ww3 7#) ipv)
                          18374403900871474942##)
                 } in
                 let {
                   ipv6 :: GHC.Prim.Word#
                   = GHC.Prim.or#
                       ipv5
                       (GHC.Prim.and#
                          (GHC.Prim.and# (GHC.Prim.uncheckedShiftRL# ipv5 14#) ipv4)
                          71209857637481724##)
                 } in
                 let {
                   ipv7 :: GHC.Prim.Word#
                   = GHC.Prim.and#
                       (GHC.Prim.and# ipv (GHC.Prim.uncheckedShiftRL# ipv 9#))
                       9187201950435737471##
                 } in
                 let {
                   ipv8 :: GHC.Prim.Word#
                   = GHC.Prim.or#
                       ww3
                       (GHC.Prim.and#
                          (GHC.Prim.and# (GHC.Prim.uncheckedShiftRL# ww3 9#) ipv)
                          9187201950435737471##)
                 } in
                 let {
                   ipv9 :: GHC.Prim.Word#
                   = GHC.Prim.or#
                       ipv8
                       (GHC.Prim.and#
                          (GHC.Prim.and# (GHC.Prim.uncheckedShiftRL# ipv8 18#) ipv7)
                          17802464409370431##)
                 } in
                 let {
                   ipv10 :: GHC.Prim.Word#
                   = GHC.Prim.and#
                       (GHC.Prim.and# ipv (GHC.Prim.uncheckedShiftL# ipv 7#))
                       9187201950435737471##
                 } in
                 let {
                   ipv11 :: GHC.Prim.Word#
                   = GHC.Prim.or#
                       ww3
                       (GHC.Prim.and#
                          (GHC.Prim.and# (GHC.Prim.uncheckedShiftL# ww3 7#) ipv)
                          9187201950435737471##)
                 } in
                 let {
                   ipv12 :: GHC.Prim.Word#
                   = GHC.Prim.or#
                       ipv11
                       (GHC.Prim.and#
                          (GHC.Prim.and# (GHC.Prim.uncheckedShiftL# ipv11 14#) ipv10)
                          4557430888798830336##)
                 } in
                 GHC.Word.W64#
                   (GHC.Prim.or#
                      (GHC.Prim.or#
                         (GHC.Prim.or#
                            (GHC.Prim.and#
                               (GHC.Prim.uncheckedShiftL#
                                  (GHC.Prim.or#
                                     ipv12
                                     (GHC.Prim.and#
                                        (GHC.Prim.and#
                                           (GHC.Prim.uncheckedShiftL# ipv12 28#)
                                           (GHC.Prim.and#
                                              (GHC.Prim.and#
                                                 ipv10
                                                 (GHC.Prim.uncheckedShiftL# ipv10 14#))
                                              4557430888798830336##))
                                        1085102592570163200##))
                                  7#)
                               9187201950435737471##)
                            (GHC.Prim.and#
                               (GHC.Prim.uncheckedShiftRL#
                                  (GHC.Prim.or#
                                     ipv9
                                     (GHC.Prim.and#
                                        (GHC.Prim.and#
                                           (GHC.Prim.uncheckedShiftRL# ipv9 36#)
                                           (GHC.Prim.and#
                                              (GHC.Prim.and#
                                                 ipv7
                                                 (GHC.Prim.uncheckedShiftRL# ipv7 18#))
                                              17802464409370431##))
                                        64677154575##))
                                  9#)
                               9187201950435737471##))
                         (GHC.Prim.and#
                            (GHC.Prim.uncheckedShiftRL#
                               (GHC.Prim.or#
                                  ipv6
                                  (GHC.Prim.and#
                                     (GHC.Prim.and#
                                        (GHC.Prim.uncheckedShiftRL# ipv6 28#)
                                        (GHC.Prim.and#
                                           (GHC.Prim.and#
                                              ipv4
                                              (GHC.Prim.uncheckedShiftRL# ipv4 14#))
                                           71209857637481724##))
                                     1034834473200##))
                               7#)
                            18374403900871474942##))
                      (GHC.Prim.and#
                         (GHC.Prim.uncheckedShiftL#
                            (GHC.Prim.or#
                               ipv3
                               (GHC.Prim.and#
                                  (GHC.Prim.and#
                                     (GHC.Prim.uncheckedShiftL# ipv3 36#)
                                     (GHC.Prim.and#
                                        (GHC.Prim.and# ipv1 (GHC.Prim.uncheckedShiftL# ipv1 18#))
                                        18229723555195321344##))
                                  17361641481122611200##))
                            9#)
                         18374403900871474942##)) } }) -}
fdfa2511c2f9af36484ce2f46eb0da24
  fill :: BasicData.Direction -> Alias.PieceMap -> Alias.BitBoard
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S(S),1*U(U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: BasicData.Direction) (w1 :: Alias.PieceMap) ->
                 case w1 of ww { GHC.Word.W64# ww1 ->
                 case BitBoard.$wfill w ww1 of ww2 { DEFAULT ->
                 GHC.Word.W64# ww2 } }) -}
e3a1ab07a44c0180159ab317cb3e46f1
  fillVertically :: Alias.PieceMap -> Alias.BitBoard
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Alias.PieceMap) ->
                 case x of x1 { GHC.Word.W64# ipv ->
                 let {
                   ipv1 :: GHC.Prim.Word#
                   = GHC.Prim.or# ipv (GHC.Prim.uncheckedShiftRL# ipv 8#)
                 } in
                 let {
                   ipv2 :: GHC.Prim.Word#
                   = GHC.Prim.or# ipv1 (GHC.Prim.uncheckedShiftRL# ipv1 16#)
                 } in
                 let {
                   ipv3 :: GHC.Prim.Word#
                   = GHC.Prim.or# ipv (GHC.Prim.uncheckedShiftL# ipv 8#)
                 } in
                 let {
                   ipv4 :: GHC.Prim.Word#
                   = GHC.Prim.or# ipv3 (GHC.Prim.uncheckedShiftL# ipv3 16#)
                 } in
                 GHC.Word.W64#
                   (GHC.Prim.or#
                      (GHC.Prim.or# ipv4 (GHC.Prim.uncheckedShiftL# ipv4 32#))
                      (GHC.Prim.or# ipv2 (GHC.Prim.uncheckedShiftRL# ipv2 32#))) }) -}
9c98a382f58a7044cb09de23c7bc1181
  invert :: Alias.BitBoard -> Alias.BitBoard
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (let {
                   f :: GHC.Word.Word64
                   = GHC.Word.$fBitsWord64_$cfromInteger 71777214294589695
                 } in
                 let {
                   f1 :: GHC.Types.Int = GHC.Types.I# 8#
                 } in
                 let {
                   f2 :: GHC.Word.Word64
                   = GHC.Word.$fBitsWord64_$cfromInteger 281470681808895
                 } in
                 let {
                   f3 :: GHC.Types.Int = GHC.Types.I# 16#
                 } in
                 let {
                   g :: GHC.Word.Word64
                   = GHC.Word.$fBitsWord64_$cfromInteger 4294967295
                 } in
                 let {
                   g1 :: GHC.Types.Int = GHC.Types.I# 32#
                 } in
                 \ (x :: Alias.BitBoard) ->
                 case f of mask1 { GHC.Word.W64# ipv ->
                 case f2 of mask2 { GHC.Word.W64# ipv1 ->
                 case g of mask3 { GHC.Word.W64# ipv2 ->
                 case x of source1 { GHC.Word.W64# ipv3 ->
                 case GHC.Word.$fBitsWord64_$c.&.
                        (GHC.Word.$fBitsWord64_$cshiftL mask3 g1)
                        source1 of toMask { GHC.Word.W64# ipv4 ->
                 case GHC.Word.$fBitsWord64_$c.&.
                        mask3
                        source1 of fromMask { GHC.Word.W64# ipv5 ->
                 case GHC.Word.$fBitsWord64_$cxor
                        (GHC.Word.$fBitsWord64_$cshiftL fromMask g1)
                        toMask of xored { GHC.Word.W64# ipv6 ->
                 case GHC.Word.$fBitsWord64_$cxor
                        (GHC.Word.$fBitsWord64_$cxor source1 xored)
                        (GHC.Word.$fBitsWord64_$cshiftR
                           xored
                           g1) of source2 { GHC.Word.W64# ipv7 ->
                 case GHC.Word.$fBitsWord64_$c.&.
                        (GHC.Word.$fBitsWord64_$cshiftL mask2 f3)
                        source2 of toMask1 { GHC.Word.W64# ipv8 ->
                 case GHC.Word.$fBitsWord64_$c.&.
                        mask2
                        source2 of fromMask1 { GHC.Word.W64# ipv9 ->
                 case GHC.Word.$fBitsWord64_$cxor
                        (GHC.Word.$fBitsWord64_$cshiftL fromMask1 f3)
                        toMask1 of xored1 { GHC.Word.W64# ipv10 ->
                 case GHC.Word.$fBitsWord64_$cxor
                        (GHC.Word.$fBitsWord64_$cxor source2 xored1)
                        (GHC.Word.$fBitsWord64_$cshiftR
                           xored1
                           f3) of source3 { GHC.Word.W64# ipv11 ->
                 case GHC.Word.$fBitsWord64_$c.&.
                        (GHC.Word.$fBitsWord64_$cshiftL mask1 f1)
                        source3 of toMask2 { GHC.Word.W64# ipv12 ->
                 case GHC.Word.$fBitsWord64_$c.&.
                        mask1
                        source3 of fromMask2 { GHC.Word.W64# ipv13 ->
                 case GHC.Word.$fBitsWord64_$cxor
                        (GHC.Word.$fBitsWord64_$cshiftL fromMask2 f1)
                        toMask2 of xored2 { GHC.Word.W64# ipv14 ->
                 GHC.Word.$fBitsWord64_$cxor
                   (GHC.Word.$fBitsWord64_$cxor source3 xored2)
                   (GHC.Word.$fBitsWord64_$cshiftR
                      xored2
                      f1) } } } } } } } } } } } } } } }) -}
64918d5f00be6283a13fa2055df2c12b
  kingAttack :: Alias.PieceMap -> Alias.AttackMap
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Alias.PieceMap) ->
                 case x of x1 { GHC.Word.W64# ipv ->
                 GHC.Word.W64#
                   (GHC.Prim.or#
                      (GHC.Prim.or#
                         (GHC.Prim.or#
                            (GHC.Prim.or#
                               (GHC.Prim.or#
                                  (GHC.Prim.or#
                                     (GHC.Prim.or#
                                        (GHC.Prim.uncheckedShiftL# ipv 8#)
                                        (GHC.Prim.and#
                                           (GHC.Prim.uncheckedShiftL# ipv 7#)
                                           9187201950435737471##))
                                     (GHC.Prim.and#
                                        (GHC.Prim.uncheckedShiftRL# ipv 1#)
                                        9187201950435737471##))
                                  (GHC.Prim.and#
                                     (GHC.Prim.uncheckedShiftRL# ipv 9#)
                                     9187201950435737471##))
                               (GHC.Prim.uncheckedShiftRL# ipv 8#))
                            (GHC.Prim.and#
                               (GHC.Prim.uncheckedShiftRL# ipv 7#)
                               18374403900871474942##))
                         (GHC.Prim.and#
                            (GHC.Prim.uncheckedShiftL# ipv 1#)
                            18374403900871474942##))
                      (GHC.Prim.and#
                         (GHC.Prim.uncheckedShiftL# ipv 9#)
                         18374403900871474942##)) }) -}
b2ddd31161b9bc6f3b547c65673f93d0
  knightAttack :: Alias.PieceMap -> Alias.AttackMap
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Alias.PieceMap) ->
                 case x of x1 { GHC.Word.W64# ipv ->
                 GHC.Word.W64#
                   (GHC.Prim.or#
                      (GHC.Prim.or#
                         (GHC.Prim.or#
                            (GHC.Prim.or#
                               (GHC.Prim.or#
                                  (GHC.Prim.or#
                                     (GHC.Prim.or#
                                        (GHC.Prim.and#
                                           (GHC.Prim.uncheckedShiftL# ipv 15#)
                                           9187201950435737471##)
                                        (GHC.Prim.and#
                                           (GHC.Prim.uncheckedShiftL# ipv 6#)
                                           4557430888798830399##))
                                     (GHC.Prim.and#
                                        (GHC.Prim.uncheckedShiftRL# ipv 10#)
                                        4557430888798830399##))
                                  (GHC.Prim.and#
                                     (GHC.Prim.uncheckedShiftRL# ipv 17#)
                                     9187201950435737471##))
                               (GHC.Prim.and#
                                  (GHC.Prim.uncheckedShiftRL# ipv 15#)
                                  18374403900871474942##))
                            (GHC.Prim.and#
                               (GHC.Prim.uncheckedShiftRL# ipv 6#)
                               18229723555195321596##))
                         (GHC.Prim.and#
                            (GHC.Prim.uncheckedShiftL# ipv 10#)
                            18229723555195321596##))
                      (GHC.Prim.and#
                         (GHC.Prim.uncheckedShiftL# ipv 17#)
                         18374403900871474942##)) }) -}
97ddddd307d3bcadba801332ddb7f944
  pawnAttack :: BasicData.Color -> Alias.PieceMap -> Alias.AttackMap
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: BasicData.Color) (x :: Alias.PieceMap) ->
                 case ds of wild {
                   BasicData.White
                   -> case x of x1 { GHC.Word.W64# ipv ->
                      GHC.Word.W64#
                        (GHC.Prim.or#
                           (GHC.Prim.and#
                              (GHC.Prim.uncheckedShiftL# ipv 7#)
                              9187201950435737471##)
                           (GHC.Prim.and#
                              (GHC.Prim.uncheckedShiftL# ipv 9#)
                              18374403900871474942##)) }
                   BasicData.Black
                   -> case x of x1 { GHC.Word.W64# ipv ->
                      GHC.Word.W64#
                        (GHC.Prim.or#
                           (GHC.Prim.and#
                              (GHC.Prim.uncheckedShiftRL# ipv 9#)
                              9187201950435737471##)
                           (GHC.Prim.and#
                              (GHC.Prim.uncheckedShiftRL# ipv 7#)
                              18374403900871474942##)) } }) -}
997cd4fcec55884115a1d642399a1f3a
  rookAttack :: Alias.Occupancy -> Alias.PieceMap -> Alias.AttackMap
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Alias.Occupancy) (w1 :: Alias.PieceMap) ->
                 case w of ww { GHC.Word.W64# ww1 ->
                 case w1 of ww2 { GHC.Word.W64# ww3 ->
                 let {
                   ipv :: GHC.Prim.Word# = GHC.Prim.xor# ww1 18446744073709551615##
                 } in
                 let {
                   ipv1 :: GHC.Prim.Word#
                   = GHC.Prim.and#
                       (GHC.Prim.and# ipv (GHC.Prim.uncheckedShiftL# ipv 1#))
                       18374403900871474942##
                 } in
                 let {
                   ipv2 :: GHC.Prim.Word#
                   = GHC.Prim.or#
                       ww3
                       (GHC.Prim.and#
                          (GHC.Prim.and# (GHC.Prim.uncheckedShiftL# ww3 1#) ipv)
                          18374403900871474942##)
                 } in
                 let {
                   ipv3 :: GHC.Prim.Word#
                   = GHC.Prim.or#
                       ipv2
                       (GHC.Prim.and#
                          (GHC.Prim.and# (GHC.Prim.uncheckedShiftL# ipv2 2#) ipv1)
                          18229723555195321596##)
                 } in
                 let {
                   ipv4 :: GHC.Prim.Word#
                   = GHC.Prim.or#
                       ww3
                       (GHC.Prim.and# (GHC.Prim.uncheckedShiftRL# ww3 8#) ipv)
                 } in
                 let {
                   ipv5 :: GHC.Prim.Word#
                   = GHC.Prim.and# ipv (GHC.Prim.uncheckedShiftRL# ipv 8#)
                 } in
                 let {
                   ipv6 :: GHC.Prim.Word#
                   = GHC.Prim.or#
                       ipv4
                       (GHC.Prim.and# (GHC.Prim.uncheckedShiftRL# ipv4 16#) ipv5)
                 } in
                 let {
                   ipv7 :: GHC.Prim.Word#
                   = GHC.Prim.and#
                       (GHC.Prim.and# ipv (GHC.Prim.uncheckedShiftRL# ipv 1#))
                       9187201950435737471##
                 } in
                 let {
                   ipv8 :: GHC.Prim.Word#
                   = GHC.Prim.or#
                       ww3
                       (GHC.Prim.and#
                          (GHC.Prim.and# (GHC.Prim.uncheckedShiftRL# ww3 1#) ipv)
                          9187201950435737471##)
                 } in
                 let {
                   ipv9 :: GHC.Prim.Word#
                   = GHC.Prim.or#
                       ipv8
                       (GHC.Prim.and#
                          (GHC.Prim.and# (GHC.Prim.uncheckedShiftRL# ipv8 2#) ipv7)
                          4557430888798830399##)
                 } in
                 let {
                   ipv10 :: GHC.Prim.Word#
                   = GHC.Prim.or#
                       ww3
                       (GHC.Prim.and# (GHC.Prim.uncheckedShiftL# ww3 8#) ipv)
                 } in
                 let {
                   ipv11 :: GHC.Prim.Word#
                   = GHC.Prim.and# ipv (GHC.Prim.uncheckedShiftL# ipv 8#)
                 } in
                 let {
                   ipv12 :: GHC.Prim.Word#
                   = GHC.Prim.or#
                       ipv10
                       (GHC.Prim.and# (GHC.Prim.uncheckedShiftL# ipv10 16#) ipv11)
                 } in
                 GHC.Word.W64#
                   (GHC.Prim.or#
                      (GHC.Prim.or#
                         (GHC.Prim.or#
                            (GHC.Prim.uncheckedShiftL#
                               (GHC.Prim.or#
                                  ipv12
                                  (GHC.Prim.and#
                                     (GHC.Prim.uncheckedShiftL# ipv12 32#)
                                     (GHC.Prim.and# ipv11 (GHC.Prim.uncheckedShiftL# ipv11 16#))))
                               8#)
                            (GHC.Prim.and#
                               (GHC.Prim.uncheckedShiftRL#
                                  (GHC.Prim.or#
                                     ipv9
                                     (GHC.Prim.and#
                                        (GHC.Prim.and#
                                           (GHC.Prim.uncheckedShiftRL# ipv9 4#)
                                           (GHC.Prim.and#
                                              (GHC.Prim.and#
                                                 ipv7
                                                 (GHC.Prim.uncheckedShiftRL# ipv7 2#))
                                              4557430888798830399##))
                                        1085102592571150095##))
                                  1#)
                               9187201950435737471##))
                         (GHC.Prim.uncheckedShiftRL#
                            (GHC.Prim.or#
                               ipv6
                               (GHC.Prim.and#
                                  (GHC.Prim.uncheckedShiftRL# ipv6 32#)
                                  (GHC.Prim.and# ipv5 (GHC.Prim.uncheckedShiftRL# ipv5 16#))))
                            8#))
                      (GHC.Prim.and#
                         (GHC.Prim.uncheckedShiftL#
                            (GHC.Prim.or#
                               ipv3
                               (GHC.Prim.and#
                                  (GHC.Prim.and#
                                     (GHC.Prim.uncheckedShiftL# ipv3 4#)
                                     (GHC.Prim.and#
                                        (GHC.Prim.and# ipv1 (GHC.Prim.uncheckedShiftL# ipv1 2#))
                                        18229723555195321596##))
                                  17361641481138401520##))
                            1#)
                         18374403900871474942##)) } }) -}
72e98dd332575ef29fa72eba4fa55b57
  showBoard :: Alias.BitBoard -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Alias.BitBoard) ->
                 case w of ww { GHC.Word.W64# ww1 -> BitBoard.$wshowBoard ww1 }) -}
96eeb201a51546edb1a07eee9325850f
  showBoard1 :: [GHC.Types.Int]
  {- Unfolding: (GHC.Enum.efdtInt 63# 62# 0#) -}
72a8452dcb6c1ea25de56191e08e2b4d
  showBoard2 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# '.'#) -}
f354b9ba13695bd7bef6b156ca64104c
  showBoard3 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# '1'#) -}
efc4b7da062e6d4e2390ac130d8deee7
  showBoard4 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 8#) -}
18ce553b2d72a3598c3e2c67b2621e1f
  squareNameFrom :: Alias.BitBoard -> GHC.Base.String
  {- Arity: 1, Strictness: <S(S),1*U(1*U)>m2, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Alias.BitBoard) ->
                 case w of ww { GHC.Word.W64# ww1 ->
                 case BitBoard.$wsquareNameFrom ww1 of ww2 { (#,#) ww3 ww4 ->
                 GHC.Types.: @ GHC.Types.Char ww3 ww4 } }) -}
8bc4a05d89459cbd76ee2c4a42d72626
  squareNameFrom1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "12345678"#) -}
7c30f74c975b705875985ac028333d05
  squareNameFrom2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "hgfedcba"#) -}
a231a38920bd5c007b939f81568f6ff6
  squareNameFrom3 :: GHC.Base.String
  {- Strictness: x -}
9ac6c39453dc5effa9dbfe222e0d6318
  step :: BasicData.Direction -> Alias.PieceMap -> Alias.BitBoard
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S(S),1*U(U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: BasicData.Direction) (w1 :: Alias.PieceMap) ->
                 case w1 of ww { GHC.Word.W64# ww1 ->
                 case BitBoard.$wstep w ww1 of ww2 { DEFAULT ->
                 GHC.Word.W64# ww2 } }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

